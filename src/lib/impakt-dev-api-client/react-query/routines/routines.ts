/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GetRoutineRes,
  HttpExceptionSchema,
  RoutinesControllerGetRoutinesParams,
  PostRoutineReq,
  PatchRoutineReq,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const routinesControllerGetRoutines = (
  params?: RoutinesControllerGetRoutinesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetRoutineRes[]>(
    { url: `/api/v1/fitness/routines`, method: 'get', params, signal },
    options,
  );
};

export const getRoutinesControllerGetRoutinesQueryKey = (
  params?: RoutinesControllerGetRoutinesParams,
) => [`/api/v1/fitness/routines`, ...(params ? [params] : [])];

export type RoutinesControllerGetRoutinesQueryResult = NonNullable<
  Awaited<ReturnType<typeof routinesControllerGetRoutines>>
>;
export type RoutinesControllerGetRoutinesQueryError = ErrorType<HttpExceptionSchema>;

export const useRoutinesControllerGetRoutines = <
  TData = Awaited<ReturnType<typeof routinesControllerGetRoutines>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params?: RoutinesControllerGetRoutinesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof routinesControllerGetRoutines>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRoutinesControllerGetRoutinesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof routinesControllerGetRoutines>>> = ({
    signal,
  }) => routinesControllerGetRoutines(params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof routinesControllerGetRoutines>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const routinesControllerCreate = (
  postRoutineReq: PostRoutineReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetRoutineRes>(
    {
      url: `/api/v1/fitness/routines`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: postRoutineReq,
    },
    options,
  );
};

export type RoutinesControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof routinesControllerCreate>>
>;
export type RoutinesControllerCreateMutationBody = PostRoutineReq;
export type RoutinesControllerCreateMutationError = ErrorType<HttpExceptionSchema>;

export const useRoutinesControllerCreate = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof routinesControllerCreate>>,
    TError,
    { data: PostRoutineReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof routinesControllerCreate>>,
    { data: PostRoutineReq }
  > = (props) => {
    const { data } = props ?? {};

    return routinesControllerCreate(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof routinesControllerCreate>>,
    TError,
    { data: PostRoutineReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const routinesControllerGetRoutine = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetRoutineRes>(
    { url: `/api/v1/fitness/routines/${id}`, method: 'get', signal },
    options,
  );
};

export const getRoutinesControllerGetRoutineQueryKey = (id: number) => [
  `/api/v1/fitness/routines/${id}`,
];

export type RoutinesControllerGetRoutineQueryResult = NonNullable<
  Awaited<ReturnType<typeof routinesControllerGetRoutine>>
>;
export type RoutinesControllerGetRoutineQueryError = ErrorType<HttpExceptionSchema>;

export const useRoutinesControllerGetRoutine = <
  TData = Awaited<ReturnType<typeof routinesControllerGetRoutine>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof routinesControllerGetRoutine>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRoutinesControllerGetRoutineQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof routinesControllerGetRoutine>>> = ({
    signal,
  }) => routinesControllerGetRoutine(id, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof routinesControllerGetRoutine>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const routinesControllerPatchOne = (
  id: number,
  patchRoutineReq: PatchRoutineReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetRoutineRes>(
    {
      url: `/api/v1/fitness/routines/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: patchRoutineReq,
    },
    options,
  );
};

export type RoutinesControllerPatchOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof routinesControllerPatchOne>>
>;
export type RoutinesControllerPatchOneMutationBody = PatchRoutineReq;
export type RoutinesControllerPatchOneMutationError = ErrorType<HttpExceptionSchema>;

export const useRoutinesControllerPatchOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof routinesControllerPatchOne>>,
    TError,
    { id: number; data: PatchRoutineReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof routinesControllerPatchOne>>,
    { id: number; data: PatchRoutineReq }
  > = (props) => {
    const { id, data } = props ?? {};

    return routinesControllerPatchOne(id, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof routinesControllerPatchOne>>,
    TError,
    { id: number; data: PatchRoutineReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const routinesControllerRemoveOne = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetRoutineRes>(
    { url: `/api/v1/fitness/routines/${id}`, method: 'delete' },
    options,
  );
};

export type RoutinesControllerRemoveOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof routinesControllerRemoveOne>>
>;

export type RoutinesControllerRemoveOneMutationError = ErrorType<HttpExceptionSchema>;

export const useRoutinesControllerRemoveOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof routinesControllerRemoveOne>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof routinesControllerRemoveOne>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return routinesControllerRemoveOne(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof routinesControllerRemoveOne>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
