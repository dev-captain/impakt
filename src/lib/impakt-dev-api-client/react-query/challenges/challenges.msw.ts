/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getChallengesControllerGetManyMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    name: faker.random.word(),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    creatorId: faker.datatype.number({ min: undefined, max: undefined }),
    tags: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => ({
        id: faker.datatype.number({ min: undefined, max: undefined }),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        value: faker.random.word(),
        availableFor: faker.helpers.arrayElement(['Challenges', 'Routines']),
      }),
    ),
    validFrom: `${faker.date.past().toISOString().split('.')[0]}Z`,
    validUntil: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    Routine: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      type: faker.helpers.arrayElement(['HIIT', 'Blitz', 'Rhythm']),
      estimatedTime: faker.datatype.number({ min: undefined, max: undefined }),
      creatorId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      Creator: faker.helpers.arrayElement([
        {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          Roles: faker.helpers.arrayElement([
            'SuperAdmin',
            'Admin',
            'Creator',
            'Tester',
            'Ambassador',
            'Whitelist',
            'Partner',
          ]),
          email: faker.helpers.arrayElement([faker.random.word(), null]),
          username: faker.random.word(),
          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
          discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
          cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          primaryCommunityId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          Communities: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            name: faker.random.word(),
            description: faker.helpers.arrayElement([faker.random.word(), null]),
            ownerId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            createdAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            updatedAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            memberCount: faker.datatype.number({ min: undefined, max: undefined }),
          })),
          DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
          emailVerified: faker.datatype.boolean(),
        },
        undefined,
      ]),
      TimelineBlocks: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
          () => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            order: faker.datatype.number({ min: undefined, max: undefined }),
            type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
            group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
            Exercise: faker.helpers.arrayElement([
              {
                id: faker.datatype.number({ min: undefined, max: undefined }),
                name: faker.random.word(),
                cvSupported: faker.datatype.boolean(),
                startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
                averageTime: faker.datatype.number({ min: undefined, max: undefined }),
                supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
                updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
                createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
                point: faker.datatype.number({ min: undefined, max: undefined }),
              },
              undefined,
            ]),
            exerciseId: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            TimelineBlockAttributes: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.datatype.number({ min: undefined, max: undefined }),
              type: faker.helpers.arrayElement([
                'TimeConstraint',
                'CountConstraint',
                'TimeGoal',
                'CountGoal',
              ]),
              value: faker.datatype.number({ min: undefined, max: undefined }),
              timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
              updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
              createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            })),
            createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            xpMax: faker.datatype.number({ min: undefined, max: undefined }),
            godlMax: faker.datatype.number({ min: undefined, max: undefined }),
            coinMax: faker.datatype.number({ min: undefined, max: undefined }),
          }),
        ),
        undefined,
      ]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      tags: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          value: faker.random.word(),
          availableFor: faker.helpers.arrayElement(['Challenges', 'Routines']),
        }),
      ),
      totalCount: faker.datatype.number({ min: undefined, max: undefined }),
      isChallengeRoutine: faker.datatype.boolean(),
    },
    likes: faker.datatype.number({ min: undefined, max: undefined }),
    routineId: faker.datatype.number({ min: undefined, max: undefined }),
    baseReward: faker.datatype.number({ min: undefined, max: undefined }),
    RoutinesToChallenges: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      validFrom: `${faker.date.past().toISOString().split('.')[0]}Z`,
      validUntil: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        null,
      ]),
      Routine: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        type: faker.helpers.arrayElement(['HIIT', 'Blitz', 'Rhythm']),
        estimatedTime: faker.datatype.number({ min: undefined, max: undefined }),
        creatorId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          undefined,
        ]),
        Creator: faker.helpers.arrayElement([
          {
            id: faker.datatype.number({ min: undefined, max: undefined }),
            Roles: faker.helpers.arrayElement([
              'SuperAdmin',
              'Admin',
              'Creator',
              'Tester',
              'Ambassador',
              'Whitelist',
              'Partner',
            ]),
            email: faker.helpers.arrayElement([faker.random.word(), null]),
            username: faker.random.word(),
            firstName: faker.helpers.arrayElement([faker.random.word(), null]),
            lastName: faker.helpers.arrayElement([faker.random.word(), null]),
            discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
            cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
            createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            primaryCommunityId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            Communities: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.datatype.number({ min: undefined, max: undefined }),
              name: faker.random.word(),
              description: faker.helpers.arrayElement([faker.random.word(), null]),
              ownerId: faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              createdAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
              ]),
              updatedAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
              ]),
              memberCount: faker.datatype.number({ min: undefined, max: undefined }),
            })),
            DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
            emailVerified: faker.datatype.boolean(),
          },
          undefined,
        ]),
        TimelineBlocks: faker.helpers.arrayElement([
          Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
            () => ({
              id: faker.datatype.number({ min: undefined, max: undefined }),
              order: faker.datatype.number({ min: undefined, max: undefined }),
              type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
              group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
              Exercise: faker.helpers.arrayElement([
                {
                  id: faker.datatype.number({ min: undefined, max: undefined }),
                  name: faker.random.word(),
                  cvSupported: faker.datatype.boolean(),
                  startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
                  averageTime: faker.datatype.number({ min: undefined, max: undefined }),
                  supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
                  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
                  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
                  point: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              exerciseId: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  faker.datatype.number({ min: undefined, max: undefined }),
                  null,
                ]),
                undefined,
              ]),
              TimelineBlockAttributes: Array.from(
                { length: faker.datatype.number({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                id: faker.datatype.number({ min: undefined, max: undefined }),
                type: faker.helpers.arrayElement([
                  'TimeConstraint',
                  'CountConstraint',
                  'TimeGoal',
                  'CountGoal',
                ]),
                value: faker.datatype.number({ min: undefined, max: undefined }),
                timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
                updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
                createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
              })),
              createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
              updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
              xpMax: faker.datatype.number({ min: undefined, max: undefined }),
              godlMax: faker.datatype.number({ min: undefined, max: undefined }),
              coinMax: faker.datatype.number({ min: undefined, max: undefined }),
            }),
          ),
          undefined,
        ]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        tags: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          value: faker.random.word(),
          availableFor: faker.helpers.arrayElement(['Challenges', 'Routines']),
        })),
        totalCount: faker.datatype.number({ min: undefined, max: undefined }),
        isChallengeRoutine: faker.datatype.boolean(),
      },
      routineId: faker.datatype.number({ min: undefined, max: undefined }),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      baseReward: faker.datatype.number({ min: undefined, max: undefined }),
      challengeType: faker.helpers.arrayElement(['Daily', 'Weekly']),
      totalCount: faker.datatype.number({ min: undefined, max: undefined }),
      xpMax: faker.datatype.number({ min: undefined, max: undefined }),
      godlMax: faker.datatype.number({ min: undefined, max: undefined }),
    })),
  }));

export const getChallengesControllerCreateOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  name: faker.random.word(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  creatorId: faker.datatype.number({ min: undefined, max: undefined }),
  tags: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      value: faker.random.word(),
      availableFor: faker.helpers.arrayElement(['Challenges', 'Routines']),
    }),
  ),
  validFrom: `${faker.date.past().toISOString().split('.')[0]}Z`,
  validUntil: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    null,
  ]),
  Routine: {
    id: faker.datatype.number({ min: undefined, max: undefined }),
    name: faker.random.word(),
    type: faker.helpers.arrayElement(['HIIT', 'Blitz', 'Rhythm']),
    estimatedTime: faker.datatype.number({ min: undefined, max: undefined }),
    creatorId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      undefined,
    ]),
    Creator: faker.helpers.arrayElement([
      {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        Roles: faker.helpers.arrayElement([
          'SuperAdmin',
          'Admin',
          'Creator',
          'Tester',
          'Ambassador',
          'Whitelist',
          'Partner',
        ]),
        email: faker.helpers.arrayElement([faker.random.word(), null]),
        username: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
        cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        primaryCommunityId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        Communities: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          description: faker.helpers.arrayElement([faker.random.word(), null]),
          ownerId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          memberCount: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
        emailVerified: faker.datatype.boolean(),
      },
      undefined,
    ]),
    TimelineBlocks: faker.helpers.arrayElement([
      Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          order: faker.datatype.number({ min: undefined, max: undefined }),
          type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
          group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
          Exercise: faker.helpers.arrayElement([
            {
              id: faker.datatype.number({ min: undefined, max: undefined }),
              name: faker.random.word(),
              cvSupported: faker.datatype.boolean(),
              startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
              averageTime: faker.datatype.number({ min: undefined, max: undefined }),
              supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
              updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
              createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
              point: faker.datatype.number({ min: undefined, max: undefined }),
            },
            undefined,
          ]),
          exerciseId: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          TimelineBlockAttributes: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            type: faker.helpers.arrayElement([
              'TimeConstraint',
              'CountConstraint',
              'TimeGoal',
              'CountGoal',
            ]),
            value: faker.datatype.number({ min: undefined, max: undefined }),
            timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
            updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          })),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          xpMax: faker.datatype.number({ min: undefined, max: undefined }),
          godlMax: faker.datatype.number({ min: undefined, max: undefined }),
          coinMax: faker.datatype.number({ min: undefined, max: undefined }),
        }),
      ),
      undefined,
    ]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    tags: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => ({
        id: faker.datatype.number({ min: undefined, max: undefined }),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        value: faker.random.word(),
        availableFor: faker.helpers.arrayElement(['Challenges', 'Routines']),
      }),
    ),
    totalCount: faker.datatype.number({ min: undefined, max: undefined }),
    isChallengeRoutine: faker.datatype.boolean(),
  },
  likes: faker.datatype.number({ min: undefined, max: undefined }),
  routineId: faker.datatype.number({ min: undefined, max: undefined }),
  baseReward: faker.datatype.number({ min: undefined, max: undefined }),
  RoutinesToChallenges: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    validFrom: `${faker.date.past().toISOString().split('.')[0]}Z`,
    validUntil: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    Routine: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      type: faker.helpers.arrayElement(['HIIT', 'Blitz', 'Rhythm']),
      estimatedTime: faker.datatype.number({ min: undefined, max: undefined }),
      creatorId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      Creator: faker.helpers.arrayElement([
        {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          Roles: faker.helpers.arrayElement([
            'SuperAdmin',
            'Admin',
            'Creator',
            'Tester',
            'Ambassador',
            'Whitelist',
            'Partner',
          ]),
          email: faker.helpers.arrayElement([faker.random.word(), null]),
          username: faker.random.word(),
          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
          discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
          cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          primaryCommunityId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          Communities: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            name: faker.random.word(),
            description: faker.helpers.arrayElement([faker.random.word(), null]),
            ownerId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            createdAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            updatedAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            memberCount: faker.datatype.number({ min: undefined, max: undefined }),
          })),
          DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
          emailVerified: faker.datatype.boolean(),
        },
        undefined,
      ]),
      TimelineBlocks: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
          () => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            order: faker.datatype.number({ min: undefined, max: undefined }),
            type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
            group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
            Exercise: faker.helpers.arrayElement([
              {
                id: faker.datatype.number({ min: undefined, max: undefined }),
                name: faker.random.word(),
                cvSupported: faker.datatype.boolean(),
                startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
                averageTime: faker.datatype.number({ min: undefined, max: undefined }),
                supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
                updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
                createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
                point: faker.datatype.number({ min: undefined, max: undefined }),
              },
              undefined,
            ]),
            exerciseId: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            TimelineBlockAttributes: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.datatype.number({ min: undefined, max: undefined }),
              type: faker.helpers.arrayElement([
                'TimeConstraint',
                'CountConstraint',
                'TimeGoal',
                'CountGoal',
              ]),
              value: faker.datatype.number({ min: undefined, max: undefined }),
              timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
              updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
              createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            })),
            createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            xpMax: faker.datatype.number({ min: undefined, max: undefined }),
            godlMax: faker.datatype.number({ min: undefined, max: undefined }),
            coinMax: faker.datatype.number({ min: undefined, max: undefined }),
          }),
        ),
        undefined,
      ]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      tags: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          value: faker.random.word(),
          availableFor: faker.helpers.arrayElement(['Challenges', 'Routines']),
        }),
      ),
      totalCount: faker.datatype.number({ min: undefined, max: undefined }),
      isChallengeRoutine: faker.datatype.boolean(),
    },
    routineId: faker.datatype.number({ min: undefined, max: undefined }),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    baseReward: faker.datatype.number({ min: undefined, max: undefined }),
    challengeType: faker.helpers.arrayElement(['Daily', 'Weekly']),
    totalCount: faker.datatype.number({ min: undefined, max: undefined }),
    xpMax: faker.datatype.number({ min: undefined, max: undefined }),
    godlMax: faker.datatype.number({ min: undefined, max: undefined }),
  })),
});

export const getChallengesControllerGetOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  name: faker.random.word(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  creatorId: faker.datatype.number({ min: undefined, max: undefined }),
  tags: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      value: faker.random.word(),
      availableFor: faker.helpers.arrayElement(['Challenges', 'Routines']),
    }),
  ),
  validFrom: `${faker.date.past().toISOString().split('.')[0]}Z`,
  validUntil: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    null,
  ]),
  Routine: {
    id: faker.datatype.number({ min: undefined, max: undefined }),
    name: faker.random.word(),
    type: faker.helpers.arrayElement(['HIIT', 'Blitz', 'Rhythm']),
    estimatedTime: faker.datatype.number({ min: undefined, max: undefined }),
    creatorId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      undefined,
    ]),
    Creator: faker.helpers.arrayElement([
      {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        Roles: faker.helpers.arrayElement([
          'SuperAdmin',
          'Admin',
          'Creator',
          'Tester',
          'Ambassador',
          'Whitelist',
          'Partner',
        ]),
        email: faker.helpers.arrayElement([faker.random.word(), null]),
        username: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
        cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        primaryCommunityId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        Communities: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          description: faker.helpers.arrayElement([faker.random.word(), null]),
          ownerId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          memberCount: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
        emailVerified: faker.datatype.boolean(),
      },
      undefined,
    ]),
    TimelineBlocks: faker.helpers.arrayElement([
      Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          order: faker.datatype.number({ min: undefined, max: undefined }),
          type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
          group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
          Exercise: faker.helpers.arrayElement([
            {
              id: faker.datatype.number({ min: undefined, max: undefined }),
              name: faker.random.word(),
              cvSupported: faker.datatype.boolean(),
              startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
              averageTime: faker.datatype.number({ min: undefined, max: undefined }),
              supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
              updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
              createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
              point: faker.datatype.number({ min: undefined, max: undefined }),
            },
            undefined,
          ]),
          exerciseId: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          TimelineBlockAttributes: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            type: faker.helpers.arrayElement([
              'TimeConstraint',
              'CountConstraint',
              'TimeGoal',
              'CountGoal',
            ]),
            value: faker.datatype.number({ min: undefined, max: undefined }),
            timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
            updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          })),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          xpMax: faker.datatype.number({ min: undefined, max: undefined }),
          godlMax: faker.datatype.number({ min: undefined, max: undefined }),
          coinMax: faker.datatype.number({ min: undefined, max: undefined }),
        }),
      ),
      undefined,
    ]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    tags: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => ({
        id: faker.datatype.number({ min: undefined, max: undefined }),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        value: faker.random.word(),
        availableFor: faker.helpers.arrayElement(['Challenges', 'Routines']),
      }),
    ),
    totalCount: faker.datatype.number({ min: undefined, max: undefined }),
    isChallengeRoutine: faker.datatype.boolean(),
  },
  likes: faker.datatype.number({ min: undefined, max: undefined }),
  routineId: faker.datatype.number({ min: undefined, max: undefined }),
  baseReward: faker.datatype.number({ min: undefined, max: undefined }),
  RoutinesToChallenges: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    validFrom: `${faker.date.past().toISOString().split('.')[0]}Z`,
    validUntil: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    Routine: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      type: faker.helpers.arrayElement(['HIIT', 'Blitz', 'Rhythm']),
      estimatedTime: faker.datatype.number({ min: undefined, max: undefined }),
      creatorId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      Creator: faker.helpers.arrayElement([
        {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          Roles: faker.helpers.arrayElement([
            'SuperAdmin',
            'Admin',
            'Creator',
            'Tester',
            'Ambassador',
            'Whitelist',
            'Partner',
          ]),
          email: faker.helpers.arrayElement([faker.random.word(), null]),
          username: faker.random.word(),
          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
          discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
          cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          primaryCommunityId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          Communities: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            name: faker.random.word(),
            description: faker.helpers.arrayElement([faker.random.word(), null]),
            ownerId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            createdAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            updatedAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            memberCount: faker.datatype.number({ min: undefined, max: undefined }),
          })),
          DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
          emailVerified: faker.datatype.boolean(),
        },
        undefined,
      ]),
      TimelineBlocks: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
          () => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            order: faker.datatype.number({ min: undefined, max: undefined }),
            type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
            group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
            Exercise: faker.helpers.arrayElement([
              {
                id: faker.datatype.number({ min: undefined, max: undefined }),
                name: faker.random.word(),
                cvSupported: faker.datatype.boolean(),
                startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
                averageTime: faker.datatype.number({ min: undefined, max: undefined }),
                supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
                updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
                createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
                point: faker.datatype.number({ min: undefined, max: undefined }),
              },
              undefined,
            ]),
            exerciseId: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            TimelineBlockAttributes: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.datatype.number({ min: undefined, max: undefined }),
              type: faker.helpers.arrayElement([
                'TimeConstraint',
                'CountConstraint',
                'TimeGoal',
                'CountGoal',
              ]),
              value: faker.datatype.number({ min: undefined, max: undefined }),
              timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
              updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
              createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            })),
            createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            xpMax: faker.datatype.number({ min: undefined, max: undefined }),
            godlMax: faker.datatype.number({ min: undefined, max: undefined }),
            coinMax: faker.datatype.number({ min: undefined, max: undefined }),
          }),
        ),
        undefined,
      ]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      tags: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          value: faker.random.word(),
          availableFor: faker.helpers.arrayElement(['Challenges', 'Routines']),
        }),
      ),
      totalCount: faker.datatype.number({ min: undefined, max: undefined }),
      isChallengeRoutine: faker.datatype.boolean(),
    },
    routineId: faker.datatype.number({ min: undefined, max: undefined }),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    baseReward: faker.datatype.number({ min: undefined, max: undefined }),
    challengeType: faker.helpers.arrayElement(['Daily', 'Weekly']),
    totalCount: faker.datatype.number({ min: undefined, max: undefined }),
    xpMax: faker.datatype.number({ min: undefined, max: undefined }),
    godlMax: faker.datatype.number({ min: undefined, max: undefined }),
  })),
});

export const getChallengesControllerPatchOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  name: faker.random.word(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  creatorId: faker.datatype.number({ min: undefined, max: undefined }),
  tags: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      value: faker.random.word(),
      availableFor: faker.helpers.arrayElement(['Challenges', 'Routines']),
    }),
  ),
  validFrom: `${faker.date.past().toISOString().split('.')[0]}Z`,
  validUntil: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    null,
  ]),
  Routine: {
    id: faker.datatype.number({ min: undefined, max: undefined }),
    name: faker.random.word(),
    type: faker.helpers.arrayElement(['HIIT', 'Blitz', 'Rhythm']),
    estimatedTime: faker.datatype.number({ min: undefined, max: undefined }),
    creatorId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      undefined,
    ]),
    Creator: faker.helpers.arrayElement([
      {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        Roles: faker.helpers.arrayElement([
          'SuperAdmin',
          'Admin',
          'Creator',
          'Tester',
          'Ambassador',
          'Whitelist',
          'Partner',
        ]),
        email: faker.helpers.arrayElement([faker.random.word(), null]),
        username: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
        cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        primaryCommunityId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        Communities: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          description: faker.helpers.arrayElement([faker.random.word(), null]),
          ownerId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          memberCount: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
        emailVerified: faker.datatype.boolean(),
      },
      undefined,
    ]),
    TimelineBlocks: faker.helpers.arrayElement([
      Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          order: faker.datatype.number({ min: undefined, max: undefined }),
          type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
          group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
          Exercise: faker.helpers.arrayElement([
            {
              id: faker.datatype.number({ min: undefined, max: undefined }),
              name: faker.random.word(),
              cvSupported: faker.datatype.boolean(),
              startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
              averageTime: faker.datatype.number({ min: undefined, max: undefined }),
              supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
              updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
              createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
              point: faker.datatype.number({ min: undefined, max: undefined }),
            },
            undefined,
          ]),
          exerciseId: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          TimelineBlockAttributes: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            type: faker.helpers.arrayElement([
              'TimeConstraint',
              'CountConstraint',
              'TimeGoal',
              'CountGoal',
            ]),
            value: faker.datatype.number({ min: undefined, max: undefined }),
            timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
            updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          })),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          xpMax: faker.datatype.number({ min: undefined, max: undefined }),
          godlMax: faker.datatype.number({ min: undefined, max: undefined }),
          coinMax: faker.datatype.number({ min: undefined, max: undefined }),
        }),
      ),
      undefined,
    ]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    tags: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => ({
        id: faker.datatype.number({ min: undefined, max: undefined }),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        value: faker.random.word(),
        availableFor: faker.helpers.arrayElement(['Challenges', 'Routines']),
      }),
    ),
    totalCount: faker.datatype.number({ min: undefined, max: undefined }),
    isChallengeRoutine: faker.datatype.boolean(),
  },
  likes: faker.datatype.number({ min: undefined, max: undefined }),
  routineId: faker.datatype.number({ min: undefined, max: undefined }),
  baseReward: faker.datatype.number({ min: undefined, max: undefined }),
  RoutinesToChallenges: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    validFrom: `${faker.date.past().toISOString().split('.')[0]}Z`,
    validUntil: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    Routine: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      type: faker.helpers.arrayElement(['HIIT', 'Blitz', 'Rhythm']),
      estimatedTime: faker.datatype.number({ min: undefined, max: undefined }),
      creatorId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      Creator: faker.helpers.arrayElement([
        {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          Roles: faker.helpers.arrayElement([
            'SuperAdmin',
            'Admin',
            'Creator',
            'Tester',
            'Ambassador',
            'Whitelist',
            'Partner',
          ]),
          email: faker.helpers.arrayElement([faker.random.word(), null]),
          username: faker.random.word(),
          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
          discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
          cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          primaryCommunityId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          Communities: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            name: faker.random.word(),
            description: faker.helpers.arrayElement([faker.random.word(), null]),
            ownerId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            createdAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            updatedAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            memberCount: faker.datatype.number({ min: undefined, max: undefined }),
          })),
          DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
          emailVerified: faker.datatype.boolean(),
        },
        undefined,
      ]),
      TimelineBlocks: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
          () => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            order: faker.datatype.number({ min: undefined, max: undefined }),
            type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
            group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
            Exercise: faker.helpers.arrayElement([
              {
                id: faker.datatype.number({ min: undefined, max: undefined }),
                name: faker.random.word(),
                cvSupported: faker.datatype.boolean(),
                startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
                averageTime: faker.datatype.number({ min: undefined, max: undefined }),
                supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
                updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
                createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
                point: faker.datatype.number({ min: undefined, max: undefined }),
              },
              undefined,
            ]),
            exerciseId: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            TimelineBlockAttributes: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.datatype.number({ min: undefined, max: undefined }),
              type: faker.helpers.arrayElement([
                'TimeConstraint',
                'CountConstraint',
                'TimeGoal',
                'CountGoal',
              ]),
              value: faker.datatype.number({ min: undefined, max: undefined }),
              timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
              updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
              createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            })),
            createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            xpMax: faker.datatype.number({ min: undefined, max: undefined }),
            godlMax: faker.datatype.number({ min: undefined, max: undefined }),
            coinMax: faker.datatype.number({ min: undefined, max: undefined }),
          }),
        ),
        undefined,
      ]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      tags: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
        () => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          value: faker.random.word(),
          availableFor: faker.helpers.arrayElement(['Challenges', 'Routines']),
        }),
      ),
      totalCount: faker.datatype.number({ min: undefined, max: undefined }),
      isChallengeRoutine: faker.datatype.boolean(),
    },
    routineId: faker.datatype.number({ min: undefined, max: undefined }),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    baseReward: faker.datatype.number({ min: undefined, max: undefined }),
    challengeType: faker.helpers.arrayElement(['Daily', 'Weekly']),
    totalCount: faker.datatype.number({ min: undefined, max: undefined }),
    xpMax: faker.datatype.number({ min: undefined, max: undefined }),
    godlMax: faker.datatype.number({ min: undefined, max: undefined }),
  })),
});

export const getChallengesMSW = () => [
  rest.get('*/api/v1/fitness/challenges', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getChallengesControllerGetManyMock()),
    );
  }),
  rest.post('*/api/v1/fitness/challenges', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getChallengesControllerCreateOneMock()),
    );
  }),
  rest.get('*/api/v1/fitness/challenges/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getChallengesControllerGetOneMock()),
    );
  }),
  rest.patch('*/api/v1/fitness/challenges/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getChallengesControllerPatchOneMock()),
    );
  }),
  rest.delete('*/api/v1/fitness/challenges/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
];
