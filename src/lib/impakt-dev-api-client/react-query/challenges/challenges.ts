/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GetChallengeRes,
  HttpExceptionSchema,
  ChallengesControllerGetManyParams,
  PostChallengeReq,
  PatchChallengeReq,
  PutChallengeTag,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const challengesControllerGetMany = (
  params: ChallengesControllerGetManyParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetChallengeRes[]>(
    { url: `/api/v1/fitness/challenges`, method: 'get', params, signal },
    options,
  );
};

export const getChallengesControllerGetManyQueryKey = (
  params: ChallengesControllerGetManyParams,
) => [`/api/v1/fitness/challenges`, ...(params ? [params] : [])];

export type ChallengesControllerGetManyQueryResult = NonNullable<
  Awaited<ReturnType<typeof challengesControllerGetMany>>
>;
export type ChallengesControllerGetManyQueryError = ErrorType<HttpExceptionSchema>;

export const useChallengesControllerGetMany = <
  TData = Awaited<ReturnType<typeof challengesControllerGetMany>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params: ChallengesControllerGetManyParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof challengesControllerGetMany>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getChallengesControllerGetManyQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof challengesControllerGetMany>>> = ({
    signal,
  }) => challengesControllerGetMany(params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof challengesControllerGetMany>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const challengesControllerCreateOne = (
  postChallengeReq: PostChallengeReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetChallengeRes>(
    {
      url: `/api/v1/fitness/challenges`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: postChallengeReq,
    },
    options,
  );
};

export type ChallengesControllerCreateOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof challengesControllerCreateOne>>
>;
export type ChallengesControllerCreateOneMutationBody = PostChallengeReq;
export type ChallengesControllerCreateOneMutationError = ErrorType<HttpExceptionSchema>;

export const useChallengesControllerCreateOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof challengesControllerCreateOne>>,
    TError,
    { data: PostChallengeReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof challengesControllerCreateOne>>,
    { data: PostChallengeReq }
  > = (props) => {
    const { data } = props ?? {};

    return challengesControllerCreateOne(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof challengesControllerCreateOne>>,
    TError,
    { data: PostChallengeReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const challengesControllerGetOne = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetChallengeRes>(
    { url: `/api/v1/fitness/challenges/${id}`, method: 'get', signal },
    options,
  );
};

export const getChallengesControllerGetOneQueryKey = (id: number) => [
  `/api/v1/fitness/challenges/${id}`,
];

export type ChallengesControllerGetOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof challengesControllerGetOne>>
>;
export type ChallengesControllerGetOneQueryError = ErrorType<HttpExceptionSchema>;

export const useChallengesControllerGetOne = <
  TData = Awaited<ReturnType<typeof challengesControllerGetOne>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof challengesControllerGetOne>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getChallengesControllerGetOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof challengesControllerGetOne>>> = ({
    signal,
  }) => challengesControllerGetOne(id, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof challengesControllerGetOne>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const challengesControllerPatchOne = (
  id: number,
  patchChallengeReq: PatchChallengeReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetChallengeRes>(
    {
      url: `/api/v1/fitness/challenges/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: patchChallengeReq,
    },
    options,
  );
};

export type ChallengesControllerPatchOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof challengesControllerPatchOne>>
>;
export type ChallengesControllerPatchOneMutationBody = PatchChallengeReq;
export type ChallengesControllerPatchOneMutationError = ErrorType<HttpExceptionSchema>;

export const useChallengesControllerPatchOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof challengesControllerPatchOne>>,
    TError,
    { id: number; data: PatchChallengeReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof challengesControllerPatchOne>>,
    { id: number; data: PatchChallengeReq }
  > = (props) => {
    const { id, data } = props ?? {};

    return challengesControllerPatchOne(id, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof challengesControllerPatchOne>>,
    TError,
    { id: number; data: PatchChallengeReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const challengesControllerRemoveOne = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v1/fitness/challenges/${id}`, method: 'delete' },
    options,
  );
};

export type ChallengesControllerRemoveOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof challengesControllerRemoveOne>>
>;

export type ChallengesControllerRemoveOneMutationError = ErrorType<HttpExceptionSchema>;

export const useChallengesControllerRemoveOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof challengesControllerRemoveOne>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof challengesControllerRemoveOne>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return challengesControllerRemoveOne(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof challengesControllerRemoveOne>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const challengeTagV1ControllerSetChallengeTags = (
  challengeId: number,
  putChallengeTag: PutChallengeTag,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/v1/challenge/${challengeId}/tag`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: putChallengeTag,
    },
    options,
  );
};

export type ChallengeTagV1ControllerSetChallengeTagsMutationResult = NonNullable<
  Awaited<ReturnType<typeof challengeTagV1ControllerSetChallengeTags>>
>;
export type ChallengeTagV1ControllerSetChallengeTagsMutationBody = PutChallengeTag;
export type ChallengeTagV1ControllerSetChallengeTagsMutationError = ErrorType<unknown>;

export const useChallengeTagV1ControllerSetChallengeTags = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof challengeTagV1ControllerSetChallengeTags>>,
    TError,
    { challengeId: number; data: PutChallengeTag },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof challengeTagV1ControllerSetChallengeTags>>,
    { challengeId: number; data: PutChallengeTag }
  > = (props) => {
    const { challengeId, data } = props ?? {};

    return challengeTagV1ControllerSetChallengeTags(challengeId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof challengeTagV1ControllerSetChallengeTags>>,
    TError,
    { challengeId: number; data: PutChallengeTag },
    TContext
  >(mutationFn, mutationOptions);
};
