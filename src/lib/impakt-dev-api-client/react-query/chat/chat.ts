/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  ConversationCreateV1Dto,
  MessagesV1Dto,
  MessageControllerV1GetMessagesParams,
  MessageV1Dto,
  CreateMessageV1Dto,
  UpdateMessageV1Dto,
  DeleteMessageVDto,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const conversationControllerV1GetConversations = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/v1/chat/conversations`, method: 'get', signal },
    options,
  );
};

export const getConversationControllerV1GetConversationsQueryKey = () => [
  `/api/v1/chat/conversations`,
];

export type ConversationControllerV1GetConversationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof conversationControllerV1GetConversations>>
>;
export type ConversationControllerV1GetConversationsQueryError = ErrorType<unknown>;

export const useConversationControllerV1GetConversations = <
  TData = Awaited<ReturnType<typeof conversationControllerV1GetConversations>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof conversationControllerV1GetConversations>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getConversationControllerV1GetConversationsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof conversationControllerV1GetConversations>>
  > = ({ signal }) => conversationControllerV1GetConversations(requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof conversationControllerV1GetConversations>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const conversationControllerV1CreateConversation = (
  conversationCreateV1Dto: ConversationCreateV1Dto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/v1/chat/conversations`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: conversationCreateV1Dto,
    },
    options,
  );
};

export type ConversationControllerV1CreateConversationMutationResult = NonNullable<
  Awaited<ReturnType<typeof conversationControllerV1CreateConversation>>
>;
export type ConversationControllerV1CreateConversationMutationBody = ConversationCreateV1Dto;
export type ConversationControllerV1CreateConversationMutationError = ErrorType<unknown>;

export const useConversationControllerV1CreateConversation = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof conversationControllerV1CreateConversation>>,
    TError,
    { data: ConversationCreateV1Dto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof conversationControllerV1CreateConversation>>,
    { data: ConversationCreateV1Dto }
  > = (props) => {
    const { data } = props ?? {};

    return conversationControllerV1CreateConversation(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof conversationControllerV1CreateConversation>>,
    TError,
    { data: ConversationCreateV1Dto },
    TContext
  >(mutationFn, mutationOptions);
};
export const conversationControllerV1DeleteConversation = (
  conversationId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v1/chat/conversations/${conversationId}`, method: 'delete' },
    options,
  );
};

export type ConversationControllerV1DeleteConversationMutationResult = NonNullable<
  Awaited<ReturnType<typeof conversationControllerV1DeleteConversation>>
>;

export type ConversationControllerV1DeleteConversationMutationError = ErrorType<unknown>;

export const useConversationControllerV1DeleteConversation = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof conversationControllerV1DeleteConversation>>,
    TError,
    { conversationId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof conversationControllerV1DeleteConversation>>,
    { conversationId: number }
  > = (props) => {
    const { conversationId } = props ?? {};

    return conversationControllerV1DeleteConversation(conversationId, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof conversationControllerV1DeleteConversation>>,
    TError,
    { conversationId: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const messageControllerV1GetMessages = (
  conversationId: number,
  params?: MessageControllerV1GetMessagesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<MessagesV1Dto>(
    { url: `/api/v1/chat/conversations/${conversationId}/messages`, method: 'get', params, signal },
    options,
  );
};

export const getMessageControllerV1GetMessagesQueryKey = (
  conversationId: number,
  params?: MessageControllerV1GetMessagesParams,
) => [`/api/v1/chat/conversations/${conversationId}/messages`, ...(params ? [params] : [])];

export type MessageControllerV1GetMessagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof messageControllerV1GetMessages>>
>;
export type MessageControllerV1GetMessagesQueryError = ErrorType<unknown>;

export const useMessageControllerV1GetMessages = <
  TData = Awaited<ReturnType<typeof messageControllerV1GetMessages>>,
  TError = ErrorType<unknown>,
>(
  conversationId: number,
  params?: MessageControllerV1GetMessagesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof messageControllerV1GetMessages>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getMessageControllerV1GetMessagesQueryKey(conversationId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof messageControllerV1GetMessages>>> = ({
    signal,
  }) => messageControllerV1GetMessages(conversationId, params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof messageControllerV1GetMessages>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!conversationId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const messageControllerV1CreateMessage = (
  conversationId: number,
  createMessageV1Dto: CreateMessageV1Dto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<MessageV1Dto>(
    {
      url: `/api/v1/chat/conversations/${conversationId}/messages`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: createMessageV1Dto,
    },
    options,
  );
};

export type MessageControllerV1CreateMessageMutationResult = NonNullable<
  Awaited<ReturnType<typeof messageControllerV1CreateMessage>>
>;
export type MessageControllerV1CreateMessageMutationBody = CreateMessageV1Dto;
export type MessageControllerV1CreateMessageMutationError = ErrorType<unknown>;

export const useMessageControllerV1CreateMessage = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof messageControllerV1CreateMessage>>,
    TError,
    { conversationId: number; data: CreateMessageV1Dto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof messageControllerV1CreateMessage>>,
    { conversationId: number; data: CreateMessageV1Dto }
  > = (props) => {
    const { conversationId, data } = props ?? {};

    return messageControllerV1CreateMessage(conversationId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof messageControllerV1CreateMessage>>,
    TError,
    { conversationId: number; data: CreateMessageV1Dto },
    TContext
  >(mutationFn, mutationOptions);
};
export const messageControllerV1UpdateMessage = (
  conversationId: number,
  messageId: number,
  updateMessageV1Dto: UpdateMessageV1Dto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<MessageV1Dto>(
    {
      url: `/api/v1/chat/conversations/${conversationId}/messages/${messageId}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: updateMessageV1Dto,
    },
    options,
  );
};

export type MessageControllerV1UpdateMessageMutationResult = NonNullable<
  Awaited<ReturnType<typeof messageControllerV1UpdateMessage>>
>;
export type MessageControllerV1UpdateMessageMutationBody = UpdateMessageV1Dto;
export type MessageControllerV1UpdateMessageMutationError = ErrorType<unknown>;

export const useMessageControllerV1UpdateMessage = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof messageControllerV1UpdateMessage>>,
    TError,
    { conversationId: number; messageId: number; data: UpdateMessageV1Dto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof messageControllerV1UpdateMessage>>,
    { conversationId: number; messageId: number; data: UpdateMessageV1Dto }
  > = (props) => {
    const { conversationId, messageId, data } = props ?? {};

    return messageControllerV1UpdateMessage(conversationId, messageId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof messageControllerV1UpdateMessage>>,
    TError,
    { conversationId: number; messageId: number; data: UpdateMessageV1Dto },
    TContext
  >(mutationFn, mutationOptions);
};
export const messageControllerV1DeleteMessage = (
  conversationId: number,
  messageId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<DeleteMessageVDto>(
    { url: `/api/v1/chat/conversations/${conversationId}/messages/${messageId}`, method: 'delete' },
    options,
  );
};

export type MessageControllerV1DeleteMessageMutationResult = NonNullable<
  Awaited<ReturnType<typeof messageControllerV1DeleteMessage>>
>;

export type MessageControllerV1DeleteMessageMutationError = ErrorType<unknown>;

export const useMessageControllerV1DeleteMessage = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof messageControllerV1DeleteMessage>>,
    TError,
    { conversationId: number; messageId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof messageControllerV1DeleteMessage>>,
    { conversationId: number; messageId: number }
  > = (props) => {
    const { conversationId, messageId } = props ?? {};

    return messageControllerV1DeleteMessage(conversationId, messageId, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof messageControllerV1DeleteMessage>>,
    TError,
    { conversationId: number; messageId: number },
    TContext
  >(mutationFn, mutationOptions);
};
