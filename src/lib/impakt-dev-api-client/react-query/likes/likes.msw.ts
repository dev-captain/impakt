/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getLikeControllerGetChallengeLikesMock = () => ({
  count: faker.datatype.number({ min: undefined, max: undefined }),
  likedByUser: faker.helpers.arrayElement([
    {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      userId: faker.datatype.number({ min: undefined, max: undefined }),
      objectId: faker.datatype.number({ min: undefined, max: undefined }),
      type: faker.helpers.arrayElement([
        'Challenge',
        'Routine',
        'Post',
        'Comment',
        'CalendarEvent',
      ]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    },
    undefined,
  ]),
});

export const getLikeControllerCreateChallengeLikeMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  userId: faker.datatype.number({ min: undefined, max: undefined }),
  objectId: faker.datatype.number({ min: undefined, max: undefined }),
  type: faker.helpers.arrayElement(['Challenge', 'Routine', 'Post', 'Comment', 'CalendarEvent']),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
});

export const getLikesMSW = () => [
  rest.get('*/api/v1/likes/challenge/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getLikeControllerGetChallengeLikesMock()),
    );
  }),
  rest.post('*/api/v1/likes/challenge', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getLikeControllerCreateChallengeLikeMock()),
    );
  }),
];
