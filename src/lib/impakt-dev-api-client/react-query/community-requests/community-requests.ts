/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type { UseMutationOptions, MutationFunction } from '@tanstack/react-query';
import type { GetCommunityRes, HttpExceptionSchema } from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const communityRequestsControllerJoin = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetCommunityRes>(
    { url: `/api/v1/community/requests/join/${id}`, method: 'post' },
    options,
  );
};

export type CommunityRequestsControllerJoinMutationResult = NonNullable<
  Awaited<ReturnType<typeof communityRequestsControllerJoin>>
>;

export type CommunityRequestsControllerJoinMutationError = ErrorType<HttpExceptionSchema>;

export const useCommunityRequestsControllerJoin = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communityRequestsControllerJoin>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communityRequestsControllerJoin>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return communityRequestsControllerJoin(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof communityRequestsControllerJoin>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const communityRequestsControllerLeave = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v1/community/requests/leave/${id}`, method: 'post' },
    options,
  );
};

export type CommunityRequestsControllerLeaveMutationResult = NonNullable<
  Awaited<ReturnType<typeof communityRequestsControllerLeave>>
>;

export type CommunityRequestsControllerLeaveMutationError = ErrorType<HttpExceptionSchema>;

export const useCommunityRequestsControllerLeave = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communityRequestsControllerLeave>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communityRequestsControllerLeave>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return communityRequestsControllerLeave(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof communityRequestsControllerLeave>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
