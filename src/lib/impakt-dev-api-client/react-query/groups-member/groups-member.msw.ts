/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getGroupsMemberControllerV1GetGroupsByUserIdMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    groupId: faker.datatype.number({ min: undefined, max: undefined }),
    userId: faker.datatype.number({ min: undefined, max: undefined }),
    joinedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    leftAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    bannedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    role: faker.helpers.arrayElement(['Creator', 'Owner', 'Admin', 'Moderator', 'Member', 'None']),
    Group: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      groupName: faker.random.word(),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        null,
      ]),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      conversationId: faker.datatype.number({ min: undefined, max: undefined }),
      currentCoverImageId: faker.datatype.number({ min: undefined, max: undefined }),
      memberCount: faker.datatype.number({ min: undefined, max: undefined }),
      calendarId: faker.datatype.number({ min: undefined, max: undefined }),
      private: faker.datatype.boolean(),
      deleted: faker.datatype.boolean(),
      CurrentCoverImage: { source: faker.random.word() },
    },
  }));

export const getGroupsMemberControllerV1AmIMemberOfGroupMock = () => faker.datatype.boolean();

export const getGroupsMemberControllerV1AmIRoleOnGroupMock = () => ({
  groupId: faker.datatype.number({ min: undefined, max: undefined }),
  userId: faker.datatype.number({ min: undefined, max: undefined }),
  joinedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  leftAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
  bannedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
  role: faker.helpers.arrayElement(['Creator', 'Owner', 'Admin', 'Moderator', 'Member', 'None']),
});

export const getGroupsMemberControllerV1JoinGroupMock = () => faker.datatype.boolean();

export const getGroupsMemberControllerV1LeaveGroupMock = () => faker.datatype.boolean();

export const getGroupsMemberMSW = () => [
  rest.get('*/api/v1/groups/member-groups/:userId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGroupsMemberControllerV1GetGroupsByUserIdMock()),
    );
  }),
  rest.get('*/api/v1/groups/ami/member/:groupId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGroupsMemberControllerV1AmIMemberOfGroupMock()),
    );
  }),
  rest.get('*/api/v1/groups/ami/role/:groupId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGroupsMemberControllerV1AmIRoleOnGroupMock()),
    );
  }),
  rest.patch('*/api/v1/groups/:groupId/join', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGroupsMemberControllerV1JoinGroupMock()),
    );
  }),
  rest.patch('*/api/v1/groups/:groupId/leave', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGroupsMemberControllerV1LeaveGroupMock()),
    );
  }),
];
