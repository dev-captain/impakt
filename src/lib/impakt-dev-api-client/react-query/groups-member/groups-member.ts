/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GetGroupMemberResWithGroupRes,
  HttpExceptionSchema,
  GetGroupMemberRes,
  GroupsMemberControllerV1AssignGroupRoleParams,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const groupsMemberControllerV1GetGroupsByUserId = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGroupMemberResWithGroupRes[]>(
    { url: `/api/v1/groups/member-groups/${userId}`, method: 'get', signal },
    options,
  );
};

export const getGroupsMemberControllerV1GetGroupsByUserIdQueryKey = (userId: number) => [
  `/api/v1/groups/member-groups/${userId}`,
];

export type GroupsMemberControllerV1GetGroupsByUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof groupsMemberControllerV1GetGroupsByUserId>>
>;
export type GroupsMemberControllerV1GetGroupsByUserIdQueryError = ErrorType<HttpExceptionSchema>;

export const useGroupsMemberControllerV1GetGroupsByUserId = <
  TData = Awaited<ReturnType<typeof groupsMemberControllerV1GetGroupsByUserId>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof groupsMemberControllerV1GetGroupsByUserId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGroupsMemberControllerV1GetGroupsByUserIdQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof groupsMemberControllerV1GetGroupsByUserId>>
  > = ({ signal }) => groupsMemberControllerV1GetGroupsByUserId(userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof groupsMemberControllerV1GetGroupsByUserId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!userId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const groupsMemberControllerV1AmIMemberOfGroup = (
  groupId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<boolean>(
    { url: `/api/v1/groups/ami/member/${groupId}`, method: 'get', signal },
    options,
  );
};

export const getGroupsMemberControllerV1AmIMemberOfGroupQueryKey = (groupId: number) => [
  `/api/v1/groups/ami/member/${groupId}`,
];

export type GroupsMemberControllerV1AmIMemberOfGroupQueryResult = NonNullable<
  Awaited<ReturnType<typeof groupsMemberControllerV1AmIMemberOfGroup>>
>;
export type GroupsMemberControllerV1AmIMemberOfGroupQueryError = ErrorType<HttpExceptionSchema>;

export const useGroupsMemberControllerV1AmIMemberOfGroup = <
  TData = Awaited<ReturnType<typeof groupsMemberControllerV1AmIMemberOfGroup>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof groupsMemberControllerV1AmIMemberOfGroup>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGroupsMemberControllerV1AmIMemberOfGroupQueryKey(groupId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof groupsMemberControllerV1AmIMemberOfGroup>>
  > = ({ signal }) => groupsMemberControllerV1AmIMemberOfGroup(groupId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof groupsMemberControllerV1AmIMemberOfGroup>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!groupId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const groupsMemberControllerV1AmIRoleOnGroup = (
  groupId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGroupMemberRes>(
    { url: `/api/v1/groups/ami/role/${groupId}`, method: 'get', signal },
    options,
  );
};

export const getGroupsMemberControllerV1AmIRoleOnGroupQueryKey = (groupId: number) => [
  `/api/v1/groups/ami/role/${groupId}`,
];

export type GroupsMemberControllerV1AmIRoleOnGroupQueryResult = NonNullable<
  Awaited<ReturnType<typeof groupsMemberControllerV1AmIRoleOnGroup>>
>;
export type GroupsMemberControllerV1AmIRoleOnGroupQueryError = ErrorType<HttpExceptionSchema>;

export const useGroupsMemberControllerV1AmIRoleOnGroup = <
  TData = Awaited<ReturnType<typeof groupsMemberControllerV1AmIRoleOnGroup>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof groupsMemberControllerV1AmIRoleOnGroup>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGroupsMemberControllerV1AmIRoleOnGroupQueryKey(groupId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof groupsMemberControllerV1AmIRoleOnGroup>>
  > = ({ signal }) => groupsMemberControllerV1AmIRoleOnGroup(groupId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof groupsMemberControllerV1AmIRoleOnGroup>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!groupId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const groupsMemberControllerV1JoinGroup = (
  groupId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<boolean>(
    { url: `/api/v1/groups/${groupId}/join`, method: 'patch' },
    options,
  );
};

export type GroupsMemberControllerV1JoinGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupsMemberControllerV1JoinGroup>>
>;

export type GroupsMemberControllerV1JoinGroupMutationError = ErrorType<HttpExceptionSchema>;

export const useGroupsMemberControllerV1JoinGroup = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupsMemberControllerV1JoinGroup>>,
    TError,
    { groupId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupsMemberControllerV1JoinGroup>>,
    { groupId: number }
  > = (props) => {
    const { groupId } = props ?? {};

    return groupsMemberControllerV1JoinGroup(groupId, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof groupsMemberControllerV1JoinGroup>>,
    TError,
    { groupId: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const groupsMemberControllerV1LeaveGroup = (
  groupId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<boolean>(
    { url: `/api/v1/groups/${groupId}/leave`, method: 'patch' },
    options,
  );
};

export type GroupsMemberControllerV1LeaveGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupsMemberControllerV1LeaveGroup>>
>;

export type GroupsMemberControllerV1LeaveGroupMutationError = ErrorType<HttpExceptionSchema>;

export const useGroupsMemberControllerV1LeaveGroup = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupsMemberControllerV1LeaveGroup>>,
    TError,
    { groupId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupsMemberControllerV1LeaveGroup>>,
    { groupId: number }
  > = (props) => {
    const { groupId } = props ?? {};

    return groupsMemberControllerV1LeaveGroup(groupId, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof groupsMemberControllerV1LeaveGroup>>,
    TError,
    { groupId: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const groupsMemberControllerV1AssignGroupRole = (
  groupId: number,
  userId: number,
  params: GroupsMemberControllerV1AssignGroupRoleParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<boolean>(
    { url: `/api/v1/groups/${groupId}/assign-role/${userId}`, method: 'patch', params },
    options,
  );
};

export type GroupsMemberControllerV1AssignGroupRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupsMemberControllerV1AssignGroupRole>>
>;

export type GroupsMemberControllerV1AssignGroupRoleMutationError = ErrorType<HttpExceptionSchema>;

export const useGroupsMemberControllerV1AssignGroupRole = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupsMemberControllerV1AssignGroupRole>>,
    TError,
    { groupId: number; userId: number; params: GroupsMemberControllerV1AssignGroupRoleParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupsMemberControllerV1AssignGroupRole>>,
    { groupId: number; userId: number; params: GroupsMemberControllerV1AssignGroupRoleParams }
  > = (props) => {
    const { groupId, userId, params } = props ?? {};

    return groupsMemberControllerV1AssignGroupRole(groupId, userId, params, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof groupsMemberControllerV1AssignGroupRole>>,
    TError,
    { groupId: number; userId: number; params: GroupsMemberControllerV1AssignGroupRoleParams },
    TContext
  >(mutationFn, mutationOptions);
};
