/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { GetChallengeLeaderboardResV1, HttpExceptionSchema } from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const challengesLeaderboardControllerV1Usersleaderboard = (
  challengeId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetChallengeLeaderboardResV1>(
    { url: `/api/v1/leaderboards/${challengeId}/users`, method: 'get', signal },
    options,
  );
};

export const getChallengesLeaderboardControllerV1UsersleaderboardQueryKey = (
  challengeId: number,
) => [`/api/v1/leaderboards/${challengeId}/users`];

export type ChallengesLeaderboardControllerV1UsersleaderboardQueryResult = NonNullable<
  Awaited<ReturnType<typeof challengesLeaderboardControllerV1Usersleaderboard>>
>;
export type ChallengesLeaderboardControllerV1UsersleaderboardQueryError =
  ErrorType<HttpExceptionSchema>;

export const useChallengesLeaderboardControllerV1Usersleaderboard = <
  TData = Awaited<ReturnType<typeof challengesLeaderboardControllerV1Usersleaderboard>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  challengeId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof challengesLeaderboardControllerV1Usersleaderboard>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getChallengesLeaderboardControllerV1UsersleaderboardQueryKey(challengeId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof challengesLeaderboardControllerV1Usersleaderboard>>
  > = ({ signal }) =>
    challengesLeaderboardControllerV1Usersleaderboard(challengeId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof challengesLeaderboardControllerV1Usersleaderboard>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!challengeId, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const challengesLeaderboardControllerV1CommunitiesLeaderboard = (
  challengeId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/v1/leaderboards/${challengeId}/communities`, method: 'get', signal },
    options,
  );
};

export const getChallengesLeaderboardControllerV1CommunitiesLeaderboardQueryKey = (
  challengeId: number,
) => [`/api/v1/leaderboards/${challengeId}/communities`];

export type ChallengesLeaderboardControllerV1CommunitiesLeaderboardQueryResult = NonNullable<
  Awaited<ReturnType<typeof challengesLeaderboardControllerV1CommunitiesLeaderboard>>
>;
export type ChallengesLeaderboardControllerV1CommunitiesLeaderboardQueryError =
  ErrorType<HttpExceptionSchema>;

export const useChallengesLeaderboardControllerV1CommunitiesLeaderboard = <
  TData = Awaited<ReturnType<typeof challengesLeaderboardControllerV1CommunitiesLeaderboard>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  challengeId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof challengesLeaderboardControllerV1CommunitiesLeaderboard>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getChallengesLeaderboardControllerV1CommunitiesLeaderboardQueryKey(challengeId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof challengesLeaderboardControllerV1CommunitiesLeaderboard>>
  > = ({ signal }) =>
    challengesLeaderboardControllerV1CommunitiesLeaderboard(challengeId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof challengesLeaderboardControllerV1CommunitiesLeaderboard>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!challengeId, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
