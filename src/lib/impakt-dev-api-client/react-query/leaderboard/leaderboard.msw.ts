/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getChallengesLeaderboardControllerV1UsersleaderboardMock = () => ({
  totalParticipants: faker.datatype.number({ min: undefined, max: undefined }),
  successParticipants: faker.datatype.number({ min: undefined, max: undefined }),
  failedParticipants: faker.datatype.number({ min: undefined, max: undefined }),
  routineType: faker.helpers.arrayElement(['HIIT', 'Blitz', 'Rhythm']),
  usersPassed: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    userCount: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    userTime: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    userScore: faker.datatype.number({ min: undefined, max: undefined }),
    username: faker.random.word(),
    communities: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      score: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
    })),
    completedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  })),
});

export const getLeaderboardMSW = () => [
  rest.get('*/api/v1/leaderboards/:challengeId/users', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getChallengesLeaderboardControllerV1UsersleaderboardMock()),
    );
  }),
  rest.get('*/api/v1/leaderboards/:challengeId/communities', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
];
