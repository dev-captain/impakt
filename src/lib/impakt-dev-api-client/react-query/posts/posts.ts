/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GetPostRes,
  HttpExceptionSchema,
  PostControllerV1GetManyParams,
  CreatePostDto,
  UpdatePostDto,
  GetCommentRes,
  CreateCommentDto,
  UpdateCommentDto,
  DeleteCommentRes,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const postControllerV1GetMany = (
  referenceType: unknown,
  referenceId: number,
  params?: PostControllerV1GetManyParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetPostRes[]>(
    { url: `/api/v1/posts/${referenceType}/${referenceId}`, method: 'get', params, signal },
    options,
  );
};

export const getPostControllerV1GetManyQueryKey = (
  referenceType: unknown,
  referenceId: number,
  params?: PostControllerV1GetManyParams,
) => [`/api/v1/posts/${referenceType}/${referenceId}`, ...(params ? [params] : [])];

export type PostControllerV1GetManyQueryResult = NonNullable<
  Awaited<ReturnType<typeof postControllerV1GetMany>>
>;
export type PostControllerV1GetManyQueryError = ErrorType<HttpExceptionSchema>;

export const usePostControllerV1GetMany = <
  TData = Awaited<ReturnType<typeof postControllerV1GetMany>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  referenceType: unknown,
  referenceId: number,
  params?: PostControllerV1GetManyParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof postControllerV1GetMany>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getPostControllerV1GetManyQueryKey(referenceType, referenceId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof postControllerV1GetMany>>> = ({
    signal,
  }) => postControllerV1GetMany(referenceType, referenceId, params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof postControllerV1GetMany>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!(referenceType && referenceId), ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const postControllerV1CreateOne = (
  referenceType: unknown,
  referenceId: number,
  createPostDto: CreatePostDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetPostRes>(
    {
      url: `/api/v1/posts/${referenceType}/${referenceId}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: createPostDto,
    },
    options,
  );
};

export type PostControllerV1CreateOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof postControllerV1CreateOne>>
>;
export type PostControllerV1CreateOneMutationBody = CreatePostDto;
export type PostControllerV1CreateOneMutationError = ErrorType<HttpExceptionSchema>;

export const usePostControllerV1CreateOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postControllerV1CreateOne>>,
    TError,
    { referenceType: unknown; referenceId: number; data: CreatePostDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postControllerV1CreateOne>>,
    { referenceType: unknown; referenceId: number; data: CreatePostDto }
  > = (props) => {
    const { referenceType, referenceId, data } = props ?? {};

    return postControllerV1CreateOne(referenceType, referenceId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof postControllerV1CreateOne>>,
    TError,
    { referenceType: unknown; referenceId: number; data: CreatePostDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const postControllerV1GetOne = (
  referenceType: unknown,
  referenceId: number,
  postId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetPostRes>(
    { url: `/api/v1/posts/${referenceType}/${referenceId}/${postId}`, method: 'get', signal },
    options,
  );
};

export const getPostControllerV1GetOneQueryKey = (
  referenceType: unknown,
  referenceId: number,
  postId: number,
) => [`/api/v1/posts/${referenceType}/${referenceId}/${postId}`];

export type PostControllerV1GetOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof postControllerV1GetOne>>
>;
export type PostControllerV1GetOneQueryError = ErrorType<HttpExceptionSchema>;

export const usePostControllerV1GetOne = <
  TData = Awaited<ReturnType<typeof postControllerV1GetOne>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  referenceType: unknown,
  referenceId: number,
  postId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof postControllerV1GetOne>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPostControllerV1GetOneQueryKey(referenceType, referenceId, postId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof postControllerV1GetOne>>> = ({ signal }) =>
    postControllerV1GetOne(referenceType, referenceId, postId, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof postControllerV1GetOne>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!(referenceType && referenceId && postId), ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const postControllerV1PatchOne = (
  referenceType: unknown,
  referenceId: number,
  postId: number,
  updatePostDto: UpdatePostDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetPostRes>(
    {
      url: `/api/v1/posts/${referenceType}/${referenceId}/${postId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: updatePostDto,
    },
    options,
  );
};

export type PostControllerV1PatchOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof postControllerV1PatchOne>>
>;
export type PostControllerV1PatchOneMutationBody = UpdatePostDto;
export type PostControllerV1PatchOneMutationError = ErrorType<HttpExceptionSchema>;

export const usePostControllerV1PatchOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postControllerV1PatchOne>>,
    TError,
    { referenceType: unknown; referenceId: number; postId: number; data: UpdatePostDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postControllerV1PatchOne>>,
    { referenceType: unknown; referenceId: number; postId: number; data: UpdatePostDto }
  > = (props) => {
    const { referenceType, referenceId, postId, data } = props ?? {};

    return postControllerV1PatchOne(referenceType, referenceId, postId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof postControllerV1PatchOne>>,
    TError,
    { referenceType: unknown; referenceId: number; postId: number; data: UpdatePostDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const postControllerV1DeleteOne = (
  referenceType: unknown,
  referenceId: number,
  postId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetPostRes>(
    { url: `/api/v1/posts/${referenceType}/${referenceId}/${postId}`, method: 'delete' },
    options,
  );
};

export type PostControllerV1DeleteOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof postControllerV1DeleteOne>>
>;

export type PostControllerV1DeleteOneMutationError = ErrorType<HttpExceptionSchema>;

export const usePostControllerV1DeleteOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postControllerV1DeleteOne>>,
    TError,
    { referenceType: unknown; referenceId: number; postId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postControllerV1DeleteOne>>,
    { referenceType: unknown; referenceId: number; postId: number }
  > = (props) => {
    const { referenceType, referenceId, postId } = props ?? {};

    return postControllerV1DeleteOne(referenceType, referenceId, postId, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof postControllerV1DeleteOne>>,
    TError,
    { referenceType: unknown; referenceId: number; postId: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const commentControllerV1GetMany = (
  postId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetCommentRes>(
    { url: `/api/v1/posts/${postId}/comments`, method: 'get', signal },
    options,
  );
};

export const getCommentControllerV1GetManyQueryKey = (postId: number) => [
  `/api/v1/posts/${postId}/comments`,
];

export type CommentControllerV1GetManyQueryResult = NonNullable<
  Awaited<ReturnType<typeof commentControllerV1GetMany>>
>;
export type CommentControllerV1GetManyQueryError = ErrorType<HttpExceptionSchema>;

export const useCommentControllerV1GetMany = <
  TData = Awaited<ReturnType<typeof commentControllerV1GetMany>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  postId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof commentControllerV1GetMany>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCommentControllerV1GetManyQueryKey(postId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof commentControllerV1GetMany>>> = ({
    signal,
  }) => commentControllerV1GetMany(postId, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof commentControllerV1GetMany>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!postId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const commentControllerV1CreateOne = (
  postId: number,
  createCommentDto: CreateCommentDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetCommentRes>(
    {
      url: `/api/v1/posts/${postId}/comments`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: createCommentDto,
    },
    options,
  );
};

export type CommentControllerV1CreateOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof commentControllerV1CreateOne>>
>;
export type CommentControllerV1CreateOneMutationBody = CreateCommentDto;
export type CommentControllerV1CreateOneMutationError = ErrorType<HttpExceptionSchema>;

export const useCommentControllerV1CreateOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof commentControllerV1CreateOne>>,
    TError,
    { postId: number; data: CreateCommentDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof commentControllerV1CreateOne>>,
    { postId: number; data: CreateCommentDto }
  > = (props) => {
    const { postId, data } = props ?? {};

    return commentControllerV1CreateOne(postId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof commentControllerV1CreateOne>>,
    TError,
    { postId: number; data: CreateCommentDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const commentControllerV1GetOne = (
  postId: number,
  commentId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetCommentRes>(
    { url: `/api/v1/posts/${postId}/comments/${commentId}`, method: 'get', signal },
    options,
  );
};

export const getCommentControllerV1GetOneQueryKey = (postId: number, commentId: number) => [
  `/api/v1/posts/${postId}/comments/${commentId}`,
];

export type CommentControllerV1GetOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof commentControllerV1GetOne>>
>;
export type CommentControllerV1GetOneQueryError = ErrorType<HttpExceptionSchema>;

export const useCommentControllerV1GetOne = <
  TData = Awaited<ReturnType<typeof commentControllerV1GetOne>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  postId: number,
  commentId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof commentControllerV1GetOne>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCommentControllerV1GetOneQueryKey(postId, commentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof commentControllerV1GetOne>>> = ({
    signal,
  }) => commentControllerV1GetOne(postId, commentId, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof commentControllerV1GetOne>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!(postId && commentId), ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const commentControllerV1PatchOne = (
  postId: number,
  commentId: number,
  updateCommentDto: UpdateCommentDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetCommentRes>(
    {
      url: `/api/v1/posts/${postId}/comments/${commentId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: updateCommentDto,
    },
    options,
  );
};

export type CommentControllerV1PatchOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof commentControllerV1PatchOne>>
>;
export type CommentControllerV1PatchOneMutationBody = UpdateCommentDto;
export type CommentControllerV1PatchOneMutationError = ErrorType<HttpExceptionSchema>;

export const useCommentControllerV1PatchOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof commentControllerV1PatchOne>>,
    TError,
    { postId: number; commentId: number; data: UpdateCommentDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof commentControllerV1PatchOne>>,
    { postId: number; commentId: number; data: UpdateCommentDto }
  > = (props) => {
    const { postId, commentId, data } = props ?? {};

    return commentControllerV1PatchOne(postId, commentId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof commentControllerV1PatchOne>>,
    TError,
    { postId: number; commentId: number; data: UpdateCommentDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const commentControllerV1DeleteOne = (
  postId: number,
  commentId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<DeleteCommentRes>(
    { url: `/api/v1/posts/${postId}/comments/${commentId}`, method: 'delete' },
    options,
  );
};

export type CommentControllerV1DeleteOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof commentControllerV1DeleteOne>>
>;

export type CommentControllerV1DeleteOneMutationError = ErrorType<HttpExceptionSchema>;

export const useCommentControllerV1DeleteOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof commentControllerV1DeleteOne>>,
    TError,
    { postId: number; commentId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof commentControllerV1DeleteOne>>,
    { postId: number; commentId: number }
  > = (props) => {
    const { postId, commentId } = props ?? {};

    return commentControllerV1DeleteOne(postId, commentId, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof commentControllerV1DeleteOne>>,
    TError,
    { postId: number; commentId: number },
    TContext
  >(mutationFn, mutationOptions);
};
