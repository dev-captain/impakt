/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getPostControllerV1GetManyMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    creatorId: faker.datatype.number({ min: undefined, max: undefined }),
    postCollectionId: faker.datatype.number({ min: undefined, max: undefined }),
    content: faker.random.word(),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Creator: faker.helpers.arrayElement([
      {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        Roles: faker.helpers.arrayElement([
          'SuperAdmin',
          'Admin',
          'Creator',
          'Tester',
          'Ambassador',
          'Whitelist',
          'Partner',
        ]),
        email: faker.helpers.arrayElement([faker.random.word(), null]),
        username: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
        cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        primaryCommunityId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        Communities: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          description: faker.helpers.arrayElement([faker.random.word(), null]),
          ownerId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          memberCount: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
        emailVerified: faker.datatype.boolean(),
      },
      undefined,
    ]),
    Comment: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      creatorId: faker.datatype.number({ min: undefined, max: undefined }),
      content: faker.random.word(),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      Creator: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        Roles: faker.helpers.arrayElement([
          'SuperAdmin',
          'Admin',
          'Creator',
          'Tester',
          'Ambassador',
          'Whitelist',
          'Partner',
        ]),
        email: faker.helpers.arrayElement([faker.random.word(), null]),
        username: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
        cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        primaryCommunityId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        Communities: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          description: faker.helpers.arrayElement([faker.random.word(), null]),
          ownerId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          memberCount: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
        emailVerified: faker.datatype.boolean(),
      },
      Post: {},
      ChildComments: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        creatorId: faker.datatype.number({ min: undefined, max: undefined }),
        content: faker.random.word(),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Creator: {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          Roles: faker.helpers.arrayElement([
            'SuperAdmin',
            'Admin',
            'Creator',
            'Tester',
            'Ambassador',
            'Whitelist',
            'Partner',
          ]),
          email: faker.helpers.arrayElement([faker.random.word(), null]),
          username: faker.random.word(),
          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
          discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
          cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          primaryCommunityId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          Communities: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            name: faker.random.word(),
            description: faker.helpers.arrayElement([faker.random.word(), null]),
            ownerId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            createdAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            updatedAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            memberCount: faker.datatype.number({ min: undefined, max: undefined }),
          })),
          DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
          emailVerified: faker.datatype.boolean(),
        },
        Post: {},
        ChildComments: {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          creatorId: faker.datatype.number({ min: undefined, max: undefined }),
          content: faker.random.word(),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          Creator: {
            id: faker.datatype.number({ min: undefined, max: undefined }),
            Roles: faker.helpers.arrayElement([
              'SuperAdmin',
              'Admin',
              'Creator',
              'Tester',
              'Ambassador',
              'Whitelist',
              'Partner',
            ]),
            email: faker.helpers.arrayElement([faker.random.word(), null]),
            username: faker.random.word(),
            firstName: faker.helpers.arrayElement([faker.random.word(), null]),
            lastName: faker.helpers.arrayElement([faker.random.word(), null]),
            discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
            cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
            createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            primaryCommunityId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            Communities: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.datatype.number({ min: undefined, max: undefined }),
              name: faker.random.word(),
              description: faker.helpers.arrayElement([faker.random.word(), null]),
              ownerId: faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              createdAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
              ]),
              updatedAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
              ]),
              memberCount: faker.datatype.number({ min: undefined, max: undefined }),
            })),
            DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
            emailVerified: faker.datatype.boolean(),
          },
          Post: {},
        },
      },
    })),
  }));

export const getPostControllerV1CreateOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  creatorId: faker.datatype.number({ min: undefined, max: undefined }),
  postCollectionId: faker.datatype.number({ min: undefined, max: undefined }),
  content: faker.random.word(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  Creator: faker.helpers.arrayElement([
    {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      Roles: faker.helpers.arrayElement([
        'SuperAdmin',
        'Admin',
        'Creator',
        'Tester',
        'Ambassador',
        'Whitelist',
        'Partner',
      ]),
      email: faker.helpers.arrayElement([faker.random.word(), null]),
      username: faker.random.word(),
      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
      discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
      cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      primaryCommunityId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      Communities: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        description: faker.helpers.arrayElement([faker.random.word(), null]),
        ownerId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        createdAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        updatedAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        memberCount: faker.datatype.number({ min: undefined, max: undefined }),
      })),
      DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
      emailVerified: faker.datatype.boolean(),
    },
    undefined,
  ]),
  Comment: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      creatorId: faker.datatype.number({ min: undefined, max: undefined }),
      content: faker.random.word(),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      Creator: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        Roles: faker.helpers.arrayElement([
          'SuperAdmin',
          'Admin',
          'Creator',
          'Tester',
          'Ambassador',
          'Whitelist',
          'Partner',
        ]),
        email: faker.helpers.arrayElement([faker.random.word(), null]),
        username: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
        cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        primaryCommunityId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        Communities: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          description: faker.helpers.arrayElement([faker.random.word(), null]),
          ownerId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          memberCount: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
        emailVerified: faker.datatype.boolean(),
      },
      Post: {},
      ChildComments: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        creatorId: faker.datatype.number({ min: undefined, max: undefined }),
        content: faker.random.word(),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Creator: {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          Roles: faker.helpers.arrayElement([
            'SuperAdmin',
            'Admin',
            'Creator',
            'Tester',
            'Ambassador',
            'Whitelist',
            'Partner',
          ]),
          email: faker.helpers.arrayElement([faker.random.word(), null]),
          username: faker.random.word(),
          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
          discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
          cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          primaryCommunityId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          Communities: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            name: faker.random.word(),
            description: faker.helpers.arrayElement([faker.random.word(), null]),
            ownerId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            createdAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            updatedAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            memberCount: faker.datatype.number({ min: undefined, max: undefined }),
          })),
          DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
          emailVerified: faker.datatype.boolean(),
        },
        Post: {},
        ChildComments: {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          creatorId: faker.datatype.number({ min: undefined, max: undefined }),
          content: faker.random.word(),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          Creator: {
            id: faker.datatype.number({ min: undefined, max: undefined }),
            Roles: faker.helpers.arrayElement([
              'SuperAdmin',
              'Admin',
              'Creator',
              'Tester',
              'Ambassador',
              'Whitelist',
              'Partner',
            ]),
            email: faker.helpers.arrayElement([faker.random.word(), null]),
            username: faker.random.word(),
            firstName: faker.helpers.arrayElement([faker.random.word(), null]),
            lastName: faker.helpers.arrayElement([faker.random.word(), null]),
            discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
            cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
            createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            primaryCommunityId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            Communities: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.datatype.number({ min: undefined, max: undefined }),
              name: faker.random.word(),
              description: faker.helpers.arrayElement([faker.random.word(), null]),
              ownerId: faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              createdAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
              ]),
              updatedAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
              ]),
              memberCount: faker.datatype.number({ min: undefined, max: undefined }),
            })),
            DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
            emailVerified: faker.datatype.boolean(),
          },
          Post: {},
        },
      },
    }),
  ),
});

export const getPostControllerV1GetOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  creatorId: faker.datatype.number({ min: undefined, max: undefined }),
  postCollectionId: faker.datatype.number({ min: undefined, max: undefined }),
  content: faker.random.word(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  Creator: faker.helpers.arrayElement([
    {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      Roles: faker.helpers.arrayElement([
        'SuperAdmin',
        'Admin',
        'Creator',
        'Tester',
        'Ambassador',
        'Whitelist',
        'Partner',
      ]),
      email: faker.helpers.arrayElement([faker.random.word(), null]),
      username: faker.random.word(),
      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
      discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
      cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      primaryCommunityId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      Communities: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        description: faker.helpers.arrayElement([faker.random.word(), null]),
        ownerId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        createdAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        updatedAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        memberCount: faker.datatype.number({ min: undefined, max: undefined }),
      })),
      DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
      emailVerified: faker.datatype.boolean(),
    },
    undefined,
  ]),
  Comment: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      creatorId: faker.datatype.number({ min: undefined, max: undefined }),
      content: faker.random.word(),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      Creator: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        Roles: faker.helpers.arrayElement([
          'SuperAdmin',
          'Admin',
          'Creator',
          'Tester',
          'Ambassador',
          'Whitelist',
          'Partner',
        ]),
        email: faker.helpers.arrayElement([faker.random.word(), null]),
        username: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
        cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        primaryCommunityId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        Communities: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          description: faker.helpers.arrayElement([faker.random.word(), null]),
          ownerId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          memberCount: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
        emailVerified: faker.datatype.boolean(),
      },
      Post: {},
      ChildComments: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        creatorId: faker.datatype.number({ min: undefined, max: undefined }),
        content: faker.random.word(),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Creator: {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          Roles: faker.helpers.arrayElement([
            'SuperAdmin',
            'Admin',
            'Creator',
            'Tester',
            'Ambassador',
            'Whitelist',
            'Partner',
          ]),
          email: faker.helpers.arrayElement([faker.random.word(), null]),
          username: faker.random.word(),
          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
          discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
          cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          primaryCommunityId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          Communities: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            name: faker.random.word(),
            description: faker.helpers.arrayElement([faker.random.word(), null]),
            ownerId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            createdAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            updatedAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            memberCount: faker.datatype.number({ min: undefined, max: undefined }),
          })),
          DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
          emailVerified: faker.datatype.boolean(),
        },
        Post: {},
        ChildComments: {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          creatorId: faker.datatype.number({ min: undefined, max: undefined }),
          content: faker.random.word(),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          Creator: {
            id: faker.datatype.number({ min: undefined, max: undefined }),
            Roles: faker.helpers.arrayElement([
              'SuperAdmin',
              'Admin',
              'Creator',
              'Tester',
              'Ambassador',
              'Whitelist',
              'Partner',
            ]),
            email: faker.helpers.arrayElement([faker.random.word(), null]),
            username: faker.random.word(),
            firstName: faker.helpers.arrayElement([faker.random.word(), null]),
            lastName: faker.helpers.arrayElement([faker.random.word(), null]),
            discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
            cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
            createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            primaryCommunityId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            Communities: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.datatype.number({ min: undefined, max: undefined }),
              name: faker.random.word(),
              description: faker.helpers.arrayElement([faker.random.word(), null]),
              ownerId: faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              createdAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
              ]),
              updatedAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
              ]),
              memberCount: faker.datatype.number({ min: undefined, max: undefined }),
            })),
            DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
            emailVerified: faker.datatype.boolean(),
          },
          Post: {},
        },
      },
    }),
  ),
});

export const getPostControllerV1PatchOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  creatorId: faker.datatype.number({ min: undefined, max: undefined }),
  postCollectionId: faker.datatype.number({ min: undefined, max: undefined }),
  content: faker.random.word(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  Creator: faker.helpers.arrayElement([
    {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      Roles: faker.helpers.arrayElement([
        'SuperAdmin',
        'Admin',
        'Creator',
        'Tester',
        'Ambassador',
        'Whitelist',
        'Partner',
      ]),
      email: faker.helpers.arrayElement([faker.random.word(), null]),
      username: faker.random.word(),
      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
      discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
      cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      primaryCommunityId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      Communities: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        description: faker.helpers.arrayElement([faker.random.word(), null]),
        ownerId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        createdAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        updatedAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        memberCount: faker.datatype.number({ min: undefined, max: undefined }),
      })),
      DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
      emailVerified: faker.datatype.boolean(),
    },
    undefined,
  ]),
  Comment: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      creatorId: faker.datatype.number({ min: undefined, max: undefined }),
      content: faker.random.word(),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      Creator: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        Roles: faker.helpers.arrayElement([
          'SuperAdmin',
          'Admin',
          'Creator',
          'Tester',
          'Ambassador',
          'Whitelist',
          'Partner',
        ]),
        email: faker.helpers.arrayElement([faker.random.word(), null]),
        username: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
        cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        primaryCommunityId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        Communities: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          description: faker.helpers.arrayElement([faker.random.word(), null]),
          ownerId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          memberCount: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
        emailVerified: faker.datatype.boolean(),
      },
      Post: {},
      ChildComments: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        creatorId: faker.datatype.number({ min: undefined, max: undefined }),
        content: faker.random.word(),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Creator: {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          Roles: faker.helpers.arrayElement([
            'SuperAdmin',
            'Admin',
            'Creator',
            'Tester',
            'Ambassador',
            'Whitelist',
            'Partner',
          ]),
          email: faker.helpers.arrayElement([faker.random.word(), null]),
          username: faker.random.word(),
          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
          discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
          cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          primaryCommunityId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          Communities: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            name: faker.random.word(),
            description: faker.helpers.arrayElement([faker.random.word(), null]),
            ownerId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            createdAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            updatedAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            memberCount: faker.datatype.number({ min: undefined, max: undefined }),
          })),
          DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
          emailVerified: faker.datatype.boolean(),
        },
        Post: {},
        ChildComments: {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          creatorId: faker.datatype.number({ min: undefined, max: undefined }),
          content: faker.random.word(),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          Creator: {
            id: faker.datatype.number({ min: undefined, max: undefined }),
            Roles: faker.helpers.arrayElement([
              'SuperAdmin',
              'Admin',
              'Creator',
              'Tester',
              'Ambassador',
              'Whitelist',
              'Partner',
            ]),
            email: faker.helpers.arrayElement([faker.random.word(), null]),
            username: faker.random.word(),
            firstName: faker.helpers.arrayElement([faker.random.word(), null]),
            lastName: faker.helpers.arrayElement([faker.random.word(), null]),
            discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
            cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
            createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            primaryCommunityId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            Communities: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.datatype.number({ min: undefined, max: undefined }),
              name: faker.random.word(),
              description: faker.helpers.arrayElement([faker.random.word(), null]),
              ownerId: faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              createdAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
              ]),
              updatedAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
              ]),
              memberCount: faker.datatype.number({ min: undefined, max: undefined }),
            })),
            DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
            emailVerified: faker.datatype.boolean(),
          },
          Post: {},
        },
      },
    }),
  ),
});

export const getPostControllerV1DeleteOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  creatorId: faker.datatype.number({ min: undefined, max: undefined }),
  postCollectionId: faker.datatype.number({ min: undefined, max: undefined }),
  content: faker.random.word(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  Creator: faker.helpers.arrayElement([
    {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      Roles: faker.helpers.arrayElement([
        'SuperAdmin',
        'Admin',
        'Creator',
        'Tester',
        'Ambassador',
        'Whitelist',
        'Partner',
      ]),
      email: faker.helpers.arrayElement([faker.random.word(), null]),
      username: faker.random.word(),
      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
      discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
      cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      primaryCommunityId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      Communities: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        description: faker.helpers.arrayElement([faker.random.word(), null]),
        ownerId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        createdAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        updatedAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        memberCount: faker.datatype.number({ min: undefined, max: undefined }),
      })),
      DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
      emailVerified: faker.datatype.boolean(),
    },
    undefined,
  ]),
  Comment: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      creatorId: faker.datatype.number({ min: undefined, max: undefined }),
      content: faker.random.word(),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      Creator: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        Roles: faker.helpers.arrayElement([
          'SuperAdmin',
          'Admin',
          'Creator',
          'Tester',
          'Ambassador',
          'Whitelist',
          'Partner',
        ]),
        email: faker.helpers.arrayElement([faker.random.word(), null]),
        username: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
        cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        primaryCommunityId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        Communities: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          description: faker.helpers.arrayElement([faker.random.word(), null]),
          ownerId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          memberCount: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
        emailVerified: faker.datatype.boolean(),
      },
      Post: {},
      ChildComments: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        creatorId: faker.datatype.number({ min: undefined, max: undefined }),
        content: faker.random.word(),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Creator: {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          Roles: faker.helpers.arrayElement([
            'SuperAdmin',
            'Admin',
            'Creator',
            'Tester',
            'Ambassador',
            'Whitelist',
            'Partner',
          ]),
          email: faker.helpers.arrayElement([faker.random.word(), null]),
          username: faker.random.word(),
          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
          discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
          cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          primaryCommunityId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          Communities: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.datatype.number({ min: undefined, max: undefined }),
            name: faker.random.word(),
            description: faker.helpers.arrayElement([faker.random.word(), null]),
            ownerId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            createdAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            updatedAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split('.')[0]}Z`,
              null,
            ]),
            memberCount: faker.datatype.number({ min: undefined, max: undefined }),
          })),
          DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
          emailVerified: faker.datatype.boolean(),
        },
        Post: {},
        ChildComments: {
          id: faker.datatype.number({ min: undefined, max: undefined }),
          creatorId: faker.datatype.number({ min: undefined, max: undefined }),
          content: faker.random.word(),
          createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
          Creator: {
            id: faker.datatype.number({ min: undefined, max: undefined }),
            Roles: faker.helpers.arrayElement([
              'SuperAdmin',
              'Admin',
              'Creator',
              'Tester',
              'Ambassador',
              'Whitelist',
              'Partner',
            ]),
            email: faker.helpers.arrayElement([faker.random.word(), null]),
            username: faker.random.word(),
            firstName: faker.helpers.arrayElement([faker.random.word(), null]),
            lastName: faker.helpers.arrayElement([faker.random.word(), null]),
            discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
            cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
            createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
            primaryCommunityId: faker.helpers.arrayElement([
              faker.datatype.number({ min: undefined, max: undefined }),
              null,
            ]),
            Communities: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.datatype.number({ min: undefined, max: undefined }),
              name: faker.random.word(),
              description: faker.helpers.arrayElement([faker.random.word(), null]),
              ownerId: faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              createdAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
              ]),
              updatedAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
              ]),
              memberCount: faker.datatype.number({ min: undefined, max: undefined }),
            })),
            DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
            emailVerified: faker.datatype.boolean(),
          },
          Post: {},
        },
      },
    }),
  ),
});

export const getCommentControllerV1GetManyMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  creatorId: faker.datatype.number({ min: undefined, max: undefined }),
  content: faker.random.word(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  Creator: {
    id: faker.datatype.number({ min: undefined, max: undefined }),
    Roles: faker.helpers.arrayElement([
      'SuperAdmin',
      'Admin',
      'Creator',
      'Tester',
      'Ambassador',
      'Whitelist',
      'Partner',
    ]),
    email: faker.helpers.arrayElement([faker.random.word(), null]),
    username: faker.random.word(),
    firstName: faker.helpers.arrayElement([faker.random.word(), null]),
    lastName: faker.helpers.arrayElement([faker.random.word(), null]),
    discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
    cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    primaryCommunityId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    Communities: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      description: faker.helpers.arrayElement([faker.random.word(), null]),
      ownerId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        null,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        null,
      ]),
      memberCount: faker.datatype.number({ min: undefined, max: undefined }),
    })),
    DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
    emailVerified: faker.datatype.boolean(),
  },
  Post: {},
  ChildComments: {
    id: faker.datatype.number({ min: undefined, max: undefined }),
    creatorId: faker.datatype.number({ min: undefined, max: undefined }),
    content: faker.random.word(),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Creator: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      Roles: faker.helpers.arrayElement([
        'SuperAdmin',
        'Admin',
        'Creator',
        'Tester',
        'Ambassador',
        'Whitelist',
        'Partner',
      ]),
      email: faker.helpers.arrayElement([faker.random.word(), null]),
      username: faker.random.word(),
      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
      discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
      cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      primaryCommunityId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      Communities: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        description: faker.helpers.arrayElement([faker.random.word(), null]),
        ownerId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        createdAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        updatedAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        memberCount: faker.datatype.number({ min: undefined, max: undefined }),
      })),
      DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
      emailVerified: faker.datatype.boolean(),
    },
    Post: {},
    ChildComments: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      creatorId: faker.datatype.number({ min: undefined, max: undefined }),
      content: faker.random.word(),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      Creator: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        Roles: faker.helpers.arrayElement([
          'SuperAdmin',
          'Admin',
          'Creator',
          'Tester',
          'Ambassador',
          'Whitelist',
          'Partner',
        ]),
        email: faker.helpers.arrayElement([faker.random.word(), null]),
        username: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
        cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        primaryCommunityId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        Communities: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          description: faker.helpers.arrayElement([faker.random.word(), null]),
          ownerId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          memberCount: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
        emailVerified: faker.datatype.boolean(),
      },
      Post: {},
    },
  },
});

export const getCommentControllerV1CreateOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  creatorId: faker.datatype.number({ min: undefined, max: undefined }),
  content: faker.random.word(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  Creator: {
    id: faker.datatype.number({ min: undefined, max: undefined }),
    Roles: faker.helpers.arrayElement([
      'SuperAdmin',
      'Admin',
      'Creator',
      'Tester',
      'Ambassador',
      'Whitelist',
      'Partner',
    ]),
    email: faker.helpers.arrayElement([faker.random.word(), null]),
    username: faker.random.word(),
    firstName: faker.helpers.arrayElement([faker.random.word(), null]),
    lastName: faker.helpers.arrayElement([faker.random.word(), null]),
    discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
    cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    primaryCommunityId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    Communities: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      description: faker.helpers.arrayElement([faker.random.word(), null]),
      ownerId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        null,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        null,
      ]),
      memberCount: faker.datatype.number({ min: undefined, max: undefined }),
    })),
    DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
    emailVerified: faker.datatype.boolean(),
  },
  Post: {},
  ChildComments: {
    id: faker.datatype.number({ min: undefined, max: undefined }),
    creatorId: faker.datatype.number({ min: undefined, max: undefined }),
    content: faker.random.word(),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Creator: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      Roles: faker.helpers.arrayElement([
        'SuperAdmin',
        'Admin',
        'Creator',
        'Tester',
        'Ambassador',
        'Whitelist',
        'Partner',
      ]),
      email: faker.helpers.arrayElement([faker.random.word(), null]),
      username: faker.random.word(),
      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
      discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
      cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      primaryCommunityId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      Communities: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        description: faker.helpers.arrayElement([faker.random.word(), null]),
        ownerId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        createdAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        updatedAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        memberCount: faker.datatype.number({ min: undefined, max: undefined }),
      })),
      DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
      emailVerified: faker.datatype.boolean(),
    },
    Post: {},
    ChildComments: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      creatorId: faker.datatype.number({ min: undefined, max: undefined }),
      content: faker.random.word(),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      Creator: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        Roles: faker.helpers.arrayElement([
          'SuperAdmin',
          'Admin',
          'Creator',
          'Tester',
          'Ambassador',
          'Whitelist',
          'Partner',
        ]),
        email: faker.helpers.arrayElement([faker.random.word(), null]),
        username: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
        cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        primaryCommunityId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        Communities: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          description: faker.helpers.arrayElement([faker.random.word(), null]),
          ownerId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          memberCount: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
        emailVerified: faker.datatype.boolean(),
      },
      Post: {},
    },
  },
});

export const getCommentControllerV1GetOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  creatorId: faker.datatype.number({ min: undefined, max: undefined }),
  content: faker.random.word(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  Creator: {
    id: faker.datatype.number({ min: undefined, max: undefined }),
    Roles: faker.helpers.arrayElement([
      'SuperAdmin',
      'Admin',
      'Creator',
      'Tester',
      'Ambassador',
      'Whitelist',
      'Partner',
    ]),
    email: faker.helpers.arrayElement([faker.random.word(), null]),
    username: faker.random.word(),
    firstName: faker.helpers.arrayElement([faker.random.word(), null]),
    lastName: faker.helpers.arrayElement([faker.random.word(), null]),
    discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
    cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    primaryCommunityId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    Communities: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      description: faker.helpers.arrayElement([faker.random.word(), null]),
      ownerId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        null,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        null,
      ]),
      memberCount: faker.datatype.number({ min: undefined, max: undefined }),
    })),
    DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
    emailVerified: faker.datatype.boolean(),
  },
  Post: {},
  ChildComments: {
    id: faker.datatype.number({ min: undefined, max: undefined }),
    creatorId: faker.datatype.number({ min: undefined, max: undefined }),
    content: faker.random.word(),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Creator: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      Roles: faker.helpers.arrayElement([
        'SuperAdmin',
        'Admin',
        'Creator',
        'Tester',
        'Ambassador',
        'Whitelist',
        'Partner',
      ]),
      email: faker.helpers.arrayElement([faker.random.word(), null]),
      username: faker.random.word(),
      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
      discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
      cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      primaryCommunityId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      Communities: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        description: faker.helpers.arrayElement([faker.random.word(), null]),
        ownerId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        createdAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        updatedAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        memberCount: faker.datatype.number({ min: undefined, max: undefined }),
      })),
      DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
      emailVerified: faker.datatype.boolean(),
    },
    Post: {},
    ChildComments: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      creatorId: faker.datatype.number({ min: undefined, max: undefined }),
      content: faker.random.word(),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      Creator: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        Roles: faker.helpers.arrayElement([
          'SuperAdmin',
          'Admin',
          'Creator',
          'Tester',
          'Ambassador',
          'Whitelist',
          'Partner',
        ]),
        email: faker.helpers.arrayElement([faker.random.word(), null]),
        username: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
        cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        primaryCommunityId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        Communities: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          description: faker.helpers.arrayElement([faker.random.word(), null]),
          ownerId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          memberCount: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
        emailVerified: faker.datatype.boolean(),
      },
      Post: {},
    },
  },
});

export const getCommentControllerV1PatchOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  creatorId: faker.datatype.number({ min: undefined, max: undefined }),
  content: faker.random.word(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  Creator: {
    id: faker.datatype.number({ min: undefined, max: undefined }),
    Roles: faker.helpers.arrayElement([
      'SuperAdmin',
      'Admin',
      'Creator',
      'Tester',
      'Ambassador',
      'Whitelist',
      'Partner',
    ]),
    email: faker.helpers.arrayElement([faker.random.word(), null]),
    username: faker.random.word(),
    firstName: faker.helpers.arrayElement([faker.random.word(), null]),
    lastName: faker.helpers.arrayElement([faker.random.word(), null]),
    discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
    cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    primaryCommunityId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    Communities: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      description: faker.helpers.arrayElement([faker.random.word(), null]),
      ownerId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        null,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        null,
      ]),
      memberCount: faker.datatype.number({ min: undefined, max: undefined }),
    })),
    DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
    emailVerified: faker.datatype.boolean(),
  },
  Post: {},
  ChildComments: {
    id: faker.datatype.number({ min: undefined, max: undefined }),
    creatorId: faker.datatype.number({ min: undefined, max: undefined }),
    content: faker.random.word(),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Creator: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      Roles: faker.helpers.arrayElement([
        'SuperAdmin',
        'Admin',
        'Creator',
        'Tester',
        'Ambassador',
        'Whitelist',
        'Partner',
      ]),
      email: faker.helpers.arrayElement([faker.random.word(), null]),
      username: faker.random.word(),
      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
      discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
      cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      primaryCommunityId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      Communities: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        description: faker.helpers.arrayElement([faker.random.word(), null]),
        ownerId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        createdAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        updatedAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        memberCount: faker.datatype.number({ min: undefined, max: undefined }),
      })),
      DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
      emailVerified: faker.datatype.boolean(),
    },
    Post: {},
    ChildComments: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      creatorId: faker.datatype.number({ min: undefined, max: undefined }),
      content: faker.random.word(),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      Creator: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        Roles: faker.helpers.arrayElement([
          'SuperAdmin',
          'Admin',
          'Creator',
          'Tester',
          'Ambassador',
          'Whitelist',
          'Partner',
        ]),
        email: faker.helpers.arrayElement([faker.random.word(), null]),
        username: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
        cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        primaryCommunityId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        Communities: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          description: faker.helpers.arrayElement([faker.random.word(), null]),
          ownerId: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          createdAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          updatedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
          ]),
          memberCount: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
        emailVerified: faker.datatype.boolean(),
      },
      Post: {},
    },
  },
});

export const getCommentControllerV1DeleteOneMock = () => ({ success: faker.datatype.boolean() });

export const getPostsMSW = () => [
  rest.get('*/api/v1/posts/:referenceType/:referenceId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getPostControllerV1GetManyMock()),
    );
  }),
  rest.post('*/api/v1/posts/:referenceType/:referenceId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getPostControllerV1CreateOneMock()),
    );
  }),
  rest.get('*/api/v1/posts/:referenceType/:referenceId/:postId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getPostControllerV1GetOneMock()),
    );
  }),
  rest.patch('*/api/v1/posts/:referenceType/:referenceId/:postId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getPostControllerV1PatchOneMock()),
    );
  }),
  rest.delete('*/api/v1/posts/:referenceType/:referenceId/:postId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getPostControllerV1DeleteOneMock()),
    );
  }),
  rest.get('*/api/v1/posts/:postId/comments', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCommentControllerV1GetManyMock()),
    );
  }),
  rest.post('*/api/v1/posts/:postId/comments', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCommentControllerV1CreateOneMock()),
    );
  }),
  rest.get('*/api/v1/posts/:postId/comments/:commentId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCommentControllerV1GetOneMock()),
    );
  }),
  rest.patch('*/api/v1/posts/:postId/comments/:commentId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCommentControllerV1PatchOneMock()),
    );
  }),
  rest.delete('*/api/v1/posts/:postId/comments/:commentId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCommentControllerV1DeleteOneMock()),
    );
  }),
];
