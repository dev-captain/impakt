/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type { UseMutationOptions, MutationFunction } from '@tanstack/react-query';
import type { CreateTeamRewardDTO } from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const rewardTeamV1ControllerCreateTeamReward = (
  createTeamRewardDTO: CreateTeamRewardDTO,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/vv1/reward-team`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: createTeamRewardDTO,
    },
    options,
  );
};

export type RewardTeamV1ControllerCreateTeamRewardMutationResult = NonNullable<
  Awaited<ReturnType<typeof rewardTeamV1ControllerCreateTeamReward>>
>;
export type RewardTeamV1ControllerCreateTeamRewardMutationBody = CreateTeamRewardDTO;
export type RewardTeamV1ControllerCreateTeamRewardMutationError = ErrorType<unknown>;

export const useRewardTeamV1ControllerCreateTeamReward = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rewardTeamV1ControllerCreateTeamReward>>,
    TError,
    { data: CreateTeamRewardDTO },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rewardTeamV1ControllerCreateTeamReward>>,
    { data: CreateTeamRewardDTO }
  > = (props) => {
    const { data } = props ?? {};

    return rewardTeamV1ControllerCreateTeamReward(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof rewardTeamV1ControllerCreateTeamReward>>,
    TError,
    { data: CreateTeamRewardDTO },
    TContext
  >(mutationFn, mutationOptions);
};
