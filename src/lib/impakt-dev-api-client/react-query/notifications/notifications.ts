/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type { UseMutationOptions, MutationFunction } from '@tanstack/react-query';
import type {
  GetDeviceNotificationTokenRes,
  HttpExceptionSchema,
  RegisterdeviceTokenDto,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const notifcationControllerV1RegisterDeviceToken = (
  registerdeviceTokenDto: RegisterdeviceTokenDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetDeviceNotificationTokenRes>(
    {
      url: `/api/v1/notifications/register-device-token`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: registerdeviceTokenDto,
    },
    options,
  );
};

export type NotifcationControllerV1RegisterDeviceTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof notifcationControllerV1RegisterDeviceToken>>
>;
export type NotifcationControllerV1RegisterDeviceTokenMutationBody = RegisterdeviceTokenDto;
export type NotifcationControllerV1RegisterDeviceTokenMutationError =
  ErrorType<HttpExceptionSchema>;

export const useNotifcationControllerV1RegisterDeviceToken = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notifcationControllerV1RegisterDeviceToken>>,
    TError,
    { data: RegisterdeviceTokenDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof notifcationControllerV1RegisterDeviceToken>>,
    { data: RegisterdeviceTokenDto }
  > = (props) => {
    const { data } = props ?? {};

    return notifcationControllerV1RegisterDeviceToken(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof notifcationControllerV1RegisterDeviceToken>>,
    TError,
    { data: RegisterdeviceTokenDto },
    TContext
  >(mutationFn, mutationOptions);
};
