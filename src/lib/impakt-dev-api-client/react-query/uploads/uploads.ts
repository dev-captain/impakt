/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  HttpExceptionSchema,
  UploadControllerUploadFileBody,
  UploadControllerUploadFileParams,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const uploadControllerGetFilePublicUrl = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/v1/uploads/uploads/${id}`, method: 'get', signal },
    options,
  );
};

export const getUploadControllerGetFilePublicUrlQueryKey = (id: number) => [
  `/api/v1/uploads/uploads/${id}`,
];

export type UploadControllerGetFilePublicUrlQueryResult = NonNullable<
  Awaited<ReturnType<typeof uploadControllerGetFilePublicUrl>>
>;
export type UploadControllerGetFilePublicUrlQueryError = ErrorType<HttpExceptionSchema>;

export const useUploadControllerGetFilePublicUrl = <
  TData = Awaited<ReturnType<typeof uploadControllerGetFilePublicUrl>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof uploadControllerGetFilePublicUrl>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUploadControllerGetFilePublicUrlQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof uploadControllerGetFilePublicUrl>>> = ({
    signal,
  }) => uploadControllerGetFilePublicUrl(id, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof uploadControllerGetFilePublicUrl>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const uploadControllerUploadFile = (
  uploadControllerUploadFileBody: UploadControllerUploadFileBody,
  params: UploadControllerUploadFileParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  const formData = new FormData();
  formData.append('file', uploadControllerUploadFileBody.file);

  return customInstance<boolean>(
    {
      url: `/api/v1/uploads/uploads`,
      method: 'post',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      params,
    },
    options,
  );
};

export type UploadControllerUploadFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadControllerUploadFile>>
>;
export type UploadControllerUploadFileMutationBody = UploadControllerUploadFileBody;
export type UploadControllerUploadFileMutationError = ErrorType<HttpExceptionSchema>;

export const useUploadControllerUploadFile = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadControllerUploadFile>>,
    TError,
    { data: UploadControllerUploadFileBody; params: UploadControllerUploadFileParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadControllerUploadFile>>,
    { data: UploadControllerUploadFileBody; params: UploadControllerUploadFileParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return uploadControllerUploadFile(data, params, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof uploadControllerUploadFile>>,
    TError,
    { data: UploadControllerUploadFileBody; params: UploadControllerUploadFileParams },
    TContext
  >(mutationFn, mutationOptions);
};
