/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  CoinAccountRes,
  HttpExceptionSchema,
  GetRewardRes,
  PostUserRewardReq,
  GetCoinLoginRewardValuesRes,
  PostCoinDailyLoginRewardRes,
  GetCoinDailyLoginRewardHistoryRes,
  CoinBaseRewardRes,
  CoinChallengeControllerGetChallengesBaseRewardParams,
  CoinHistoryByUserIdV1Res,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const coinAccountControllerV1GetAccount = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CoinAccountRes>(
    { url: `/api/v1/coin/account`, method: 'get', signal },
    options,
  );
};

export const getCoinAccountControllerV1GetAccountQueryKey = () => [`/api/v1/coin/account`];

export type CoinAccountControllerV1GetAccountQueryResult = NonNullable<
  Awaited<ReturnType<typeof coinAccountControllerV1GetAccount>>
>;
export type CoinAccountControllerV1GetAccountQueryError = ErrorType<HttpExceptionSchema>;

export const useCoinAccountControllerV1GetAccount = <
  TData = Awaited<ReturnType<typeof coinAccountControllerV1GetAccount>>,
  TError = ErrorType<HttpExceptionSchema>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof coinAccountControllerV1GetAccount>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCoinAccountControllerV1GetAccountQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof coinAccountControllerV1GetAccount>>> = ({
    signal,
  }) => coinAccountControllerV1GetAccount(requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof coinAccountControllerV1GetAccount>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const coinRewardControllerV1RewardCoin = (
  postUserRewardReq: PostUserRewardReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetRewardRes>(
    {
      url: `/api/v1/coin/reward-user`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: postUserRewardReq,
    },
    options,
  );
};

export type CoinRewardControllerV1RewardCoinMutationResult = NonNullable<
  Awaited<ReturnType<typeof coinRewardControllerV1RewardCoin>>
>;
export type CoinRewardControllerV1RewardCoinMutationBody = PostUserRewardReq;
export type CoinRewardControllerV1RewardCoinMutationError = ErrorType<HttpExceptionSchema>;

export const useCoinRewardControllerV1RewardCoin = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof coinRewardControllerV1RewardCoin>>,
    TError,
    { data: PostUserRewardReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof coinRewardControllerV1RewardCoin>>,
    { data: PostUserRewardReq }
  > = (props) => {
    const { data } = props ?? {};

    return coinRewardControllerV1RewardCoin(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof coinRewardControllerV1RewardCoin>>,
    TError,
    { data: PostUserRewardReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const coinRewardControllerV1GetDailyLoginRewardValues = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetCoinLoginRewardValuesRes>(
    { url: `/api/v1/coin/reward-user/login-rewards`, method: 'get', signal },
    options,
  );
};

export const getCoinRewardControllerV1GetDailyLoginRewardValuesQueryKey = () => [
  `/api/v1/coin/reward-user/login-rewards`,
];

export type CoinRewardControllerV1GetDailyLoginRewardValuesQueryResult = NonNullable<
  Awaited<ReturnType<typeof coinRewardControllerV1GetDailyLoginRewardValues>>
>;
export type CoinRewardControllerV1GetDailyLoginRewardValuesQueryError =
  ErrorType<HttpExceptionSchema>;

export const useCoinRewardControllerV1GetDailyLoginRewardValues = <
  TData = Awaited<ReturnType<typeof coinRewardControllerV1GetDailyLoginRewardValues>>,
  TError = ErrorType<HttpExceptionSchema>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof coinRewardControllerV1GetDailyLoginRewardValues>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCoinRewardControllerV1GetDailyLoginRewardValuesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof coinRewardControllerV1GetDailyLoginRewardValues>>
  > = ({ signal }) => coinRewardControllerV1GetDailyLoginRewardValues(requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof coinRewardControllerV1GetDailyLoginRewardValues>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const coinRewardControllerV1PostDailyLoginReward = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PostCoinDailyLoginRewardRes>(
    { url: `/api/v1/coin/reward-user/login-reward`, method: 'post' },
    options,
  );
};

export type CoinRewardControllerV1PostDailyLoginRewardMutationResult = NonNullable<
  Awaited<ReturnType<typeof coinRewardControllerV1PostDailyLoginReward>>
>;

export type CoinRewardControllerV1PostDailyLoginRewardMutationError =
  ErrorType<HttpExceptionSchema>;

export const useCoinRewardControllerV1PostDailyLoginReward = <
  TError = ErrorType<HttpExceptionSchema>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof coinRewardControllerV1PostDailyLoginReward>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof coinRewardControllerV1PostDailyLoginReward>>,
    TVariables
  > = () => {
    return coinRewardControllerV1PostDailyLoginReward(requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof coinRewardControllerV1PostDailyLoginReward>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const coinRewardControllerV1GetDailyLoginRewardStreak = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetCoinDailyLoginRewardHistoryRes>(
    { url: `/api/v1/coin/reward-user/login-reward/${userId}`, method: 'get', signal },
    options,
  );
};

export const getCoinRewardControllerV1GetDailyLoginRewardStreakQueryKey = (userId: number) => [
  `/api/v1/coin/reward-user/login-reward/${userId}`,
];

export type CoinRewardControllerV1GetDailyLoginRewardStreakQueryResult = NonNullable<
  Awaited<ReturnType<typeof coinRewardControllerV1GetDailyLoginRewardStreak>>
>;
export type CoinRewardControllerV1GetDailyLoginRewardStreakQueryError =
  ErrorType<HttpExceptionSchema>;

export const useCoinRewardControllerV1GetDailyLoginRewardStreak = <
  TData = Awaited<ReturnType<typeof coinRewardControllerV1GetDailyLoginRewardStreak>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof coinRewardControllerV1GetDailyLoginRewardStreak>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCoinRewardControllerV1GetDailyLoginRewardStreakQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof coinRewardControllerV1GetDailyLoginRewardStreak>>
  > = ({ signal }) =>
    coinRewardControllerV1GetDailyLoginRewardStreak(userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof coinRewardControllerV1GetDailyLoginRewardStreak>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!userId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const coinChallengeControllerGetChallengesBaseReward = (
  params?: CoinChallengeControllerGetChallengesBaseRewardParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CoinBaseRewardRes[]>(
    { url: `/api/v1/coin/challenge/base-reward`, method: 'get', params, signal },
    options,
  );
};

export const getCoinChallengeControllerGetChallengesBaseRewardQueryKey = (
  params?: CoinChallengeControllerGetChallengesBaseRewardParams,
) => [`/api/v1/coin/challenge/base-reward`, ...(params ? [params] : [])];

export type CoinChallengeControllerGetChallengesBaseRewardQueryResult = NonNullable<
  Awaited<ReturnType<typeof coinChallengeControllerGetChallengesBaseReward>>
>;
export type CoinChallengeControllerGetChallengesBaseRewardQueryError =
  ErrorType<HttpExceptionSchema>;

export const useCoinChallengeControllerGetChallengesBaseReward = <
  TData = Awaited<ReturnType<typeof coinChallengeControllerGetChallengesBaseReward>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params?: CoinChallengeControllerGetChallengesBaseRewardParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof coinChallengeControllerGetChallengesBaseReward>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCoinChallengeControllerGetChallengesBaseRewardQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof coinChallengeControllerGetChallengesBaseReward>>
  > = ({ signal }) =>
    coinChallengeControllerGetChallengesBaseReward(params, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof coinChallengeControllerGetChallengesBaseReward>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const coinHistoryControllerV1GetHistoryByUserId = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CoinHistoryByUserIdV1Res>(
    { url: `/api/v1/coin/history/${userId}`, method: 'get', signal },
    options,
  );
};

export const getCoinHistoryControllerV1GetHistoryByUserIdQueryKey = (userId: number) => [
  `/api/v1/coin/history/${userId}`,
];

export type CoinHistoryControllerV1GetHistoryByUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof coinHistoryControllerV1GetHistoryByUserId>>
>;
export type CoinHistoryControllerV1GetHistoryByUserIdQueryError = ErrorType<unknown>;

export const useCoinHistoryControllerV1GetHistoryByUserId = <
  TData = Awaited<ReturnType<typeof coinHistoryControllerV1GetHistoryByUserId>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof coinHistoryControllerV1GetHistoryByUserId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCoinHistoryControllerV1GetHistoryByUserIdQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof coinHistoryControllerV1GetHistoryByUserId>>
  > = ({ signal }) => coinHistoryControllerV1GetHistoryByUserId(userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof coinHistoryControllerV1GetHistoryByUserId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!userId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};
