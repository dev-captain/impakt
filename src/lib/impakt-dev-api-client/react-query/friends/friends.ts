/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { GetUserRes, HttpExceptionSchema } from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const friendsControllerGetFriends = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetUserRes[]>({ url: `/api/v1/friends`, method: 'get', signal }, options);
};

export const getFriendsControllerGetFriendsQueryKey = () => [`/api/v1/friends`];

export type FriendsControllerGetFriendsQueryResult = NonNullable<
  Awaited<ReturnType<typeof friendsControllerGetFriends>>
>;
export type FriendsControllerGetFriendsQueryError = ErrorType<HttpExceptionSchema>;

export const useFriendsControllerGetFriends = <
  TData = Awaited<ReturnType<typeof friendsControllerGetFriends>>,
  TError = ErrorType<HttpExceptionSchema>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof friendsControllerGetFriends>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFriendsControllerGetFriendsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof friendsControllerGetFriends>>> = ({
    signal,
  }) => friendsControllerGetFriends(requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof friendsControllerGetFriends>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const friendsControllerGetFriend = (
  friendId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetUserRes>(
    { url: `/api/v1/friends/${friendId}`, method: 'get', signal },
    options,
  );
};

export const getFriendsControllerGetFriendQueryKey = (friendId: number) => [
  `/api/v1/friends/${friendId}`,
];

export type FriendsControllerGetFriendQueryResult = NonNullable<
  Awaited<ReturnType<typeof friendsControllerGetFriend>>
>;
export type FriendsControllerGetFriendQueryError = ErrorType<HttpExceptionSchema>;

export const useFriendsControllerGetFriend = <
  TData = Awaited<ReturnType<typeof friendsControllerGetFriend>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  friendId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof friendsControllerGetFriend>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFriendsControllerGetFriendQueryKey(friendId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof friendsControllerGetFriend>>> = ({
    signal,
  }) => friendsControllerGetFriend(friendId, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof friendsControllerGetFriend>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!friendId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const friendsControllerRemoveFriend = (
  friendId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/api/v1/friends/${friendId}`, method: 'delete' }, options);
};

export type FriendsControllerRemoveFriendMutationResult = NonNullable<
  Awaited<ReturnType<typeof friendsControllerRemoveFriend>>
>;

export type FriendsControllerRemoveFriendMutationError = ErrorType<HttpExceptionSchema>;

export const useFriendsControllerRemoveFriend = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof friendsControllerRemoveFriend>>,
    TError,
    { friendId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof friendsControllerRemoveFriend>>,
    { friendId: number }
  > = (props) => {
    const { friendId } = props ?? {};

    return friendsControllerRemoveFriend(friendId, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof friendsControllerRemoveFriend>>,
    TError,
    { friendId: number },
    TContext
  >(mutationFn, mutationOptions);
};
