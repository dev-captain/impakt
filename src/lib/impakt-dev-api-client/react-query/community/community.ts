/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GetCommunityRes,
  HttpExceptionSchema,
  CommunityControllerFindManyParams,
  PostCommunityReq,
  PatchCommunityReq,
  GetCommunityMemberRes,
  CommunityControllerFindCommunityMembersParams,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const communityControllerFindMany = (
  params?: CommunityControllerFindManyParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetCommunityRes[]>(
    { url: `/api/v1/community`, method: 'get', params, signal },
    options,
  );
};

export const getCommunityControllerFindManyQueryKey = (
  params?: CommunityControllerFindManyParams,
) => [`/api/v1/community`, ...(params ? [params] : [])];

export type CommunityControllerFindManyQueryResult = NonNullable<
  Awaited<ReturnType<typeof communityControllerFindMany>>
>;
export type CommunityControllerFindManyQueryError = ErrorType<HttpExceptionSchema>;

export const useCommunityControllerFindMany = <
  TData = Awaited<ReturnType<typeof communityControllerFindMany>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params?: CommunityControllerFindManyParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof communityControllerFindMany>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCommunityControllerFindManyQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof communityControllerFindMany>>> = ({
    signal,
  }) => communityControllerFindMany(params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof communityControllerFindMany>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const communityControllerCreate = (
  postCommunityReq: PostCommunityReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetCommunityRes>(
    {
      url: `/api/v1/community`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: postCommunityReq,
    },
    options,
  );
};

export type CommunityControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof communityControllerCreate>>
>;
export type CommunityControllerCreateMutationBody = PostCommunityReq;
export type CommunityControllerCreateMutationError = ErrorType<HttpExceptionSchema>;

export const useCommunityControllerCreate = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communityControllerCreate>>,
    TError,
    { data: PostCommunityReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communityControllerCreate>>,
    { data: PostCommunityReq }
  > = (props) => {
    const { data } = props ?? {};

    return communityControllerCreate(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof communityControllerCreate>>,
    TError,
    { data: PostCommunityReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const communityControllerFindOne = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetCommunityRes>(
    { url: `/api/v1/community/${id}`, method: 'get', signal },
    options,
  );
};

export const getCommunityControllerFindOneQueryKey = (id: number) => [`/api/v1/community/${id}`];

export type CommunityControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof communityControllerFindOne>>
>;
export type CommunityControllerFindOneQueryError = ErrorType<HttpExceptionSchema>;

export const useCommunityControllerFindOne = <
  TData = Awaited<ReturnType<typeof communityControllerFindOne>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof communityControllerFindOne>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCommunityControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof communityControllerFindOne>>> = ({
    signal,
  }) => communityControllerFindOne(id, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof communityControllerFindOne>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const communityControllerUpdate = (
  id: number,
  patchCommunityReq: PatchCommunityReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetCommunityRes>(
    {
      url: `/api/v1/community/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: patchCommunityReq,
    },
    options,
  );
};

export type CommunityControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof communityControllerUpdate>>
>;
export type CommunityControllerUpdateMutationBody = PatchCommunityReq;
export type CommunityControllerUpdateMutationError = ErrorType<HttpExceptionSchema>;

export const useCommunityControllerUpdate = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communityControllerUpdate>>,
    TError,
    { id: number; data: PatchCommunityReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communityControllerUpdate>>,
    { id: number; data: PatchCommunityReq }
  > = (props) => {
    const { id, data } = props ?? {};

    return communityControllerUpdate(id, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof communityControllerUpdate>>,
    TError,
    { id: number; data: PatchCommunityReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const communityControllerRemove = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetCommunityRes>(
    { url: `/api/v1/community/${id}`, method: 'delete' },
    options,
  );
};

export type CommunityControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof communityControllerRemove>>
>;

export type CommunityControllerRemoveMutationError = ErrorType<HttpExceptionSchema>;

export const useCommunityControllerRemove = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communityControllerRemove>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communityControllerRemove>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return communityControllerRemove(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof communityControllerRemove>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const communityControllerFindCommunityMembers = (
  communityId: number,
  params?: CommunityControllerFindCommunityMembersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetCommunityMemberRes>(
    { url: `/api/v1/community/${communityId}/members`, method: 'get', params, signal },
    options,
  );
};

export const getCommunityControllerFindCommunityMembersQueryKey = (
  communityId: number,
  params?: CommunityControllerFindCommunityMembersParams,
) => [`/api/v1/community/${communityId}/members`, ...(params ? [params] : [])];

export type CommunityControllerFindCommunityMembersQueryResult = NonNullable<
  Awaited<ReturnType<typeof communityControllerFindCommunityMembers>>
>;
export type CommunityControllerFindCommunityMembersQueryError = ErrorType<HttpExceptionSchema>;

export const useCommunityControllerFindCommunityMembers = <
  TData = Awaited<ReturnType<typeof communityControllerFindCommunityMembers>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  communityId: number,
  params?: CommunityControllerFindCommunityMembersParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof communityControllerFindCommunityMembers>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCommunityControllerFindCommunityMembersQueryKey(communityId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof communityControllerFindCommunityMembers>>
  > = ({ signal }) =>
    communityControllerFindCommunityMembers(communityId, params, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof communityControllerFindCommunityMembers>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!communityId, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
