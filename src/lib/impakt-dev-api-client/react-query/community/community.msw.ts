/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getCommunityControllerFindManyMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    name: faker.random.word(),
    description: faker.helpers.arrayElement([faker.random.word(), null]),
    ownerId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    memberCount: faker.datatype.number({ min: undefined, max: undefined }),
  }));

export const getCommunityControllerCreateMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  name: faker.random.word(),
  description: faker.helpers.arrayElement([faker.random.word(), null]),
  ownerId: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    null,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    null,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    null,
  ]),
  memberCount: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getCommunityControllerFindOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  name: faker.random.word(),
  description: faker.helpers.arrayElement([faker.random.word(), null]),
  ownerId: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    null,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    null,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    null,
  ]),
  memberCount: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getCommunityControllerUpdateMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  name: faker.random.word(),
  description: faker.helpers.arrayElement([faker.random.word(), null]),
  ownerId: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    null,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    null,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    null,
  ]),
  memberCount: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getCommunityControllerRemoveMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  name: faker.random.word(),
  description: faker.helpers.arrayElement([faker.random.word(), null]),
  ownerId: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    null,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    null,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    null,
  ]),
  memberCount: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getCommunityControllerFindCommunityMembersMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  name: faker.random.word(),
  description: faker.helpers.arrayElement([faker.random.word(), null]),
  ownerId: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    null,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    null,
  ]),
  members: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      communityId: faker.datatype.number({ min: undefined, max: undefined }),
      primary: faker.datatype.boolean(),
      userId: faker.datatype.number({ min: undefined, max: undefined }),
      joinedAt: faker.helpers.arrayElement([
        faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
        undefined,
      ]),
      leftAt: faker.helpers.arrayElement([
        faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
        undefined,
      ]),
      User: {},
    }),
  ),
});

export const getCommunityMSW = () => [
  rest.get('*/api/v1/community', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCommunityControllerFindManyMock()),
    );
  }),
  rest.post('*/api/v1/community', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCommunityControllerCreateMock()),
    );
  }),
  rest.get('*/api/v1/community/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCommunityControllerFindOneMock()),
    );
  }),
  rest.patch('*/api/v1/community/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCommunityControllerUpdateMock()),
    );
  }),
  rest.delete('*/api/v1/community/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCommunityControllerRemoveMock()),
    );
  }),
  rest.get('*/api/v1/community/:communityId/members', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCommunityControllerFindCommunityMembersMock()),
    );
  }),
];
