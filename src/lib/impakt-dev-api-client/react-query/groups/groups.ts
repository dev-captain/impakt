/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GetGroupRes,
  HttpExceptionSchema,
  GroupsControllerV1FindAllParams,
  PostGroupsReq,
  ExploreGroupRes,
  GroupsControllerV1ExploreGroupsParams,
  PatchGroupsReq,
  GetUploadImageRes,
  GroupsControllerV1PatchGroupCoverImageBody,
  GetMembersOfGroupRes,
  GroupsControllerV1FindGroupMembersParams,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const groupsControllerV1FindAll = (
  params?: GroupsControllerV1FindAllParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGroupRes[]>(
    { url: `/api/v1/groups`, method: 'get', params, signal },
    options,
  );
};

export const getGroupsControllerV1FindAllQueryKey = (params?: GroupsControllerV1FindAllParams) => [
  `/api/v1/groups`,
  ...(params ? [params] : []),
];

export type GroupsControllerV1FindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof groupsControllerV1FindAll>>
>;
export type GroupsControllerV1FindAllQueryError = ErrorType<HttpExceptionSchema>;

export const useGroupsControllerV1FindAll = <
  TData = Awaited<ReturnType<typeof groupsControllerV1FindAll>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params?: GroupsControllerV1FindAllParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof groupsControllerV1FindAll>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGroupsControllerV1FindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsControllerV1FindAll>>> = ({
    signal,
  }) => groupsControllerV1FindAll(params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof groupsControllerV1FindAll>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const groupsControllerV1Create = (
  postGroupsReq: PostGroupsReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetGroupRes>(
    {
      url: `/api/v1/groups`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: postGroupsReq,
    },
    options,
  );
};

export type GroupsControllerV1CreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupsControllerV1Create>>
>;
export type GroupsControllerV1CreateMutationBody = PostGroupsReq;
export type GroupsControllerV1CreateMutationError = ErrorType<HttpExceptionSchema>;

export const useGroupsControllerV1Create = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupsControllerV1Create>>,
    TError,
    { data: PostGroupsReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupsControllerV1Create>>,
    { data: PostGroupsReq }
  > = (props) => {
    const { data } = props ?? {};

    return groupsControllerV1Create(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof groupsControllerV1Create>>,
    TError,
    { data: PostGroupsReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const groupsControllerV1ExploreGroups = (
  params?: GroupsControllerV1ExploreGroupsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ExploreGroupRes[]>(
    { url: `/api/v1/groups/explore`, method: 'get', params, signal },
    options,
  );
};

export const getGroupsControllerV1ExploreGroupsQueryKey = (
  params?: GroupsControllerV1ExploreGroupsParams,
) => [`/api/v1/groups/explore`, ...(params ? [params] : [])];

export type GroupsControllerV1ExploreGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof groupsControllerV1ExploreGroups>>
>;
export type GroupsControllerV1ExploreGroupsQueryError = ErrorType<HttpExceptionSchema>;

export const useGroupsControllerV1ExploreGroups = <
  TData = Awaited<ReturnType<typeof groupsControllerV1ExploreGroups>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params?: GroupsControllerV1ExploreGroupsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof groupsControllerV1ExploreGroups>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGroupsControllerV1ExploreGroupsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsControllerV1ExploreGroups>>> = ({
    signal,
  }) => groupsControllerV1ExploreGroups(params, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof groupsControllerV1ExploreGroups>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const groupsControllerV1PatchGroup = (
  groupId: number,
  patchGroupsReq: PatchGroupsReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetGroupRes>(
    {
      url: `/api/v1/groups/${groupId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: patchGroupsReq,
    },
    options,
  );
};

export type GroupsControllerV1PatchGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupsControllerV1PatchGroup>>
>;
export type GroupsControllerV1PatchGroupMutationBody = PatchGroupsReq;
export type GroupsControllerV1PatchGroupMutationError = ErrorType<HttpExceptionSchema>;

export const useGroupsControllerV1PatchGroup = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupsControllerV1PatchGroup>>,
    TError,
    { groupId: number; data: PatchGroupsReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupsControllerV1PatchGroup>>,
    { groupId: number; data: PatchGroupsReq }
  > = (props) => {
    const { groupId, data } = props ?? {};

    return groupsControllerV1PatchGroup(groupId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof groupsControllerV1PatchGroup>>,
    TError,
    { groupId: number; data: PatchGroupsReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const groupsControllerV1FindOne = (
  groupId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGroupRes>(
    { url: `/api/v1/groups/${groupId}`, method: 'get', signal },
    options,
  );
};

export const getGroupsControllerV1FindOneQueryKey = (groupId: number) => [
  `/api/v1/groups/${groupId}`,
];

export type GroupsControllerV1FindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof groupsControllerV1FindOne>>
>;
export type GroupsControllerV1FindOneQueryError = ErrorType<HttpExceptionSchema>;

export const useGroupsControllerV1FindOne = <
  TData = Awaited<ReturnType<typeof groupsControllerV1FindOne>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof groupsControllerV1FindOne>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGroupsControllerV1FindOneQueryKey(groupId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsControllerV1FindOne>>> = ({
    signal,
  }) => groupsControllerV1FindOne(groupId, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof groupsControllerV1FindOne>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!groupId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const groupsControllerV1Remove = (
  groupId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetGroupRes>(
    { url: `/api/v1/groups/${groupId}`, method: 'delete' },
    options,
  );
};

export type GroupsControllerV1RemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupsControllerV1Remove>>
>;

export type GroupsControllerV1RemoveMutationError = ErrorType<HttpExceptionSchema>;

export const useGroupsControllerV1Remove = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupsControllerV1Remove>>,
    TError,
    { groupId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupsControllerV1Remove>>,
    { groupId: number }
  > = (props) => {
    const { groupId } = props ?? {};

    return groupsControllerV1Remove(groupId, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof groupsControllerV1Remove>>,
    TError,
    { groupId: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const groupsControllerV1PatchGroupCoverImage = (
  groupId: number,
  groupsControllerV1PatchGroupCoverImageBody: GroupsControllerV1PatchGroupCoverImageBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  const formData = new FormData();
  formData.append('file', groupsControllerV1PatchGroupCoverImageBody.file);

  return customInstance<GetUploadImageRes>(
    {
      url: `/api/v1/groups/${groupId}/cover-image`,
      method: 'post',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
    },
    options,
  );
};

export type GroupsControllerV1PatchGroupCoverImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupsControllerV1PatchGroupCoverImage>>
>;
export type GroupsControllerV1PatchGroupCoverImageMutationBody =
  GroupsControllerV1PatchGroupCoverImageBody;
export type GroupsControllerV1PatchGroupCoverImageMutationError = ErrorType<HttpExceptionSchema>;

export const useGroupsControllerV1PatchGroupCoverImage = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupsControllerV1PatchGroupCoverImage>>,
    TError,
    { groupId: number; data: GroupsControllerV1PatchGroupCoverImageBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupsControllerV1PatchGroupCoverImage>>,
    { groupId: number; data: GroupsControllerV1PatchGroupCoverImageBody }
  > = (props) => {
    const { groupId, data } = props ?? {};

    return groupsControllerV1PatchGroupCoverImage(groupId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof groupsControllerV1PatchGroupCoverImage>>,
    TError,
    { groupId: number; data: GroupsControllerV1PatchGroupCoverImageBody },
    TContext
  >(mutationFn, mutationOptions);
};
export const groupsControllerV1FindGroupMembers = (
  groupId: number,
  params?: GroupsControllerV1FindGroupMembersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetMembersOfGroupRes>(
    { url: `/api/v1/groups/${groupId}/members`, method: 'get', params, signal },
    options,
  );
};

export const getGroupsControllerV1FindGroupMembersQueryKey = (
  groupId: number,
  params?: GroupsControllerV1FindGroupMembersParams,
) => [`/api/v1/groups/${groupId}/members`, ...(params ? [params] : [])];

export type GroupsControllerV1FindGroupMembersQueryResult = NonNullable<
  Awaited<ReturnType<typeof groupsControllerV1FindGroupMembers>>
>;
export type GroupsControllerV1FindGroupMembersQueryError = ErrorType<HttpExceptionSchema>;

export const useGroupsControllerV1FindGroupMembers = <
  TData = Awaited<ReturnType<typeof groupsControllerV1FindGroupMembers>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  groupId: number,
  params?: GroupsControllerV1FindGroupMembersParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof groupsControllerV1FindGroupMembers>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGroupsControllerV1FindGroupMembersQueryKey(groupId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsControllerV1FindGroupMembers>>> = ({
    signal,
  }) => groupsControllerV1FindGroupMembers(groupId, params, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof groupsControllerV1FindGroupMembers>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!groupId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};
