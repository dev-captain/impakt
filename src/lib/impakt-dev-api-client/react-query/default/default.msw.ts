/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getChallengeStatsControllerGetChallengeAttemptsForAllUsersMock = () => ({
  successAttempts: faker.datatype.number({ min: undefined, max: undefined }),
  failAttempts: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getChallengeStatsControllerGetChallengeAttemptByUserMock = () => ({
  successAttempts: faker.datatype.number({ min: undefined, max: undefined }),
  failAttempts: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getChallengeStatsControllerGetUserBestScoreMock = () => ({
  userCount: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  userTime: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  userScore: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
});

export const getRoutineStatsControllerGetUserBestScoreMock = () => ({
  userCount: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  userTime: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  userScore: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
});

export const getDefaultMSW = () => [
  rest.get('*/api/v1/stats/challenge/:challengeId/attempts', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getChallengeStatsControllerGetChallengeAttemptsForAllUsersMock()),
    );
  }),
  rest.get('*/api/v1/stats/challenge/:challengeId/attempts/:userId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getChallengeStatsControllerGetChallengeAttemptByUserMock()),
    );
  }),
  rest.get('*/api/v1/stats/challenge/:challengeId/bestscore/:userId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getChallengeStatsControllerGetUserBestScoreMock()),
    );
  }),
  rest.get('*/api/v1/stats/routine/:routineId/bestscore/:userId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getRoutineStatsControllerGetUserBestScoreMock()),
    );
  }),
  rest.get('*/api/v1/definition', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.post('*/api/v1/definition', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/api/v1/definition/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.patch('*/api/v1/definition/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.delete('*/api/v1/definition/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/api/v1/history/:rewardeeType/:rewardeeId', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.delete('*/api/v1/history/:rewardeeType/:rewardeeId/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/api', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
];
