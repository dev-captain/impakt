/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  ChallengeAttemptStatsRes,
  ChallengeBestScoreStatsRes,
  RoutineBestScoreStatsRes,
  RewardHistoryControllerV1GetRewardHistoryParams,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const challengeStatsControllerGetChallengeAttemptsForAllUsers = (
  challengeId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ChallengeAttemptStatsRes>(
    { url: `/api/v1/stats/challenge/${challengeId}/attempts`, method: 'get', signal },
    options,
  );
};

export const getChallengeStatsControllerGetChallengeAttemptsForAllUsersQueryKey = (
  challengeId: number,
) => [`/api/v1/stats/challenge/${challengeId}/attempts`];

export type ChallengeStatsControllerGetChallengeAttemptsForAllUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptsForAllUsers>>
>;
export type ChallengeStatsControllerGetChallengeAttemptsForAllUsersQueryError = ErrorType<unknown>;

export const useChallengeStatsControllerGetChallengeAttemptsForAllUsers = <
  TData = Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptsForAllUsers>>,
  TError = ErrorType<unknown>,
>(
  challengeId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptsForAllUsers>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getChallengeStatsControllerGetChallengeAttemptsForAllUsersQueryKey(challengeId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptsForAllUsers>>
  > = ({ signal }) =>
    challengeStatsControllerGetChallengeAttemptsForAllUsers(challengeId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptsForAllUsers>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!challengeId, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const challengeStatsControllerGetChallengeAttemptByUser = (
  challengeId: number,
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ChallengeAttemptStatsRes>(
    { url: `/api/v1/stats/challenge/${challengeId}/attempts/${userId}`, method: 'get', signal },
    options,
  );
};

export const getChallengeStatsControllerGetChallengeAttemptByUserQueryKey = (
  challengeId: number,
  userId: number,
) => [`/api/v1/stats/challenge/${challengeId}/attempts/${userId}`];

export type ChallengeStatsControllerGetChallengeAttemptByUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptByUser>>
>;
export type ChallengeStatsControllerGetChallengeAttemptByUserQueryError = ErrorType<unknown>;

export const useChallengeStatsControllerGetChallengeAttemptByUser = <
  TData = Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptByUser>>,
  TError = ErrorType<unknown>,
>(
  challengeId: number,
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptByUser>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getChallengeStatsControllerGetChallengeAttemptByUserQueryKey(challengeId, userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptByUser>>
  > = ({ signal }) =>
    challengeStatsControllerGetChallengeAttemptByUser(challengeId, userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptByUser>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!(challengeId && userId), ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const challengeStatsControllerGetUserBestScore = (
  challengeId: number,
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ChallengeBestScoreStatsRes>(
    { url: `/api/v1/stats/challenge/${challengeId}/bestscore/${userId}`, method: 'get', signal },
    options,
  );
};

export const getChallengeStatsControllerGetUserBestScoreQueryKey = (
  challengeId: number,
  userId: number,
) => [`/api/v1/stats/challenge/${challengeId}/bestscore/${userId}`];

export type ChallengeStatsControllerGetUserBestScoreQueryResult = NonNullable<
  Awaited<ReturnType<typeof challengeStatsControllerGetUserBestScore>>
>;
export type ChallengeStatsControllerGetUserBestScoreQueryError = ErrorType<unknown>;

export const useChallengeStatsControllerGetUserBestScore = <
  TData = Awaited<ReturnType<typeof challengeStatsControllerGetUserBestScore>>,
  TError = ErrorType<unknown>,
>(
  challengeId: number,
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof challengeStatsControllerGetUserBestScore>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getChallengeStatsControllerGetUserBestScoreQueryKey(challengeId, userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof challengeStatsControllerGetUserBestScore>>
  > = ({ signal }) =>
    challengeStatsControllerGetUserBestScore(challengeId, userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof challengeStatsControllerGetUserBestScore>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!(challengeId && userId), ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const routineStatsControllerGetUserBestScore = (
  routineId: number,
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<RoutineBestScoreStatsRes>(
    { url: `/api/v1/stats/routine/${routineId}/bestscore/${userId}`, method: 'get', signal },
    options,
  );
};

export const getRoutineStatsControllerGetUserBestScoreQueryKey = (
  routineId: number,
  userId: number,
) => [`/api/v1/stats/routine/${routineId}/bestscore/${userId}`];

export type RoutineStatsControllerGetUserBestScoreQueryResult = NonNullable<
  Awaited<ReturnType<typeof routineStatsControllerGetUserBestScore>>
>;
export type RoutineStatsControllerGetUserBestScoreQueryError = ErrorType<unknown>;

export const useRoutineStatsControllerGetUserBestScore = <
  TData = Awaited<ReturnType<typeof routineStatsControllerGetUserBestScore>>,
  TError = ErrorType<unknown>,
>(
  routineId: number,
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof routineStatsControllerGetUserBestScore>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRoutineStatsControllerGetUserBestScoreQueryKey(routineId, userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof routineStatsControllerGetUserBestScore>>
  > = ({ signal }) =>
    routineStatsControllerGetUserBestScore(routineId, userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof routineStatsControllerGetUserBestScore>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!(routineId && userId), ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const rewardDefinitionV1ControllerGetRewardDefinitions = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>({ url: `/api/v1/definition`, method: 'get', signal }, options);
};

export const getRewardDefinitionV1ControllerGetRewardDefinitionsQueryKey = () => [
  `/api/v1/definition`,
];

export type RewardDefinitionV1ControllerGetRewardDefinitionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinitions>>
>;
export type RewardDefinitionV1ControllerGetRewardDefinitionsQueryError = ErrorType<unknown>;

export const useRewardDefinitionV1ControllerGetRewardDefinitions = <
  TData = Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinitions>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinitions>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRewardDefinitionV1ControllerGetRewardDefinitionsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinitions>>
  > = ({ signal }) => rewardDefinitionV1ControllerGetRewardDefinitions(requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinitions>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const rewardDefinitionV1ControllerCreateRewardDefinition = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/api/v1/definition`, method: 'post' }, options);
};

export type RewardDefinitionV1ControllerCreateRewardDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof rewardDefinitionV1ControllerCreateRewardDefinition>>
>;

export type RewardDefinitionV1ControllerCreateRewardDefinitionMutationError = ErrorType<unknown>;

export const useRewardDefinitionV1ControllerCreateRewardDefinition = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerCreateRewardDefinition>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerCreateRewardDefinition>>,
    TVariables
  > = () => {
    return rewardDefinitionV1ControllerCreateRewardDefinition(requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerCreateRewardDefinition>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const rewardDefinitionV1ControllerGetRewardDefinition = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>({ url: `/api/v1/definition/${id}`, method: 'get', signal }, options);
};

export const getRewardDefinitionV1ControllerGetRewardDefinitionQueryKey = (id: number) => [
  `/api/v1/definition/${id}`,
];

export type RewardDefinitionV1ControllerGetRewardDefinitionQueryResult = NonNullable<
  Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinition>>
>;
export type RewardDefinitionV1ControllerGetRewardDefinitionQueryError = ErrorType<unknown>;

export const useRewardDefinitionV1ControllerGetRewardDefinition = <
  TData = Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinition>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinition>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRewardDefinitionV1ControllerGetRewardDefinitionQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinition>>
  > = ({ signal }) => rewardDefinitionV1ControllerGetRewardDefinition(id, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinition>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const rewardDefinitionV1ControllerUpdateRewardDefinition = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/api/v1/definition/${id}`, method: 'patch' }, options);
};

export type RewardDefinitionV1ControllerUpdateRewardDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof rewardDefinitionV1ControllerUpdateRewardDefinition>>
>;

export type RewardDefinitionV1ControllerUpdateRewardDefinitionMutationError = ErrorType<unknown>;

export const useRewardDefinitionV1ControllerUpdateRewardDefinition = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerUpdateRewardDefinition>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerUpdateRewardDefinition>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return rewardDefinitionV1ControllerUpdateRewardDefinition(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerUpdateRewardDefinition>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const rewardDefinitionV1ControllerDeleteRewardDefinition = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/api/v1/definition/${id}`, method: 'delete' }, options);
};

export type RewardDefinitionV1ControllerDeleteRewardDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof rewardDefinitionV1ControllerDeleteRewardDefinition>>
>;

export type RewardDefinitionV1ControllerDeleteRewardDefinitionMutationError = ErrorType<unknown>;

export const useRewardDefinitionV1ControllerDeleteRewardDefinition = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerDeleteRewardDefinition>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerDeleteRewardDefinition>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return rewardDefinitionV1ControllerDeleteRewardDefinition(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerDeleteRewardDefinition>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const rewardHistoryControllerV1GetRewardHistory = (
  rewardeeType: string,
  rewardeeId: number,
  params?: RewardHistoryControllerV1GetRewardHistoryParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/v1/history/${rewardeeType}/${rewardeeId}`, method: 'get', params, signal },
    options,
  );
};

export const getRewardHistoryControllerV1GetRewardHistoryQueryKey = (
  rewardeeType: string,
  rewardeeId: number,
  params?: RewardHistoryControllerV1GetRewardHistoryParams,
) => [`/api/v1/history/${rewardeeType}/${rewardeeId}`, ...(params ? [params] : [])];

export type RewardHistoryControllerV1GetRewardHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof rewardHistoryControllerV1GetRewardHistory>>
>;
export type RewardHistoryControllerV1GetRewardHistoryQueryError = ErrorType<unknown>;

export const useRewardHistoryControllerV1GetRewardHistory = <
  TData = Awaited<ReturnType<typeof rewardHistoryControllerV1GetRewardHistory>>,
  TError = ErrorType<unknown>,
>(
  rewardeeType: string,
  rewardeeId: number,
  params?: RewardHistoryControllerV1GetRewardHistoryParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof rewardHistoryControllerV1GetRewardHistory>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getRewardHistoryControllerV1GetRewardHistoryQueryKey(rewardeeType, rewardeeId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rewardHistoryControllerV1GetRewardHistory>>
  > = ({ signal }) =>
    rewardHistoryControllerV1GetRewardHistory(
      rewardeeType,
      rewardeeId,
      params,
      requestOptions,
      signal,
    );

  const query = useQuery<
    Awaited<ReturnType<typeof rewardHistoryControllerV1GetRewardHistory>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(rewardeeType && rewardeeId),
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const rewardHistoryControllerV1DeleteRewardHistoryItem = (
  rewardeeType: string,
  rewardeeId: number,
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v1/history/${rewardeeType}/${rewardeeId}/${id}`, method: 'delete' },
    options,
  );
};

export type RewardHistoryControllerV1DeleteRewardHistoryItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof rewardHistoryControllerV1DeleteRewardHistoryItem>>
>;

export type RewardHistoryControllerV1DeleteRewardHistoryItemMutationError = ErrorType<unknown>;

export const useRewardHistoryControllerV1DeleteRewardHistoryItem = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rewardHistoryControllerV1DeleteRewardHistoryItem>>,
    TError,
    { rewardeeType: string; rewardeeId: number; id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rewardHistoryControllerV1DeleteRewardHistoryItem>>,
    { rewardeeType: string; rewardeeId: number; id: number }
  > = (props) => {
    const { rewardeeType, rewardeeId, id } = props ?? {};

    return rewardHistoryControllerV1DeleteRewardHistoryItem(
      rewardeeType,
      rewardeeId,
      id,
      requestOptions,
    );
  };

  return useMutation<
    Awaited<ReturnType<typeof rewardHistoryControllerV1DeleteRewardHistoryItem>>,
    TError,
    { rewardeeType: string; rewardeeId: number; id: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const appControllerHealthz = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>({ url: `/api`, method: 'get', signal }, options);
};

export const getAppControllerHealthzQueryKey = () => [`/api`];

export type AppControllerHealthzQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerHealthz>>
>;
export type AppControllerHealthzQueryError = ErrorType<unknown>;

export const useAppControllerHealthz = <
  TData = Awaited<ReturnType<typeof appControllerHealthz>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof appControllerHealthz>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerHealthzQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerHealthz>>> = ({ signal }) =>
    appControllerHealthz(requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof appControllerHealthz>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
