/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  ChallengeAttemptStatsRes,
  ChallengeBestScoreStatsRes,
  RoutineBestScoreStatsRes,
  RewardHistoryControllerV1GetRewardHistoryParams,
  GameDefinitionsResV1,
  HttpExceptionSchema,
  GameDefinitionControllerV1GetGameDefinitionsParams,
  GameDefinitionResV1,
  GameDefinitionControllerV1GetGameDefinitionParams,
  GetGameModeDefinitionsDtoV1,
  GameModeDefinitionControllerV1GetGameModeDefinitionsParams,
  GetGameModeDefinitionDtoV1,
  CreateGameModeDefinitionDtoV1,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const challengeStatsControllerGetChallengeAttemptsForAllUsers = (
  challengeId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ChallengeAttemptStatsRes>(
    { url: `/api/v1/stats/challenge/${challengeId}/attempts`, method: 'get', signal },
    options,
  );
};

export const getChallengeStatsControllerGetChallengeAttemptsForAllUsersQueryKey = (
  challengeId: number,
) => [`/api/v1/stats/challenge/${challengeId}/attempts`];

export type ChallengeStatsControllerGetChallengeAttemptsForAllUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptsForAllUsers>>
>;
export type ChallengeStatsControllerGetChallengeAttemptsForAllUsersQueryError = ErrorType<unknown>;

export const useChallengeStatsControllerGetChallengeAttemptsForAllUsers = <
  TData = Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptsForAllUsers>>,
  TError = ErrorType<unknown>,
>(
  challengeId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptsForAllUsers>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getChallengeStatsControllerGetChallengeAttemptsForAllUsersQueryKey(challengeId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptsForAllUsers>>
  > = ({ signal }) =>
    challengeStatsControllerGetChallengeAttemptsForAllUsers(challengeId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptsForAllUsers>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!challengeId, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const challengeStatsControllerGetChallengeAttemptByUser = (
  challengeId: number,
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ChallengeAttemptStatsRes>(
    { url: `/api/v1/stats/challenge/${challengeId}/attempts/${userId}`, method: 'get', signal },
    options,
  );
};

export const getChallengeStatsControllerGetChallengeAttemptByUserQueryKey = (
  challengeId: number,
  userId: number,
) => [`/api/v1/stats/challenge/${challengeId}/attempts/${userId}`];

export type ChallengeStatsControllerGetChallengeAttemptByUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptByUser>>
>;
export type ChallengeStatsControllerGetChallengeAttemptByUserQueryError = ErrorType<unknown>;

export const useChallengeStatsControllerGetChallengeAttemptByUser = <
  TData = Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptByUser>>,
  TError = ErrorType<unknown>,
>(
  challengeId: number,
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptByUser>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getChallengeStatsControllerGetChallengeAttemptByUserQueryKey(challengeId, userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptByUser>>
  > = ({ signal }) =>
    challengeStatsControllerGetChallengeAttemptByUser(challengeId, userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof challengeStatsControllerGetChallengeAttemptByUser>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!(challengeId && userId), ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const challengeStatsControllerGetUserBestScore = (
  challengeId: number,
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ChallengeBestScoreStatsRes>(
    { url: `/api/v1/stats/challenge/${challengeId}/bestscore/${userId}`, method: 'get', signal },
    options,
  );
};

export const getChallengeStatsControllerGetUserBestScoreQueryKey = (
  challengeId: number,
  userId: number,
) => [`/api/v1/stats/challenge/${challengeId}/bestscore/${userId}`];

export type ChallengeStatsControllerGetUserBestScoreQueryResult = NonNullable<
  Awaited<ReturnType<typeof challengeStatsControllerGetUserBestScore>>
>;
export type ChallengeStatsControllerGetUserBestScoreQueryError = ErrorType<unknown>;

export const useChallengeStatsControllerGetUserBestScore = <
  TData = Awaited<ReturnType<typeof challengeStatsControllerGetUserBestScore>>,
  TError = ErrorType<unknown>,
>(
  challengeId: number,
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof challengeStatsControllerGetUserBestScore>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getChallengeStatsControllerGetUserBestScoreQueryKey(challengeId, userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof challengeStatsControllerGetUserBestScore>>
  > = ({ signal }) =>
    challengeStatsControllerGetUserBestScore(challengeId, userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof challengeStatsControllerGetUserBestScore>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!(challengeId && userId), ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const routineStatsControllerGetUserBestScore = (
  routineId: number,
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<RoutineBestScoreStatsRes>(
    { url: `/api/v1/stats/routine/${routineId}/bestscore/${userId}`, method: 'get', signal },
    options,
  );
};

export const getRoutineStatsControllerGetUserBestScoreQueryKey = (
  routineId: number,
  userId: number,
) => [`/api/v1/stats/routine/${routineId}/bestscore/${userId}`];

export type RoutineStatsControllerGetUserBestScoreQueryResult = NonNullable<
  Awaited<ReturnType<typeof routineStatsControllerGetUserBestScore>>
>;
export type RoutineStatsControllerGetUserBestScoreQueryError = ErrorType<unknown>;

export const useRoutineStatsControllerGetUserBestScore = <
  TData = Awaited<ReturnType<typeof routineStatsControllerGetUserBestScore>>,
  TError = ErrorType<unknown>,
>(
  routineId: number,
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof routineStatsControllerGetUserBestScore>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRoutineStatsControllerGetUserBestScoreQueryKey(routineId, userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof routineStatsControllerGetUserBestScore>>
  > = ({ signal }) =>
    routineStatsControllerGetUserBestScore(routineId, userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof routineStatsControllerGetUserBestScore>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!(routineId && userId), ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const rewardDefinitionV1ControllerGetRewardDefinitions = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>({ url: `/api/v1/definition`, method: 'get', signal }, options);
};

export const getRewardDefinitionV1ControllerGetRewardDefinitionsQueryKey = () => [
  `/api/v1/definition`,
];

export type RewardDefinitionV1ControllerGetRewardDefinitionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinitions>>
>;
export type RewardDefinitionV1ControllerGetRewardDefinitionsQueryError = ErrorType<unknown>;

export const useRewardDefinitionV1ControllerGetRewardDefinitions = <
  TData = Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinitions>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinitions>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRewardDefinitionV1ControllerGetRewardDefinitionsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinitions>>
  > = ({ signal }) => rewardDefinitionV1ControllerGetRewardDefinitions(requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinitions>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const rewardDefinitionV1ControllerCreateRewardDefinition = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/api/v1/definition`, method: 'post' }, options);
};

export type RewardDefinitionV1ControllerCreateRewardDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof rewardDefinitionV1ControllerCreateRewardDefinition>>
>;

export type RewardDefinitionV1ControllerCreateRewardDefinitionMutationError = ErrorType<unknown>;

export const useRewardDefinitionV1ControllerCreateRewardDefinition = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerCreateRewardDefinition>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerCreateRewardDefinition>>,
    TVariables
  > = () => {
    return rewardDefinitionV1ControllerCreateRewardDefinition(requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerCreateRewardDefinition>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const rewardDefinitionV1ControllerGetRewardDefinition = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>({ url: `/api/v1/definition/${id}`, method: 'get', signal }, options);
};

export const getRewardDefinitionV1ControllerGetRewardDefinitionQueryKey = (id: number) => [
  `/api/v1/definition/${id}`,
];

export type RewardDefinitionV1ControllerGetRewardDefinitionQueryResult = NonNullable<
  Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinition>>
>;
export type RewardDefinitionV1ControllerGetRewardDefinitionQueryError = ErrorType<unknown>;

export const useRewardDefinitionV1ControllerGetRewardDefinition = <
  TData = Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinition>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinition>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRewardDefinitionV1ControllerGetRewardDefinitionQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinition>>
  > = ({ signal }) => rewardDefinitionV1ControllerGetRewardDefinition(id, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerGetRewardDefinition>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const rewardDefinitionV1ControllerUpdateRewardDefinition = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/api/v1/definition/${id}`, method: 'patch' }, options);
};

export type RewardDefinitionV1ControllerUpdateRewardDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof rewardDefinitionV1ControllerUpdateRewardDefinition>>
>;

export type RewardDefinitionV1ControllerUpdateRewardDefinitionMutationError = ErrorType<unknown>;

export const useRewardDefinitionV1ControllerUpdateRewardDefinition = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerUpdateRewardDefinition>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerUpdateRewardDefinition>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return rewardDefinitionV1ControllerUpdateRewardDefinition(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerUpdateRewardDefinition>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const rewardDefinitionV1ControllerDeleteRewardDefinition = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/api/v1/definition/${id}`, method: 'delete' }, options);
};

export type RewardDefinitionV1ControllerDeleteRewardDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof rewardDefinitionV1ControllerDeleteRewardDefinition>>
>;

export type RewardDefinitionV1ControllerDeleteRewardDefinitionMutationError = ErrorType<unknown>;

export const useRewardDefinitionV1ControllerDeleteRewardDefinition = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerDeleteRewardDefinition>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerDeleteRewardDefinition>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return rewardDefinitionV1ControllerDeleteRewardDefinition(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof rewardDefinitionV1ControllerDeleteRewardDefinition>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const rewardHistoryControllerV1GetRewardHistory = (
  rewardeeType: string,
  rewardeeId: number,
  params?: RewardHistoryControllerV1GetRewardHistoryParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/v1/history/${rewardeeType}/${rewardeeId}`, method: 'get', params, signal },
    options,
  );
};

export const getRewardHistoryControllerV1GetRewardHistoryQueryKey = (
  rewardeeType: string,
  rewardeeId: number,
  params?: RewardHistoryControllerV1GetRewardHistoryParams,
) => [`/api/v1/history/${rewardeeType}/${rewardeeId}`, ...(params ? [params] : [])];

export type RewardHistoryControllerV1GetRewardHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof rewardHistoryControllerV1GetRewardHistory>>
>;
export type RewardHistoryControllerV1GetRewardHistoryQueryError = ErrorType<unknown>;

export const useRewardHistoryControllerV1GetRewardHistory = <
  TData = Awaited<ReturnType<typeof rewardHistoryControllerV1GetRewardHistory>>,
  TError = ErrorType<unknown>,
>(
  rewardeeType: string,
  rewardeeId: number,
  params?: RewardHistoryControllerV1GetRewardHistoryParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof rewardHistoryControllerV1GetRewardHistory>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getRewardHistoryControllerV1GetRewardHistoryQueryKey(rewardeeType, rewardeeId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rewardHistoryControllerV1GetRewardHistory>>
  > = ({ signal }) =>
    rewardHistoryControllerV1GetRewardHistory(
      rewardeeType,
      rewardeeId,
      params,
      requestOptions,
      signal,
    );

  const query = useQuery<
    Awaited<ReturnType<typeof rewardHistoryControllerV1GetRewardHistory>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(rewardeeType && rewardeeId),
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const rewardHistoryControllerV1DeleteRewardHistoryItem = (
  rewardeeType: string,
  rewardeeId: number,
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v1/history/${rewardeeType}/${rewardeeId}/${id}`, method: 'delete' },
    options,
  );
};

export type RewardHistoryControllerV1DeleteRewardHistoryItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof rewardHistoryControllerV1DeleteRewardHistoryItem>>
>;

export type RewardHistoryControllerV1DeleteRewardHistoryItemMutationError = ErrorType<unknown>;

export const useRewardHistoryControllerV1DeleteRewardHistoryItem = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rewardHistoryControllerV1DeleteRewardHistoryItem>>,
    TError,
    { rewardeeType: string; rewardeeId: number; id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rewardHistoryControllerV1DeleteRewardHistoryItem>>,
    { rewardeeType: string; rewardeeId: number; id: number }
  > = (props) => {
    const { rewardeeType, rewardeeId, id } = props ?? {};

    return rewardHistoryControllerV1DeleteRewardHistoryItem(
      rewardeeType,
      rewardeeId,
      id,
      requestOptions,
    );
  };

  return useMutation<
    Awaited<ReturnType<typeof rewardHistoryControllerV1DeleteRewardHistoryItem>>,
    TError,
    { rewardeeType: string; rewardeeId: number; id: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const gameDefinitionControllerV1GetGameDefinitions = (
  params: GameDefinitionControllerV1GetGameDefinitionsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GameDefinitionsResV1>(
    { url: `/api/v1/games-config/game-defintion`, method: 'get', params, signal },
    options,
  );
};

export const getGameDefinitionControllerV1GetGameDefinitionsQueryKey = (
  params: GameDefinitionControllerV1GetGameDefinitionsParams,
) => [`/api/v1/games-config/game-defintion`, ...(params ? [params] : [])];

export type GameDefinitionControllerV1GetGameDefinitionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof gameDefinitionControllerV1GetGameDefinitions>>
>;
export type GameDefinitionControllerV1GetGameDefinitionsQueryError = ErrorType<HttpExceptionSchema>;

export const useGameDefinitionControllerV1GetGameDefinitions = <
  TData = Awaited<ReturnType<typeof gameDefinitionControllerV1GetGameDefinitions>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params: GameDefinitionControllerV1GetGameDefinitionsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof gameDefinitionControllerV1GetGameDefinitions>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGameDefinitionControllerV1GetGameDefinitionsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof gameDefinitionControllerV1GetGameDefinitions>>
  > = ({ signal }) => gameDefinitionControllerV1GetGameDefinitions(params, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof gameDefinitionControllerV1GetGameDefinitions>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const gameDefinitionControllerV1CreateGameDefinition = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GameDefinitionResV1>(
    { url: `/api/v1/games-config/game-defintion`, method: 'post' },
    options,
  );
};

export type GameDefinitionControllerV1CreateGameDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof gameDefinitionControllerV1CreateGameDefinition>>
>;

export type GameDefinitionControllerV1CreateGameDefinitionMutationError =
  ErrorType<HttpExceptionSchema>;

export const useGameDefinitionControllerV1CreateGameDefinition = <
  TError = ErrorType<HttpExceptionSchema>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof gameDefinitionControllerV1CreateGameDefinition>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof gameDefinitionControllerV1CreateGameDefinition>>,
    TVariables
  > = () => {
    return gameDefinitionControllerV1CreateGameDefinition(requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof gameDefinitionControllerV1CreateGameDefinition>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const gameDefinitionControllerV1GetGameDefinition = (
  id: string,
  params: GameDefinitionControllerV1GetGameDefinitionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GameDefinitionResV1>(
    { url: `/api/v1/games-config/game-defintion/${id}`, method: 'get', params, signal },
    options,
  );
};

export const getGameDefinitionControllerV1GetGameDefinitionQueryKey = (
  id: string,
  params: GameDefinitionControllerV1GetGameDefinitionParams,
) => [`/api/v1/games-config/game-defintion/${id}`, ...(params ? [params] : [])];

export type GameDefinitionControllerV1GetGameDefinitionQueryResult = NonNullable<
  Awaited<ReturnType<typeof gameDefinitionControllerV1GetGameDefinition>>
>;
export type GameDefinitionControllerV1GetGameDefinitionQueryError = ErrorType<HttpExceptionSchema>;

export const useGameDefinitionControllerV1GetGameDefinition = <
  TData = Awaited<ReturnType<typeof gameDefinitionControllerV1GetGameDefinition>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  id: string,
  params: GameDefinitionControllerV1GetGameDefinitionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof gameDefinitionControllerV1GetGameDefinition>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGameDefinitionControllerV1GetGameDefinitionQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof gameDefinitionControllerV1GetGameDefinition>>
  > = ({ signal }) =>
    gameDefinitionControllerV1GetGameDefinition(id, params, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof gameDefinitionControllerV1GetGameDefinition>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const gameDefinitionControllerV1UpdateGameDefinition = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GameDefinitionResV1>(
    { url: `/api/v1/games-config/game-defintion/${id}`, method: 'patch' },
    options,
  );
};

export type GameDefinitionControllerV1UpdateGameDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof gameDefinitionControllerV1UpdateGameDefinition>>
>;

export type GameDefinitionControllerV1UpdateGameDefinitionMutationError =
  ErrorType<HttpExceptionSchema>;

export const useGameDefinitionControllerV1UpdateGameDefinition = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof gameDefinitionControllerV1UpdateGameDefinition>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof gameDefinitionControllerV1UpdateGameDefinition>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return gameDefinitionControllerV1UpdateGameDefinition(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof gameDefinitionControllerV1UpdateGameDefinition>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const gameModeDefinitionControllerV1GetGameModeDefinitions = (
  params?: GameModeDefinitionControllerV1GetGameModeDefinitionsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGameModeDefinitionsDtoV1>(
    { url: `/api/v1/games-config/game-mode-definitions`, method: 'get', params, signal },
    options,
  );
};

export const getGameModeDefinitionControllerV1GetGameModeDefinitionsQueryKey = (
  params?: GameModeDefinitionControllerV1GetGameModeDefinitionsParams,
) => [`/api/v1/games-config/game-mode-definitions`, ...(params ? [params] : [])];

export type GameModeDefinitionControllerV1GetGameModeDefinitionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof gameModeDefinitionControllerV1GetGameModeDefinitions>>
>;
export type GameModeDefinitionControllerV1GetGameModeDefinitionsQueryError =
  ErrorType<HttpExceptionSchema>;

export const useGameModeDefinitionControllerV1GetGameModeDefinitions = <
  TData = Awaited<ReturnType<typeof gameModeDefinitionControllerV1GetGameModeDefinitions>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params?: GameModeDefinitionControllerV1GetGameModeDefinitionsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof gameModeDefinitionControllerV1GetGameModeDefinitions>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGameModeDefinitionControllerV1GetGameModeDefinitionsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof gameModeDefinitionControllerV1GetGameModeDefinitions>>
  > = ({ signal }) =>
    gameModeDefinitionControllerV1GetGameModeDefinitions(params, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof gameModeDefinitionControllerV1GetGameModeDefinitions>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const gameModeDefinitionControllerV1CreateGameModeDefinition = (
  createGameModeDefinitionDtoV1: CreateGameModeDefinitionDtoV1,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetGameModeDefinitionDtoV1>(
    {
      url: `/api/v1/games-config/game-mode-definitions`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: createGameModeDefinitionDtoV1,
    },
    options,
  );
};

export type GameModeDefinitionControllerV1CreateGameModeDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof gameModeDefinitionControllerV1CreateGameModeDefinition>>
>;
export type GameModeDefinitionControllerV1CreateGameModeDefinitionMutationBody =
  CreateGameModeDefinitionDtoV1;
export type GameModeDefinitionControllerV1CreateGameModeDefinitionMutationError =
  ErrorType<HttpExceptionSchema>;

export const useGameModeDefinitionControllerV1CreateGameModeDefinition = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof gameModeDefinitionControllerV1CreateGameModeDefinition>>,
    TError,
    { data: CreateGameModeDefinitionDtoV1 },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof gameModeDefinitionControllerV1CreateGameModeDefinition>>,
    { data: CreateGameModeDefinitionDtoV1 }
  > = (props) => {
    const { data } = props ?? {};

    return gameModeDefinitionControllerV1CreateGameModeDefinition(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof gameModeDefinitionControllerV1CreateGameModeDefinition>>,
    TError,
    { data: CreateGameModeDefinitionDtoV1 },
    TContext
  >(mutationFn, mutationOptions);
};
export const gameModeDefinitionControllerV1GetGameModeDefinition = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGameModeDefinitionDtoV1>(
    { url: `/api/v1/games-config/game-mode-definitions/${id}`, method: 'get', signal },
    options,
  );
};

export const getGameModeDefinitionControllerV1GetGameModeDefinitionQueryKey = (id: string) => [
  `/api/v1/games-config/game-mode-definitions/${id}`,
];

export type GameModeDefinitionControllerV1GetGameModeDefinitionQueryResult = NonNullable<
  Awaited<ReturnType<typeof gameModeDefinitionControllerV1GetGameModeDefinition>>
>;
export type GameModeDefinitionControllerV1GetGameModeDefinitionQueryError =
  ErrorType<HttpExceptionSchema>;

export const useGameModeDefinitionControllerV1GetGameModeDefinition = <
  TData = Awaited<ReturnType<typeof gameModeDefinitionControllerV1GetGameModeDefinition>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof gameModeDefinitionControllerV1GetGameModeDefinition>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGameModeDefinitionControllerV1GetGameModeDefinitionQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof gameModeDefinitionControllerV1GetGameModeDefinition>>
  > = ({ signal }) =>
    gameModeDefinitionControllerV1GetGameModeDefinition(id, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof gameModeDefinitionControllerV1GetGameModeDefinition>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const gameModeDefinitionControllerV1UpdateGameModeDefinition = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetGameModeDefinitionDtoV1>(
    { url: `/api/v1/games-config/game-mode-definitions/${id}`, method: 'patch' },
    options,
  );
};

export type GameModeDefinitionControllerV1UpdateGameModeDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof gameModeDefinitionControllerV1UpdateGameModeDefinition>>
>;

export type GameModeDefinitionControllerV1UpdateGameModeDefinitionMutationError =
  ErrorType<HttpExceptionSchema>;

export const useGameModeDefinitionControllerV1UpdateGameModeDefinition = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof gameModeDefinitionControllerV1UpdateGameModeDefinition>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof gameModeDefinitionControllerV1UpdateGameModeDefinition>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return gameModeDefinitionControllerV1UpdateGameModeDefinition(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof gameModeDefinitionControllerV1UpdateGameModeDefinition>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const gameModeDefinitionControllerV1DeleteGameModeDefinition = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v1/games-config/game-mode-definitions/${id}`, method: 'delete' },
    options,
  );
};

export type GameModeDefinitionControllerV1DeleteGameModeDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof gameModeDefinitionControllerV1DeleteGameModeDefinition>>
>;

export type GameModeDefinitionControllerV1DeleteGameModeDefinitionMutationError =
  ErrorType<HttpExceptionSchema>;

export const useGameModeDefinitionControllerV1DeleteGameModeDefinition = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof gameModeDefinitionControllerV1DeleteGameModeDefinition>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof gameModeDefinitionControllerV1DeleteGameModeDefinition>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return gameModeDefinitionControllerV1DeleteGameModeDefinition(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof gameModeDefinitionControllerV1DeleteGameModeDefinition>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const appControllerHealthz = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>({ url: `/api`, method: 'get', signal }, options);
};

export const getAppControllerHealthzQueryKey = () => [`/api`];

export type AppControllerHealthzQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerHealthz>>
>;
export type AppControllerHealthzQueryError = ErrorType<unknown>;

export const useAppControllerHealthz = <
  TData = Awaited<ReturnType<typeof appControllerHealthz>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof appControllerHealthz>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerHealthzQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerHealthz>>> = ({ signal }) =>
    appControllerHealthz(requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof appControllerHealthz>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
