/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GetTimelineBlockRes,
  HttpExceptionSchema,
  TimelineBlocksControllerGetTimeBlocksParams,
  PostManyTimelineBlocksReq,
  PatchManyTimelineBlockReq,
  DeleteManyTimelineBlocksReq,
  PatchTimelineBlockReq,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const timelineBlocksControllerGetTimeBlocks = (
  params: TimelineBlocksControllerGetTimeBlocksParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetTimelineBlockRes[]>(
    { url: `/api/v1/fitness/timeline-blocks`, method: 'get', params, signal },
    options,
  );
};

export const getTimelineBlocksControllerGetTimeBlocksQueryKey = (
  params: TimelineBlocksControllerGetTimeBlocksParams,
) => [`/api/v1/fitness/timeline-blocks`, ...(params ? [params] : [])];

export type TimelineBlocksControllerGetTimeBlocksQueryResult = NonNullable<
  Awaited<ReturnType<typeof timelineBlocksControllerGetTimeBlocks>>
>;
export type TimelineBlocksControllerGetTimeBlocksQueryError = ErrorType<HttpExceptionSchema>;

export const useTimelineBlocksControllerGetTimeBlocks = <
  TData = Awaited<ReturnType<typeof timelineBlocksControllerGetTimeBlocks>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params: TimelineBlocksControllerGetTimeBlocksParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof timelineBlocksControllerGetTimeBlocks>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTimelineBlocksControllerGetTimeBlocksQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof timelineBlocksControllerGetTimeBlocks>>
  > = ({ signal }) => timelineBlocksControllerGetTimeBlocks(params, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof timelineBlocksControllerGetTimeBlocks>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const timelineBlocksControllerCreate = (
  postManyTimelineBlocksReq: PostManyTimelineBlocksReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetTimelineBlockRes[]>(
    {
      url: `/api/v1/fitness/timeline-blocks`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: postManyTimelineBlocksReq,
    },
    options,
  );
};

export type TimelineBlocksControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof timelineBlocksControllerCreate>>
>;
export type TimelineBlocksControllerCreateMutationBody = PostManyTimelineBlocksReq;
export type TimelineBlocksControllerCreateMutationError = ErrorType<HttpExceptionSchema>;

export const useTimelineBlocksControllerCreate = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timelineBlocksControllerCreate>>,
    TError,
    { data: PostManyTimelineBlocksReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timelineBlocksControllerCreate>>,
    { data: PostManyTimelineBlocksReq }
  > = (props) => {
    const { data } = props ?? {};

    return timelineBlocksControllerCreate(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof timelineBlocksControllerCreate>>,
    TError,
    { data: PostManyTimelineBlocksReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const timelineBlocksControllerPatchMany = (
  patchManyTimelineBlockReq: PatchManyTimelineBlockReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetTimelineBlockRes[]>(
    {
      url: `/api/v1/fitness/timeline-blocks`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: patchManyTimelineBlockReq,
    },
    options,
  );
};

export type TimelineBlocksControllerPatchManyMutationResult = NonNullable<
  Awaited<ReturnType<typeof timelineBlocksControllerPatchMany>>
>;
export type TimelineBlocksControllerPatchManyMutationBody = PatchManyTimelineBlockReq;
export type TimelineBlocksControllerPatchManyMutationError = ErrorType<HttpExceptionSchema>;

export const useTimelineBlocksControllerPatchMany = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timelineBlocksControllerPatchMany>>,
    TError,
    { data: PatchManyTimelineBlockReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timelineBlocksControllerPatchMany>>,
    { data: PatchManyTimelineBlockReq }
  > = (props) => {
    const { data } = props ?? {};

    return timelineBlocksControllerPatchMany(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof timelineBlocksControllerPatchMany>>,
    TError,
    { data: PatchManyTimelineBlockReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const timelineBlocksControllerRemoveMany = (
  deleteManyTimelineBlocksReq: DeleteManyTimelineBlocksReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetTimelineBlockRes>(
    {
      url: `/api/v1/fitness/timeline-blocks`,
      method: 'delete',
      headers: { 'Content-Type': 'application/json' },
      data: deleteManyTimelineBlocksReq,
    },
    options,
  );
};

export type TimelineBlocksControllerRemoveManyMutationResult = NonNullable<
  Awaited<ReturnType<typeof timelineBlocksControllerRemoveMany>>
>;
export type TimelineBlocksControllerRemoveManyMutationBody = DeleteManyTimelineBlocksReq;
export type TimelineBlocksControllerRemoveManyMutationError = ErrorType<HttpExceptionSchema>;

export const useTimelineBlocksControllerRemoveMany = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timelineBlocksControllerRemoveMany>>,
    TError,
    { data: DeleteManyTimelineBlocksReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timelineBlocksControllerRemoveMany>>,
    { data: DeleteManyTimelineBlocksReq }
  > = (props) => {
    const { data } = props ?? {};

    return timelineBlocksControllerRemoveMany(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof timelineBlocksControllerRemoveMany>>,
    TError,
    { data: DeleteManyTimelineBlocksReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const timelineBlocksControllerGetTimelineBlock = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetTimelineBlockRes>(
    { url: `/api/v1/fitness/timeline-blocks/${id}`, method: 'get', signal },
    options,
  );
};

export const getTimelineBlocksControllerGetTimelineBlockQueryKey = (id: number) => [
  `/api/v1/fitness/timeline-blocks/${id}`,
];

export type TimelineBlocksControllerGetTimelineBlockQueryResult = NonNullable<
  Awaited<ReturnType<typeof timelineBlocksControllerGetTimelineBlock>>
>;
export type TimelineBlocksControllerGetTimelineBlockQueryError = ErrorType<HttpExceptionSchema>;

export const useTimelineBlocksControllerGetTimelineBlock = <
  TData = Awaited<ReturnType<typeof timelineBlocksControllerGetTimelineBlock>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof timelineBlocksControllerGetTimelineBlock>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTimelineBlocksControllerGetTimelineBlockQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof timelineBlocksControllerGetTimelineBlock>>
  > = ({ signal }) => timelineBlocksControllerGetTimelineBlock(id, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof timelineBlocksControllerGetTimelineBlock>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const timelineBlocksControllerPatchOne = (
  id: number,
  patchTimelineBlockReq: PatchTimelineBlockReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetTimelineBlockRes>(
    {
      url: `/api/v1/fitness/timeline-blocks/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: patchTimelineBlockReq,
    },
    options,
  );
};

export type TimelineBlocksControllerPatchOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof timelineBlocksControllerPatchOne>>
>;
export type TimelineBlocksControllerPatchOneMutationBody = PatchTimelineBlockReq;
export type TimelineBlocksControllerPatchOneMutationError = ErrorType<HttpExceptionSchema>;

export const useTimelineBlocksControllerPatchOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timelineBlocksControllerPatchOne>>,
    TError,
    { id: number; data: PatchTimelineBlockReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timelineBlocksControllerPatchOne>>,
    { id: number; data: PatchTimelineBlockReq }
  > = (props) => {
    const { id, data } = props ?? {};

    return timelineBlocksControllerPatchOne(id, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof timelineBlocksControllerPatchOne>>,
    TError,
    { id: number; data: PatchTimelineBlockReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const timelineBlocksControllerRemoveOne = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetTimelineBlockRes>(
    { url: `/api/v1/fitness/timeline-blocks/${id}`, method: 'delete' },
    options,
  );
};

export type TimelineBlocksControllerRemoveOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof timelineBlocksControllerRemoveOne>>
>;

export type TimelineBlocksControllerRemoveOneMutationError = ErrorType<HttpExceptionSchema>;

export const useTimelineBlocksControllerRemoveOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timelineBlocksControllerRemoveOne>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timelineBlocksControllerRemoveOne>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return timelineBlocksControllerRemoveOne(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof timelineBlocksControllerRemoveOne>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
