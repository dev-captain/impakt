/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getTimelineBlocksControllerGetTimeBlocksMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    order: faker.datatype.number({ min: undefined, max: undefined }),
    type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
    group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
    Exercise: faker.helpers.arrayElement([
      {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        cvSupported: faker.datatype.boolean(),
        startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
        averageTime: faker.datatype.number({ min: undefined, max: undefined }),
        supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        point: faker.datatype.number({ min: undefined, max: undefined }),
      },
      undefined,
    ]),
    exerciseId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
      undefined,
    ]),
    TimelineBlockAttributes: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      type: faker.helpers.arrayElement([
        'TimeConstraint',
        'CountConstraint',
        'TimeGoal',
        'CountGoal',
      ]),
      value: faker.datatype.number({ min: undefined, max: undefined }),
      timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    })),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    xpMax: faker.datatype.number({ min: undefined, max: undefined }),
    godlMax: faker.datatype.number({ min: undefined, max: undefined }),
    coinMax: faker.datatype.number({ min: undefined, max: undefined }),
  }));

export const getTimelineBlocksControllerCreateMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    order: faker.datatype.number({ min: undefined, max: undefined }),
    type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
    group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
    Exercise: faker.helpers.arrayElement([
      {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        cvSupported: faker.datatype.boolean(),
        startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
        averageTime: faker.datatype.number({ min: undefined, max: undefined }),
        supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        point: faker.datatype.number({ min: undefined, max: undefined }),
      },
      undefined,
    ]),
    exerciseId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
      undefined,
    ]),
    TimelineBlockAttributes: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      type: faker.helpers.arrayElement([
        'TimeConstraint',
        'CountConstraint',
        'TimeGoal',
        'CountGoal',
      ]),
      value: faker.datatype.number({ min: undefined, max: undefined }),
      timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    })),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    xpMax: faker.datatype.number({ min: undefined, max: undefined }),
    godlMax: faker.datatype.number({ min: undefined, max: undefined }),
    coinMax: faker.datatype.number({ min: undefined, max: undefined }),
  }));

export const getTimelineBlocksControllerPatchManyMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    order: faker.datatype.number({ min: undefined, max: undefined }),
    type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
    group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
    Exercise: faker.helpers.arrayElement([
      {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        cvSupported: faker.datatype.boolean(),
        startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
        averageTime: faker.datatype.number({ min: undefined, max: undefined }),
        supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
        updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
        point: faker.datatype.number({ min: undefined, max: undefined }),
      },
      undefined,
    ]),
    exerciseId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
      undefined,
    ]),
    TimelineBlockAttributes: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      type: faker.helpers.arrayElement([
        'TimeConstraint',
        'CountConstraint',
        'TimeGoal',
        'CountGoal',
      ]),
      value: faker.datatype.number({ min: undefined, max: undefined }),
      timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    })),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    xpMax: faker.datatype.number({ min: undefined, max: undefined }),
    godlMax: faker.datatype.number({ min: undefined, max: undefined }),
    coinMax: faker.datatype.number({ min: undefined, max: undefined }),
  }));

export const getTimelineBlocksControllerRemoveManyMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  order: faker.datatype.number({ min: undefined, max: undefined }),
  type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
  group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
  Exercise: faker.helpers.arrayElement([
    {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      cvSupported: faker.datatype.boolean(),
      startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
      averageTime: faker.datatype.number({ min: undefined, max: undefined }),
      supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      point: faker.datatype.number({ min: undefined, max: undefined }),
    },
    undefined,
  ]),
  exerciseId: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  TimelineBlockAttributes: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    type: faker.helpers.arrayElement([
      'TimeConstraint',
      'CountConstraint',
      'TimeGoal',
      'CountGoal',
    ]),
    value: faker.datatype.number({ min: undefined, max: undefined }),
    timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  })),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  xpMax: faker.datatype.number({ min: undefined, max: undefined }),
  godlMax: faker.datatype.number({ min: undefined, max: undefined }),
  coinMax: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getTimelineBlocksControllerGetTimelineBlockMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  order: faker.datatype.number({ min: undefined, max: undefined }),
  type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
  group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
  Exercise: faker.helpers.arrayElement([
    {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      cvSupported: faker.datatype.boolean(),
      startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
      averageTime: faker.datatype.number({ min: undefined, max: undefined }),
      supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      point: faker.datatype.number({ min: undefined, max: undefined }),
    },
    undefined,
  ]),
  exerciseId: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  TimelineBlockAttributes: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    type: faker.helpers.arrayElement([
      'TimeConstraint',
      'CountConstraint',
      'TimeGoal',
      'CountGoal',
    ]),
    value: faker.datatype.number({ min: undefined, max: undefined }),
    timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  })),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  xpMax: faker.datatype.number({ min: undefined, max: undefined }),
  godlMax: faker.datatype.number({ min: undefined, max: undefined }),
  coinMax: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getTimelineBlocksControllerPatchOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  order: faker.datatype.number({ min: undefined, max: undefined }),
  type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
  group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
  Exercise: faker.helpers.arrayElement([
    {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      cvSupported: faker.datatype.boolean(),
      startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
      averageTime: faker.datatype.number({ min: undefined, max: undefined }),
      supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      point: faker.datatype.number({ min: undefined, max: undefined }),
    },
    undefined,
  ]),
  exerciseId: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  TimelineBlockAttributes: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    type: faker.helpers.arrayElement([
      'TimeConstraint',
      'CountConstraint',
      'TimeGoal',
      'CountGoal',
    ]),
    value: faker.datatype.number({ min: undefined, max: undefined }),
    timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  })),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  xpMax: faker.datatype.number({ min: undefined, max: undefined }),
  godlMax: faker.datatype.number({ min: undefined, max: undefined }),
  coinMax: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getTimelineBlocksControllerRemoveOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  order: faker.datatype.number({ min: undefined, max: undefined }),
  type: faker.helpers.arrayElement(['Rest', 'HoldPose', 'HIIT', 'Blitz', 'Rhythm']),
  group: faker.helpers.arrayElement(['WarmUp', 'Main', 'CoolDown']),
  Exercise: faker.helpers.arrayElement([
    {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      cvSupported: faker.datatype.boolean(),
      startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
      averageTime: faker.datatype.number({ min: undefined, max: undefined }),
      supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      point: faker.datatype.number({ min: undefined, max: undefined }),
    },
    undefined,
  ]),
  exerciseId: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  TimelineBlockAttributes: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    type: faker.helpers.arrayElement([
      'TimeConstraint',
      'CountConstraint',
      'TimeGoal',
      'CountGoal',
    ]),
    value: faker.datatype.number({ min: undefined, max: undefined }),
    timelineBlockId: faker.datatype.number({ min: undefined, max: undefined }),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  })),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  xpMax: faker.datatype.number({ min: undefined, max: undefined }),
  godlMax: faker.datatype.number({ min: undefined, max: undefined }),
  coinMax: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getTimelineBlocksMSW = () => [
  rest.get('*/api/v1/fitness/timeline-blocks', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getTimelineBlocksControllerGetTimeBlocksMock()),
    );
  }),
  rest.post('*/api/v1/fitness/timeline-blocks', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getTimelineBlocksControllerCreateMock()),
    );
  }),
  rest.patch('*/api/v1/fitness/timeline-blocks', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getTimelineBlocksControllerPatchManyMock()),
    );
  }),
  rest.delete('*/api/v1/fitness/timeline-blocks', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getTimelineBlocksControllerRemoveManyMock()),
    );
  }),
  rest.get('*/api/v1/fitness/timeline-blocks/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getTimelineBlocksControllerGetTimelineBlockMock()),
    );
  }),
  rest.patch('*/api/v1/fitness/timeline-blocks/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getTimelineBlocksControllerPatchOneMock()),
    );
  }),
  rest.delete('*/api/v1/fitness/timeline-blocks/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getTimelineBlocksControllerRemoveOneMock()),
    );
  }),
];
