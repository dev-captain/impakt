/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getRoutineSessionsControllerCreateMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  routineId: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  completedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  status: faker.helpers.arrayElement(['InProgress', 'Success', 'Failed', 'Skipped']),
  streak: {
    value: faker.datatype.number({ min: undefined, max: undefined }),
    streakedToday: faker.datatype.boolean(),
    completedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
  },
  reward: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    null,
  ]),
  godl: faker.datatype.number({ min: undefined, max: undefined }),
  userScore: faker.datatype.number({ min: undefined, max: undefined }),
  xp: faker.datatype.number({ min: undefined, max: undefined }),
  coin: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getRoutineSessionsControllerPatchOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  routineId: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  completedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  status: faker.helpers.arrayElement(['InProgress', 'Success', 'Failed', 'Skipped']),
  streak: {
    value: faker.datatype.number({ min: undefined, max: undefined }),
    streakedToday: faker.datatype.boolean(),
    completedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
  },
  reward: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    null,
  ]),
  godl: faker.datatype.number({ min: undefined, max: undefined }),
  userScore: faker.datatype.number({ min: undefined, max: undefined }),
  xp: faker.datatype.number({ min: undefined, max: undefined }),
  coin: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getRoutineSessionsMSW = () => [
  rest.post('*/api/v1/fitness/routine-sessions', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getRoutineSessionsControllerCreateMock()),
    );
  }),
  rest.patch('*/api/v1/fitness/routine-sessions/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getRoutineSessionsControllerPatchOneMock()),
    );
  }),
];
