/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GetGroupRequestResV2,
  HttpExceptionSchema,
  GetGroupRequestRes,
  PatchGroupRequestReq,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const groupsRequestControllerV1GetGroupRequests = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGroupRequestResV2[]>(
    { url: `/api/v1/groups/group-requests`, method: 'get', signal },
    options,
  );
};

export const getGroupsRequestControllerV1GetGroupRequestsQueryKey = () => [
  `/api/v1/groups/group-requests`,
];

export type GroupsRequestControllerV1GetGroupRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof groupsRequestControllerV1GetGroupRequests>>
>;
export type GroupsRequestControllerV1GetGroupRequestsQueryError = ErrorType<HttpExceptionSchema>;

export const useGroupsRequestControllerV1GetGroupRequests = <
  TData = Awaited<ReturnType<typeof groupsRequestControllerV1GetGroupRequests>>,
  TError = ErrorType<HttpExceptionSchema>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof groupsRequestControllerV1GetGroupRequests>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGroupsRequestControllerV1GetGroupRequestsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof groupsRequestControllerV1GetGroupRequests>>
  > = ({ signal }) => groupsRequestControllerV1GetGroupRequests(requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof groupsRequestControllerV1GetGroupRequests>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const groupsRequestControllerV1SendRequestToJoinGroup = (
  groupId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetGroupRequestRes>(
    { url: `/api/v1/groups/send-request/${groupId}`, method: 'post' },
    options,
  );
};

export type GroupsRequestControllerV1SendRequestToJoinGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupsRequestControllerV1SendRequestToJoinGroup>>
>;

export type GroupsRequestControllerV1SendRequestToJoinGroupMutationError =
  ErrorType<HttpExceptionSchema>;

export const useGroupsRequestControllerV1SendRequestToJoinGroup = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupsRequestControllerV1SendRequestToJoinGroup>>,
    TError,
    { groupId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupsRequestControllerV1SendRequestToJoinGroup>>,
    { groupId: number }
  > = (props) => {
    const { groupId } = props ?? {};

    return groupsRequestControllerV1SendRequestToJoinGroup(groupId, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof groupsRequestControllerV1SendRequestToJoinGroup>>,
    TError,
    { groupId: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const groupsRequestControllerV1AnswerRequestToJoinGroup = (
  groupId: number,
  patchGroupRequestReq: PatchGroupRequestReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetGroupRequestRes>(
    {
      url: `/api/v1/groups/answer-request/${groupId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: patchGroupRequestReq,
    },
    options,
  );
};

export type GroupsRequestControllerV1AnswerRequestToJoinGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupsRequestControllerV1AnswerRequestToJoinGroup>>
>;
export type GroupsRequestControllerV1AnswerRequestToJoinGroupMutationBody = PatchGroupRequestReq;
export type GroupsRequestControllerV1AnswerRequestToJoinGroupMutationError =
  ErrorType<HttpExceptionSchema>;

export const useGroupsRequestControllerV1AnswerRequestToJoinGroup = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupsRequestControllerV1AnswerRequestToJoinGroup>>,
    TError,
    { groupId: number; data: PatchGroupRequestReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupsRequestControllerV1AnswerRequestToJoinGroup>>,
    { groupId: number; data: PatchGroupRequestReq }
  > = (props) => {
    const { groupId, data } = props ?? {};

    return groupsRequestControllerV1AnswerRequestToJoinGroup(groupId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof groupsRequestControllerV1AnswerRequestToJoinGroup>>,
    TError,
    { groupId: number; data: PatchGroupRequestReq },
    TContext
  >(mutationFn, mutationOptions);
};
