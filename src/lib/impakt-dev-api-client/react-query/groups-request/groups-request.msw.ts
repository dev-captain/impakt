/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getGroupsRequestControllerV1GetGroupRequestsMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    status: faker.helpers.arrayElement(['Pending', 'Accepted', 'Declined', 'Cancelled']),
    requestorId: faker.datatype.number({ min: undefined, max: undefined }),
    requesteeId: faker.datatype.number({ min: undefined, max: undefined }),
    requestor: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      Roles: faker.helpers.arrayElement([
        'SuperAdmin',
        'Admin',
        'Creator',
        'Tester',
        'Ambassador',
        'Whitelist',
        'Partner',
      ]),
      email: faker.helpers.arrayElement([faker.random.word(), null]),
      username: faker.random.word(),
      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
      discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
      cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      primaryCommunityId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      Communities: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        description: faker.helpers.arrayElement([faker.random.word(), null]),
        ownerId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        createdAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        updatedAt: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split('.')[0]}Z`,
          null,
        ]),
        memberCount: faker.datatype.number({ min: undefined, max: undefined }),
      })),
      DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
      emailVerified: faker.datatype.boolean(),
    },
    Group: {
      id: faker.datatype.number({ min: undefined, max: undefined }),
      groupName: faker.random.word(),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        null,
      ]),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      conversationId: faker.datatype.number({ min: undefined, max: undefined }),
      currentCoverImageId: faker.datatype.number({ min: undefined, max: undefined }),
      memberCount: faker.datatype.number({ min: undefined, max: undefined }),
      calendarId: faker.datatype.number({ min: undefined, max: undefined }),
      private: faker.datatype.boolean(),
      deleted: faker.datatype.boolean(),
      CurrentCoverImage: { source: faker.random.word() },
    },
  }));

export const getGroupsRequestControllerV1SendRequestToJoinGroupMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  requesteeId: faker.datatype.number({ min: undefined, max: undefined }),
  requestorId: faker.datatype.number({ min: undefined, max: undefined }),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  status: faker.helpers.arrayElement(['Pending', 'Accepted', 'Declined', 'Cancelled']),
  purpose: faker.helpers.arrayElement(['Pending', 'Accepted', 'Declined', 'Cancelled']),
});

export const getGroupsRequestControllerV1AnswerRequestToJoinGroupMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  requesteeId: faker.datatype.number({ min: undefined, max: undefined }),
  requestorId: faker.datatype.number({ min: undefined, max: undefined }),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  status: faker.helpers.arrayElement(['Pending', 'Accepted', 'Declined', 'Cancelled']),
  purpose: faker.helpers.arrayElement(['Pending', 'Accepted', 'Declined', 'Cancelled']),
});

export const getGroupsRequestMSW = () => [
  rest.get('*/api/v1/groups/group-requests/:groupId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGroupsRequestControllerV1GetGroupRequestsMock()),
    );
  }),
  rest.post('*/api/v1/groups/send-request/:groupId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGroupsRequestControllerV1SendRequestToJoinGroupMock()),
    );
  }),
  rest.patch('*/api/v1/groups/answer-request/:groupId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGroupsRequestControllerV1AnswerRequestToJoinGroupMock()),
    );
  }),
];
