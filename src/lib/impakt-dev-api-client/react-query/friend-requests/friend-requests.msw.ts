/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getFriendRequestsControllerFindAllMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    fromUserId: faker.datatype.number({ min: undefined, max: undefined }),
    from: faker.helpers.arrayElement([{}, undefined]),
    to: faker.helpers.arrayElement([{}, undefined]),
    toUserId: faker.datatype.number({ min: undefined, max: undefined }),
    status: faker.helpers.arrayElement(['Pending', 'Accepted', 'Declined']),
  }));

export const getFriendRequestsControllerCreateOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  fromUserId: faker.datatype.number({ min: undefined, max: undefined }),
  from: faker.helpers.arrayElement([{}, undefined]),
  to: faker.helpers.arrayElement([{}, undefined]),
  toUserId: faker.datatype.number({ min: undefined, max: undefined }),
  status: faker.helpers.arrayElement(['Pending', 'Accepted', 'Declined']),
});

export const getFriendRequestsControllerPatchOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  fromUserId: faker.datatype.number({ min: undefined, max: undefined }),
  from: faker.helpers.arrayElement([{}, undefined]),
  to: faker.helpers.arrayElement([{}, undefined]),
  toUserId: faker.datatype.number({ min: undefined, max: undefined }),
  status: faker.helpers.arrayElement(['Pending', 'Accepted', 'Declined']),
});

export const getFriendRequestsControllerRemoveOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  fromUserId: faker.datatype.number({ min: undefined, max: undefined }),
  from: faker.helpers.arrayElement([{}, undefined]),
  to: faker.helpers.arrayElement([{}, undefined]),
  toUserId: faker.datatype.number({ min: undefined, max: undefined }),
  status: faker.helpers.arrayElement(['Pending', 'Accepted', 'Declined']),
});

export const getFriendRequestsMSW = () => [
  rest.get('*/api/v1/friends/requests', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getFriendRequestsControllerFindAllMock()),
    );
  }),
  rest.post('*/api/v1/friends/requests/:userId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getFriendRequestsControllerCreateOneMock()),
    );
  }),
  rest.patch('*/api/v1/friends/requests/:requestId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getFriendRequestsControllerPatchOneMock()),
    );
  }),
  rest.delete('*/api/v1/friends/requests/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getFriendRequestsControllerRemoveOneMock()),
    );
  }),
];
