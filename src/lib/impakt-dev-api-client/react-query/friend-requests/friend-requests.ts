/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GetFriendRequestRes,
  HttpExceptionSchema,
  FriendRequestsControllerFindAllParams,
  PatchFriendRequestReq,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const friendRequestsControllerFindAll = (
  params?: FriendRequestsControllerFindAllParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetFriendRequestRes[]>(
    { url: `/api/v1/friends/requests`, method: 'get', params, signal },
    options,
  );
};

export const getFriendRequestsControllerFindAllQueryKey = (
  params?: FriendRequestsControllerFindAllParams,
) => [`/api/v1/friends/requests`, ...(params ? [params] : [])];

export type FriendRequestsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof friendRequestsControllerFindAll>>
>;
export type FriendRequestsControllerFindAllQueryError = ErrorType<HttpExceptionSchema>;

export const useFriendRequestsControllerFindAll = <
  TData = Awaited<ReturnType<typeof friendRequestsControllerFindAll>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params?: FriendRequestsControllerFindAllParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof friendRequestsControllerFindAll>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFriendRequestsControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof friendRequestsControllerFindAll>>> = ({
    signal,
  }) => friendRequestsControllerFindAll(params, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof friendRequestsControllerFindAll>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const friendRequestsControllerCreateOne = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetFriendRequestRes>(
    { url: `/api/v1/friends/requests/${userId}`, method: 'post' },
    options,
  );
};

export type FriendRequestsControllerCreateOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof friendRequestsControllerCreateOne>>
>;

export type FriendRequestsControllerCreateOneMutationError = ErrorType<HttpExceptionSchema>;

export const useFriendRequestsControllerCreateOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof friendRequestsControllerCreateOne>>,
    TError,
    { userId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof friendRequestsControllerCreateOne>>,
    { userId: number }
  > = (props) => {
    const { userId } = props ?? {};

    return friendRequestsControllerCreateOne(userId, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof friendRequestsControllerCreateOne>>,
    TError,
    { userId: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const friendRequestsControllerPatchOne = (
  requestId: number,
  patchFriendRequestReq: PatchFriendRequestReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetFriendRequestRes>(
    {
      url: `/api/v1/friends/requests/${requestId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: patchFriendRequestReq,
    },
    options,
  );
};

export type FriendRequestsControllerPatchOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof friendRequestsControllerPatchOne>>
>;
export type FriendRequestsControllerPatchOneMutationBody = PatchFriendRequestReq;
export type FriendRequestsControllerPatchOneMutationError = ErrorType<HttpExceptionSchema>;

export const useFriendRequestsControllerPatchOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof friendRequestsControllerPatchOne>>,
    TError,
    { requestId: number; data: PatchFriendRequestReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof friendRequestsControllerPatchOne>>,
    { requestId: number; data: PatchFriendRequestReq }
  > = (props) => {
    const { requestId, data } = props ?? {};

    return friendRequestsControllerPatchOne(requestId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof friendRequestsControllerPatchOne>>,
    TError,
    { requestId: number; data: PatchFriendRequestReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const friendRequestsControllerRemoveOne = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetFriendRequestRes>(
    { url: `/api/v1/friends/requests/${id}`, method: 'delete' },
    options,
  );
};

export type FriendRequestsControllerRemoveOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof friendRequestsControllerRemoveOne>>
>;

export type FriendRequestsControllerRemoveOneMutationError = ErrorType<HttpExceptionSchema>;

export const useFriendRequestsControllerRemoveOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof friendRequestsControllerRemoveOne>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof friendRequestsControllerRemoveOne>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return friendRequestsControllerRemoveOne(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof friendRequestsControllerRemoveOne>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
