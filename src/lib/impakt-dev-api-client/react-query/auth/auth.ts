/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GetUserRes,
  HttpExceptionSchema,
  LoginReq,
  RefreshReq,
  PasswordResetReq,
  RequestPasswordResetReq,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const authControllerLogin = (
  loginReq: LoginReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetUserRes>(
    {
      url: `/api/v1/iam/auth/signin`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: loginReq,
    },
    options,
  );
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = LoginReq;
export type AuthControllerLoginMutationError = ErrorType<HttpExceptionSchema>;

export const useAuthControllerLogin = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: LoginReq }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogin(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const authControllerLogout = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/api/v1/iam/auth/signout`, method: 'post' }, options);
};

export type AuthControllerLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogout>>
>;

export type AuthControllerLogoutMutationError = ErrorType<HttpExceptionSchema>;

export const useAuthControllerLogout = <
  TError = ErrorType<HttpExceptionSchema>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TVariables
  > = () => {
    return authControllerLogout(requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const authControllerSignAccessToken = (
  refreshReq: RefreshReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetUserRes>(
    {
      url: `/api/v1/iam/auth/refresh`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: refreshReq,
    },
    options,
  );
};

export type AuthControllerSignAccessTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignAccessToken>>
>;
export type AuthControllerSignAccessTokenMutationBody = RefreshReq;
export type AuthControllerSignAccessTokenMutationError = ErrorType<HttpExceptionSchema>;

export const useAuthControllerSignAccessToken = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignAccessToken>>,
    TError,
    { data: RefreshReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSignAccessToken>>,
    { data: RefreshReq }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerSignAccessToken(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof authControllerSignAccessToken>>,
    TError,
    { data: RefreshReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const authControllerRequestVerification = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v1/iam/auth/verification/request`, method: 'post' },
    options,
  );
};

export type AuthControllerRequestVerificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRequestVerification>>
>;

export type AuthControllerRequestVerificationMutationError = ErrorType<HttpExceptionSchema>;

export const useAuthControllerRequestVerification = <
  TError = ErrorType<HttpExceptionSchema>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRequestVerification>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRequestVerification>>,
    TVariables
  > = () => {
    return authControllerRequestVerification(requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof authControllerRequestVerification>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const authControllerVerifyEmail = (
  header: string,
  payload: string,
  signature: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    {
      url: `/api/v1/iam/auth/verification/${header}.${payload}.${signature}`,
      method: 'get',
      signal,
    },
    options,
  );
};

export const getAuthControllerVerifyEmailQueryKey = (
  header: string,
  payload: string,
  signature: string,
) => [`/api/v1/iam/auth/verification/${header}.${payload}.${signature}`];

export type AuthControllerVerifyEmailQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerVerifyEmail>>
>;
export type AuthControllerVerifyEmailQueryError = ErrorType<HttpExceptionSchema>;

export const useAuthControllerVerifyEmail = <
  TData = Awaited<ReturnType<typeof authControllerVerifyEmail>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  header: string,
  payload: string,
  signature: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof authControllerVerifyEmail>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerVerifyEmailQueryKey(header, payload, signature);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerVerifyEmail>>> = ({
    signal,
  }) => authControllerVerifyEmail(header, payload, signature, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof authControllerVerifyEmail>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!(header && payload && signature), ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const authControllerResetPassword = (
  header: string,
  payload: string,
  signature: string,
  passwordResetReq: PasswordResetReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/v1/iam/auth/passwordReset/${header}.${payload}.${signature}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: passwordResetReq,
    },
    options,
  );
};

export type AuthControllerResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerResetPassword>>
>;
export type AuthControllerResetPasswordMutationBody = PasswordResetReq;
export type AuthControllerResetPasswordMutationError = ErrorType<HttpExceptionSchema>;

export const useAuthControllerResetPassword = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerResetPassword>>,
    TError,
    { header: string; payload: string; signature: string; data: PasswordResetReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerResetPassword>>,
    { header: string; payload: string; signature: string; data: PasswordResetReq }
  > = (props) => {
    const { header, payload, signature, data } = props ?? {};

    return authControllerResetPassword(header, payload, signature, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof authControllerResetPassword>>,
    TError,
    { header: string; payload: string; signature: string; data: PasswordResetReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const authControllerRequestPasswordReset = (
  requestPasswordResetReq: RequestPasswordResetReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/v1/iam/auth/passwordReset`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestPasswordResetReq,
    },
    options,
  );
};

export type AuthControllerRequestPasswordResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRequestPasswordReset>>
>;
export type AuthControllerRequestPasswordResetMutationBody = RequestPasswordResetReq;
export type AuthControllerRequestPasswordResetMutationError = ErrorType<HttpExceptionSchema>;

export const useAuthControllerRequestPasswordReset = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRequestPasswordReset>>,
    TError,
    { data: RequestPasswordResetReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRequestPasswordReset>>,
    { data: RequestPasswordResetReq }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerRequestPasswordReset(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof authControllerRequestPasswordReset>>,
    TError,
    { data: RequestPasswordResetReq },
    TContext
  >(mutationFn, mutationOptions);
};
