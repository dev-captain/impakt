/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  UserStreak,
  HttpExceptionSchema,
  StatsDaysActive,
  StatsAverageActivity,
  ExerciseStatsRes,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const fitnessStatsControllerGetCurrentStreak = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserStreak>(
    { url: `/api/v1/stats/fitness/${userId}/streak/current`, method: 'get', signal },
    options,
  );
};

export const getFitnessStatsControllerGetCurrentStreakQueryKey = (userId: number) => [
  `/api/v1/stats/fitness/${userId}/streak/current`,
];

export type FitnessStatsControllerGetCurrentStreakQueryResult = NonNullable<
  Awaited<ReturnType<typeof fitnessStatsControllerGetCurrentStreak>>
>;
export type FitnessStatsControllerGetCurrentStreakQueryError = ErrorType<HttpExceptionSchema>;

export const useFitnessStatsControllerGetCurrentStreak = <
  TData = Awaited<ReturnType<typeof fitnessStatsControllerGetCurrentStreak>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof fitnessStatsControllerGetCurrentStreak>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFitnessStatsControllerGetCurrentStreakQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fitnessStatsControllerGetCurrentStreak>>
  > = ({ signal }) => fitnessStatsControllerGetCurrentStreak(userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof fitnessStatsControllerGetCurrentStreak>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!userId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const fitnessStatsControllerGetLongestStreak = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserStreak>(
    { url: `/api/v1/stats/fitness/${userId}/streak/longest`, method: 'get', signal },
    options,
  );
};

export const getFitnessStatsControllerGetLongestStreakQueryKey = (userId: number) => [
  `/api/v1/stats/fitness/${userId}/streak/longest`,
];

export type FitnessStatsControllerGetLongestStreakQueryResult = NonNullable<
  Awaited<ReturnType<typeof fitnessStatsControllerGetLongestStreak>>
>;
export type FitnessStatsControllerGetLongestStreakQueryError = ErrorType<HttpExceptionSchema>;

export const useFitnessStatsControllerGetLongestStreak = <
  TData = Awaited<ReturnType<typeof fitnessStatsControllerGetLongestStreak>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof fitnessStatsControllerGetLongestStreak>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFitnessStatsControllerGetLongestStreakQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fitnessStatsControllerGetLongestStreak>>
  > = ({ signal }) => fitnessStatsControllerGetLongestStreak(userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof fitnessStatsControllerGetLongestStreak>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!userId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const fitnessStatsControllerGetDaysActive = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<StatsDaysActive>(
    { url: `/api/v1/stats/fitness/${userId}/days-active`, method: 'get', signal },
    options,
  );
};

export const getFitnessStatsControllerGetDaysActiveQueryKey = (userId: number) => [
  `/api/v1/stats/fitness/${userId}/days-active`,
];

export type FitnessStatsControllerGetDaysActiveQueryResult = NonNullable<
  Awaited<ReturnType<typeof fitnessStatsControllerGetDaysActive>>
>;
export type FitnessStatsControllerGetDaysActiveQueryError = ErrorType<HttpExceptionSchema>;

export const useFitnessStatsControllerGetDaysActive = <
  TData = Awaited<ReturnType<typeof fitnessStatsControllerGetDaysActive>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof fitnessStatsControllerGetDaysActive>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFitnessStatsControllerGetDaysActiveQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fitnessStatsControllerGetDaysActive>>> = ({
    signal,
  }) => fitnessStatsControllerGetDaysActive(userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof fitnessStatsControllerGetDaysActive>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!userId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const fitnessStatsControllerGetAverageActiveTimePerDay = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<StatsAverageActivity>(
    { url: `/api/v1/stats/fitness/${userId}/average-activity`, method: 'get', signal },
    options,
  );
};

export const getFitnessStatsControllerGetAverageActiveTimePerDayQueryKey = (userId: number) => [
  `/api/v1/stats/fitness/${userId}/average-activity`,
];

export type FitnessStatsControllerGetAverageActiveTimePerDayQueryResult = NonNullable<
  Awaited<ReturnType<typeof fitnessStatsControllerGetAverageActiveTimePerDay>>
>;
export type FitnessStatsControllerGetAverageActiveTimePerDayQueryError =
  ErrorType<HttpExceptionSchema>;

export const useFitnessStatsControllerGetAverageActiveTimePerDay = <
  TData = Awaited<ReturnType<typeof fitnessStatsControllerGetAverageActiveTimePerDay>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof fitnessStatsControllerGetAverageActiveTimePerDay>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFitnessStatsControllerGetAverageActiveTimePerDayQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fitnessStatsControllerGetAverageActiveTimePerDay>>
  > = ({ signal }) =>
    fitnessStatsControllerGetAverageActiveTimePerDay(userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof fitnessStatsControllerGetAverageActiveTimePerDay>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!userId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const fitnessStatsControllerGetExerciseStats = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ExerciseStatsRes>(
    { url: `/api/v1/stats/fitness/${userId}/exercise`, method: 'get', signal },
    options,
  );
};

export const getFitnessStatsControllerGetExerciseStatsQueryKey = (userId: number) => [
  `/api/v1/stats/fitness/${userId}/exercise`,
];

export type FitnessStatsControllerGetExerciseStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof fitnessStatsControllerGetExerciseStats>>
>;
export type FitnessStatsControllerGetExerciseStatsQueryError = ErrorType<HttpExceptionSchema>;

export const useFitnessStatsControllerGetExerciseStats = <
  TData = Awaited<ReturnType<typeof fitnessStatsControllerGetExerciseStats>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof fitnessStatsControllerGetExerciseStats>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFitnessStatsControllerGetExerciseStatsQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fitnessStatsControllerGetExerciseStats>>
  > = ({ signal }) => fitnessStatsControllerGetExerciseStats(userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof fitnessStatsControllerGetExerciseStats>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!userId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};
