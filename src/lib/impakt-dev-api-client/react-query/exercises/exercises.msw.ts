/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getExercisesControllerV1GetExercisesMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    name: faker.random.word(),
    cvSupported: faker.datatype.boolean(),
    startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
    averageTime: faker.datatype.number({ min: undefined, max: undefined }),
    supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    point: faker.datatype.number({ min: undefined, max: undefined }),
  }));

export const getExercisesControllerV1CreateMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  name: faker.random.word(),
  cvSupported: faker.datatype.boolean(),
  startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
  averageTime: faker.datatype.number({ min: undefined, max: undefined }),
  supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  point: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getExercisesControllerV1GetExerciseMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  name: faker.random.word(),
  cvSupported: faker.datatype.boolean(),
  startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
  averageTime: faker.datatype.number({ min: undefined, max: undefined }),
  supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  point: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getExercisesControllerV1PatchOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  name: faker.random.word(),
  cvSupported: faker.datatype.boolean(),
  startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
  averageTime: faker.datatype.number({ min: undefined, max: undefined }),
  supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  point: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getExercisesControllerV1RemoveOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  name: faker.random.word(),
  cvSupported: faker.datatype.boolean(),
  startPosition: faker.helpers.arrayElement(['Standing', 'Prone', 'Supine']),
  averageTime: faker.datatype.number({ min: undefined, max: undefined }),
  supportedTypes: faker.helpers.arrayElement(['Hold', 'Count']),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  point: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getExercisesMSW = () => [
  rest.get('*/api/v1/fitness/exercises', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getExercisesControllerV1GetExercisesMock()),
    );
  }),
  rest.post('*/api/v1/fitness/exercises', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getExercisesControllerV1CreateMock()),
    );
  }),
  rest.get('*/api/v1/fitness/exercises/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getExercisesControllerV1GetExerciseMock()),
    );
  }),
  rest.patch('*/api/v1/fitness/exercises/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getExercisesControllerV1PatchOneMock()),
    );
  }),
  rest.delete('*/api/v1/fitness/exercises/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getExercisesControllerV1RemoveOneMock()),
    );
  }),
];
