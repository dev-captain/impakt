/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GetExerciseResV1,
  HttpExceptionSchema,
  ExercisesControllerV1GetExercisesParams,
  PostExerciseReqV1,
  PatchExerciseReqV1,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const exercisesControllerV1GetExercises = (
  params?: ExercisesControllerV1GetExercisesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetExerciseResV1[]>(
    { url: `/api/v1/fitness/exercises`, method: 'get', params, signal },
    options,
  );
};

export const getExercisesControllerV1GetExercisesQueryKey = (
  params?: ExercisesControllerV1GetExercisesParams,
) => [`/api/v1/fitness/exercises`, ...(params ? [params] : [])];

export type ExercisesControllerV1GetExercisesQueryResult = NonNullable<
  Awaited<ReturnType<typeof exercisesControllerV1GetExercises>>
>;
export type ExercisesControllerV1GetExercisesQueryError = ErrorType<HttpExceptionSchema>;

export const useExercisesControllerV1GetExercises = <
  TData = Awaited<ReturnType<typeof exercisesControllerV1GetExercises>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params?: ExercisesControllerV1GetExercisesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof exercisesControllerV1GetExercises>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getExercisesControllerV1GetExercisesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof exercisesControllerV1GetExercises>>> = ({
    signal,
  }) => exercisesControllerV1GetExercises(params, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof exercisesControllerV1GetExercises>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const exercisesControllerV1Create = (
  postExerciseReqV1: PostExerciseReqV1,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetExerciseResV1>(
    {
      url: `/api/v1/fitness/exercises`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: postExerciseReqV1,
    },
    options,
  );
};

export type ExercisesControllerV1CreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof exercisesControllerV1Create>>
>;
export type ExercisesControllerV1CreateMutationBody = PostExerciseReqV1;
export type ExercisesControllerV1CreateMutationError = ErrorType<HttpExceptionSchema>;

export const useExercisesControllerV1Create = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof exercisesControllerV1Create>>,
    TError,
    { data: PostExerciseReqV1 },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof exercisesControllerV1Create>>,
    { data: PostExerciseReqV1 }
  > = (props) => {
    const { data } = props ?? {};

    return exercisesControllerV1Create(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof exercisesControllerV1Create>>,
    TError,
    { data: PostExerciseReqV1 },
    TContext
  >(mutationFn, mutationOptions);
};
export const exercisesControllerV1GetExercise = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetExerciseResV1>(
    { url: `/api/v1/fitness/exercises/${id}`, method: 'get', signal },
    options,
  );
};

export const getExercisesControllerV1GetExerciseQueryKey = (id: number) => [
  `/api/v1/fitness/exercises/${id}`,
];

export type ExercisesControllerV1GetExerciseQueryResult = NonNullable<
  Awaited<ReturnType<typeof exercisesControllerV1GetExercise>>
>;
export type ExercisesControllerV1GetExerciseQueryError = ErrorType<HttpExceptionSchema>;

export const useExercisesControllerV1GetExercise = <
  TData = Awaited<ReturnType<typeof exercisesControllerV1GetExercise>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof exercisesControllerV1GetExercise>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getExercisesControllerV1GetExerciseQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof exercisesControllerV1GetExercise>>> = ({
    signal,
  }) => exercisesControllerV1GetExercise(id, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof exercisesControllerV1GetExercise>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const exercisesControllerV1PatchOne = (
  id: number,
  patchExerciseReqV1: PatchExerciseReqV1,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetExerciseResV1>(
    {
      url: `/api/v1/fitness/exercises/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: patchExerciseReqV1,
    },
    options,
  );
};

export type ExercisesControllerV1PatchOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof exercisesControllerV1PatchOne>>
>;
export type ExercisesControllerV1PatchOneMutationBody = PatchExerciseReqV1;
export type ExercisesControllerV1PatchOneMutationError = ErrorType<HttpExceptionSchema>;

export const useExercisesControllerV1PatchOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof exercisesControllerV1PatchOne>>,
    TError,
    { id: number; data: PatchExerciseReqV1 },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof exercisesControllerV1PatchOne>>,
    { id: number; data: PatchExerciseReqV1 }
  > = (props) => {
    const { id, data } = props ?? {};

    return exercisesControllerV1PatchOne(id, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof exercisesControllerV1PatchOne>>,
    TError,
    { id: number; data: PatchExerciseReqV1 },
    TContext
  >(mutationFn, mutationOptions);
};
export const exercisesControllerV1RemoveOne = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetExerciseResV1>(
    { url: `/api/v1/fitness/exercises/${id}`, method: 'delete' },
    options,
  );
};

export type ExercisesControllerV1RemoveOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof exercisesControllerV1RemoveOne>>
>;

export type ExercisesControllerV1RemoveOneMutationError = ErrorType<HttpExceptionSchema>;

export const useExercisesControllerV1RemoveOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof exercisesControllerV1RemoveOne>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof exercisesControllerV1RemoveOne>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return exercisesControllerV1RemoveOne(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof exercisesControllerV1RemoveOne>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
