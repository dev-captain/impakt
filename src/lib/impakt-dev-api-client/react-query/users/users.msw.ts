/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getUserControllerIsWhitelistedMock = () => ({
  isWhitelisted: faker.datatype.boolean(),
  isDiscordConnected: faker.datatype.boolean(),
  isTwitterConnected: faker.datatype.boolean(),
  isWalletConnected: faker.datatype.boolean(),
});

export const getUserControllerGetUsersMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    Roles: faker.helpers.arrayElement([
      'SuperAdmin',
      'Admin',
      'Creator',
      'Tester',
      'Ambassador',
      'Whitelist',
      'Partner',
    ]),
    email: faker.helpers.arrayElement([faker.random.word(), null]),
    username: faker.random.word(),
    firstName: faker.helpers.arrayElement([faker.random.word(), null]),
    lastName: faker.helpers.arrayElement([faker.random.word(), null]),
    discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
    cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    primaryCommunityId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    Communities: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      description: faker.helpers.arrayElement([faker.random.word(), null]),
      ownerId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        null,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        null,
      ]),
      memberCount: faker.datatype.number({ min: undefined, max: undefined }),
    })),
    DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
    emailVerified: faker.datatype.boolean(),
  }));

export const getUserControllerCreateMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  Roles: faker.helpers.arrayElement([
    'SuperAdmin',
    'Admin',
    'Creator',
    'Tester',
    'Ambassador',
    'Whitelist',
    'Partner',
  ]),
  email: faker.helpers.arrayElement([faker.random.word(), null]),
  username: faker.random.word(),
  firstName: faker.helpers.arrayElement([faker.random.word(), null]),
  lastName: faker.helpers.arrayElement([faker.random.word(), null]),
  discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
  cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  primaryCommunityId: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    null,
  ]),
  Communities: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    name: faker.random.word(),
    description: faker.helpers.arrayElement([faker.random.word(), null]),
    ownerId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    memberCount: faker.datatype.number({ min: undefined, max: undefined }),
  })),
  DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
  emailVerified: faker.datatype.boolean(),
});

export const getUserControllerGetUserMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  Roles: faker.helpers.arrayElement([
    'SuperAdmin',
    'Admin',
    'Creator',
    'Tester',
    'Ambassador',
    'Whitelist',
    'Partner',
  ]),
  email: faker.helpers.arrayElement([faker.random.word(), null]),
  username: faker.random.word(),
  firstName: faker.helpers.arrayElement([faker.random.word(), null]),
  lastName: faker.helpers.arrayElement([faker.random.word(), null]),
  discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
  cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  primaryCommunityId: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    null,
  ]),
  Communities: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    name: faker.random.word(),
    description: faker.helpers.arrayElement([faker.random.word(), null]),
    ownerId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    memberCount: faker.datatype.number({ min: undefined, max: undefined }),
  })),
  DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
  emailVerified: faker.datatype.boolean(),
});

export const getUserControllerPatchOneMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  Roles: faker.helpers.arrayElement([
    'SuperAdmin',
    'Admin',
    'Creator',
    'Tester',
    'Ambassador',
    'Whitelist',
    'Partner',
  ]),
  email: faker.helpers.arrayElement([faker.random.word(), null]),
  username: faker.random.word(),
  firstName: faker.helpers.arrayElement([faker.random.word(), null]),
  lastName: faker.helpers.arrayElement([faker.random.word(), null]),
  discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
  cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  primaryCommunityId: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    null,
  ]),
  Communities: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    name: faker.random.word(),
    description: faker.helpers.arrayElement([faker.random.word(), null]),
    ownerId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    memberCount: faker.datatype.number({ min: undefined, max: undefined }),
  })),
  DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
  emailVerified: faker.datatype.boolean(),
});

export const getUserControllerGetUserInfoMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  Roles: faker.helpers.arrayElement([
    'SuperAdmin',
    'Admin',
    'Creator',
    'Tester',
    'Ambassador',
    'Whitelist',
    'Partner',
  ]),
  email: faker.helpers.arrayElement([faker.random.word(), null]),
  username: faker.random.word(),
  firstName: faker.helpers.arrayElement([faker.random.word(), null]),
  lastName: faker.helpers.arrayElement([faker.random.word(), null]),
  discordHandle: faker.helpers.arrayElement([faker.random.word(), null]),
  cryptoWallet: faker.helpers.arrayElement([faker.random.word(), null]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  primaryCommunityId: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    null,
  ]),
  Communities: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    name: faker.random.word(),
    description: faker.helpers.arrayElement([faker.random.word(), null]),
    ownerId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    memberCount: faker.datatype.number({ min: undefined, max: undefined }),
  })),
  DiscourseRedirectUrl: faker.helpers.arrayElement([faker.random.word(), null]),
  emailVerified: faker.datatype.boolean(),
});

export const getUsersMSW = () => [
  rest.get('*/api/v1/iam/user/is-whitelisted', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUserControllerIsWhitelistedMock()),
    );
  }),
  rest.get('*/api/v1/iam/user', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUserControllerGetUsersMock()),
    );
  }),
  rest.post('*/api/v1/iam/user', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUserControllerCreateMock()),
    );
  }),
  rest.get('*/api/v1/iam/user/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUserControllerGetUserMock()),
    );
  }),
  rest.patch('*/api/v1/iam/user/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUserControllerPatchOneMock()),
    );
  }),
  rest.get('*/api/v1/iam/user/user-info', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUserControllerGetUserInfoMock()),
    );
  }),
];
