/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getCalendarControllerGetCalendarMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  Events: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      visible: faker.datatype.boolean(),
      data: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        title: faker.random.word(),
        description: faker.helpers.arrayElement([faker.random.word(), null]),
        creatorId: faker.datatype.number({ min: undefined, max: undefined }),
        parentEventId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        assocId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      },
      schedule: {
        start: `${faker.date.past().toISOString().split('.')[0]}Z`,
        end: `${faker.date.past().toISOString().split('.')[0]}Z`,
        maxOccurrences: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        cancel: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => `${faker.date.past().toISOString().split('.')[0]}Z`),
        exclude: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => `${faker.date.past().toISOString().split('.')[0]}Z`),
        dayOfWeek: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.datatype.number({ min: undefined, max: undefined })),
      },
    }),
  ),
  type: faker.helpers.arrayElement(['Personal', 'Group']),
});

export const getCalendarControllerGetCalendarListViewMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  Events: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.datatype.number({ min: undefined, max: undefined }),
      visible: faker.datatype.boolean(),
      data: {
        id: faker.datatype.number({ min: undefined, max: undefined }),
        title: faker.random.word(),
        description: faker.helpers.arrayElement([faker.random.word(), null]),
        creatorId: faker.datatype.number({ min: undefined, max: undefined }),
        parentEventId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        assocId: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      },
      schedule: {
        start: `${faker.date.past().toISOString().split('.')[0]}Z`,
        end: `${faker.date.past().toISOString().split('.')[0]}Z`,
        maxOccurrences: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          null,
        ]),
        cancel: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => `${faker.date.past().toISOString().split('.')[0]}Z`),
        exclude: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => `${faker.date.past().toISOString().split('.')[0]}Z`),
        dayOfWeek: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.datatype.number({ min: undefined, max: undefined })),
      },
    }),
  ),
  type: faker.helpers.arrayElement(['Personal', 'Group']),
});

export const getCalendarEventControllerCreateCalendarEventMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  visible: faker.datatype.boolean(),
  data: {
    id: faker.datatype.number({ min: undefined, max: undefined }),
    title: faker.random.word(),
    description: faker.helpers.arrayElement([faker.random.word(), null]),
    creatorId: faker.datatype.number({ min: undefined, max: undefined }),
    parentEventId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    assocId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  },
  schedule: {
    start: `${faker.date.past().toISOString().split('.')[0]}Z`,
    end: `${faker.date.past().toISOString().split('.')[0]}Z`,
    maxOccurrences: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    cancel: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => `${faker.date.past().toISOString().split('.')[0]}Z`,
    ),
    exclude: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => `${faker.date.past().toISOString().split('.')[0]}Z`),
    dayOfWeek: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.datatype.number({ min: undefined, max: undefined })),
  },
});

export const getCalendarEventControllerUpdateCalendarEventMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  visible: faker.datatype.boolean(),
  data: {
    id: faker.datatype.number({ min: undefined, max: undefined }),
    title: faker.random.word(),
    description: faker.helpers.arrayElement([faker.random.word(), null]),
    creatorId: faker.datatype.number({ min: undefined, max: undefined }),
    parentEventId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    assocId: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  },
  schedule: {
    start: `${faker.date.past().toISOString().split('.')[0]}Z`,
    end: `${faker.date.past().toISOString().split('.')[0]}Z`,
    maxOccurrences: faker.helpers.arrayElement([
      faker.datatype.number({ min: undefined, max: undefined }),
      null,
    ]),
    cancel: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => `${faker.date.past().toISOString().split('.')[0]}Z`,
    ),
    exclude: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => `${faker.date.past().toISOString().split('.')[0]}Z`),
    dayOfWeek: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.datatype.number({ min: undefined, max: undefined })),
  },
});

export const getCalendarEventControllerDeleteCalendarEventMock = () => ({
  success: faker.datatype.boolean(),
});

export const getCalendarEventControllerRescheduleCalendarEventMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  eventId: faker.datatype.number({ min: undefined, max: undefined }),
  on: `${faker.date.past().toISOString().split('.')[0]}Z`,
  startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`,
  endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`,
  rescheduled: faker.datatype.boolean(),
  cancelled: faker.datatype.boolean(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
});

export const getCalendarEventControllerCancelCalendarEventMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  eventId: faker.datatype.number({ min: undefined, max: undefined }),
  on: `${faker.date.past().toISOString().split('.')[0]}Z`,
  startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`,
  endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`,
  rescheduled: faker.datatype.boolean(),
  cancelled: faker.datatype.boolean(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
});

export const getCalendarMSW = () => [
  rest.get('*/api/v1/calendar/calendar/:calendarId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCalendarControllerGetCalendarMock()),
    );
  }),
  rest.get('*/api/v1/calendar/calendar/:calendarId/list', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCalendarControllerGetCalendarListViewMock()),
    );
  }),
  rest.post('*/api/v1/calendar/:calendarId/events', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCalendarEventControllerCreateCalendarEventMock()),
    );
  }),
  rest.patch('*/api/v1/calendar/events/:eventId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCalendarEventControllerUpdateCalendarEventMock()),
    );
  }),
  rest.delete('*/api/v1/calendar/events/:eventId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCalendarEventControllerDeleteCalendarEventMock()),
    );
  }),
  rest.patch('*/api/v1/calendar/events/:eventId/reschedule', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCalendarEventControllerRescheduleCalendarEventMock()),
    );
  }),
  rest.patch('*/api/v1/calendar/events/:eventId/cancel', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCalendarEventControllerCancelCalendarEventMock()),
    );
  }),
  rest.post('*/api/v1/calendar/:calendarId/events/:eventId/subscribe', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.post('*/api/v1/calendar/:calendarId/events/:eventId/unsubscribe', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
];
