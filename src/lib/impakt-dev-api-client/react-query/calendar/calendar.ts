/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  CalendarDtoV1,
  HttpExceptionSchema,
  CalendarEventDtoV1Response,
  PatchCalendarEventReq,
  DeleteAnEventRes,
  PostCalendarEventReq,
  CalendarEventRescheduleRes,
  EventRescheduleReq,
  CancelCalendarEventReq,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const calendarControllerGetCalendar = (
  calendarId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CalendarDtoV1>(
    { url: `/api/v1/calendar/${calendarId}`, method: 'get', signal },
    options,
  );
};

export const getCalendarControllerGetCalendarQueryKey = (calendarId: number) => [
  `/api/v1/calendar/${calendarId}`,
];

export type CalendarControllerGetCalendarQueryResult = NonNullable<
  Awaited<ReturnType<typeof calendarControllerGetCalendar>>
>;
export type CalendarControllerGetCalendarQueryError = ErrorType<HttpExceptionSchema>;

export const useCalendarControllerGetCalendar = <
  TData = Awaited<ReturnType<typeof calendarControllerGetCalendar>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  calendarId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof calendarControllerGetCalendar>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCalendarControllerGetCalendarQueryKey(calendarId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof calendarControllerGetCalendar>>> = ({
    signal,
  }) => calendarControllerGetCalendar(calendarId, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof calendarControllerGetCalendar>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!calendarId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const calendarControllerGetCalendarListView = (
  calendarId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CalendarDtoV1>(
    { url: `/api/v1/calendar/${calendarId}/list`, method: 'get', signal },
    options,
  );
};

export const getCalendarControllerGetCalendarListViewQueryKey = (calendarId: number) => [
  `/api/v1/calendar/${calendarId}/list`,
];

export type CalendarControllerGetCalendarListViewQueryResult = NonNullable<
  Awaited<ReturnType<typeof calendarControllerGetCalendarListView>>
>;
export type CalendarControllerGetCalendarListViewQueryError = ErrorType<HttpExceptionSchema>;

export const useCalendarControllerGetCalendarListView = <
  TData = Awaited<ReturnType<typeof calendarControllerGetCalendarListView>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  calendarId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof calendarControllerGetCalendarListView>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCalendarControllerGetCalendarListViewQueryKey(calendarId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof calendarControllerGetCalendarListView>>
  > = ({ signal }) => calendarControllerGetCalendarListView(calendarId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof calendarControllerGetCalendarListView>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!calendarId, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const calendarEventControllerFindOneCalendarEvent = (
  eventId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CalendarEventDtoV1Response>(
    { url: `/api/v1/calendar/events/${eventId}`, method: 'get', signal },
    options,
  );
};

export const getCalendarEventControllerFindOneCalendarEventQueryKey = (eventId: number) => [
  `/api/v1/calendar/events/${eventId}`,
];

export type CalendarEventControllerFindOneCalendarEventQueryResult = NonNullable<
  Awaited<ReturnType<typeof calendarEventControllerFindOneCalendarEvent>>
>;
export type CalendarEventControllerFindOneCalendarEventQueryError = ErrorType<HttpExceptionSchema>;

export const useCalendarEventControllerFindOneCalendarEvent = <
  TData = Awaited<ReturnType<typeof calendarEventControllerFindOneCalendarEvent>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  eventId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof calendarEventControllerFindOneCalendarEvent>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCalendarEventControllerFindOneCalendarEventQueryKey(eventId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof calendarEventControllerFindOneCalendarEvent>>
  > = ({ signal }) => calendarEventControllerFindOneCalendarEvent(eventId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof calendarEventControllerFindOneCalendarEvent>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!eventId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const calendarEventControllerUpdateCalendarEvent = (
  eventId: number,
  patchCalendarEventReq: PatchCalendarEventReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CalendarEventDtoV1Response>(
    {
      url: `/api/v1/calendar/events/${eventId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: patchCalendarEventReq,
    },
    options,
  );
};

export type CalendarEventControllerUpdateCalendarEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof calendarEventControllerUpdateCalendarEvent>>
>;
export type CalendarEventControllerUpdateCalendarEventMutationBody = PatchCalendarEventReq;
export type CalendarEventControllerUpdateCalendarEventMutationError =
  ErrorType<HttpExceptionSchema>;

export const useCalendarEventControllerUpdateCalendarEvent = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof calendarEventControllerUpdateCalendarEvent>>,
    TError,
    { eventId: number; data: PatchCalendarEventReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof calendarEventControllerUpdateCalendarEvent>>,
    { eventId: number; data: PatchCalendarEventReq }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return calendarEventControllerUpdateCalendarEvent(eventId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof calendarEventControllerUpdateCalendarEvent>>,
    TError,
    { eventId: number; data: PatchCalendarEventReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const calendarEventControllerDeleteCalendarEvent = (
  eventId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<DeleteAnEventRes>(
    { url: `/api/v1/calendar/events/${eventId}`, method: 'delete' },
    options,
  );
};

export type CalendarEventControllerDeleteCalendarEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof calendarEventControllerDeleteCalendarEvent>>
>;

export type CalendarEventControllerDeleteCalendarEventMutationError =
  ErrorType<HttpExceptionSchema>;

export const useCalendarEventControllerDeleteCalendarEvent = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof calendarEventControllerDeleteCalendarEvent>>,
    TError,
    { eventId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof calendarEventControllerDeleteCalendarEvent>>,
    { eventId: number }
  > = (props) => {
    const { eventId } = props ?? {};

    return calendarEventControllerDeleteCalendarEvent(eventId, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof calendarEventControllerDeleteCalendarEvent>>,
    TError,
    { eventId: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const calendarEventControllerCreateCalendarEvent = (
  calendarId: number,
  postCalendarEventReq: PostCalendarEventReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CalendarEventDtoV1Response>(
    {
      url: `/api/v1/calendar/${calendarId}/events`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: postCalendarEventReq,
    },
    options,
  );
};

export type CalendarEventControllerCreateCalendarEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof calendarEventControllerCreateCalendarEvent>>
>;
export type CalendarEventControllerCreateCalendarEventMutationBody = PostCalendarEventReq;
export type CalendarEventControllerCreateCalendarEventMutationError =
  ErrorType<HttpExceptionSchema>;

export const useCalendarEventControllerCreateCalendarEvent = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof calendarEventControllerCreateCalendarEvent>>,
    TError,
    { calendarId: number; data: PostCalendarEventReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof calendarEventControllerCreateCalendarEvent>>,
    { calendarId: number; data: PostCalendarEventReq }
  > = (props) => {
    const { calendarId, data } = props ?? {};

    return calendarEventControllerCreateCalendarEvent(calendarId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof calendarEventControllerCreateCalendarEvent>>,
    TError,
    { calendarId: number; data: PostCalendarEventReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const calendarEventControllerRescheduleCalendarEvent = (
  eventId: number,
  eventRescheduleReq: EventRescheduleReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CalendarEventRescheduleRes>(
    {
      url: `/api/v1/calendar/events/${eventId}/reschedule`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: eventRescheduleReq,
    },
    options,
  );
};

export type CalendarEventControllerRescheduleCalendarEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof calendarEventControllerRescheduleCalendarEvent>>
>;
export type CalendarEventControllerRescheduleCalendarEventMutationBody = EventRescheduleReq;
export type CalendarEventControllerRescheduleCalendarEventMutationError =
  ErrorType<HttpExceptionSchema>;

export const useCalendarEventControllerRescheduleCalendarEvent = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof calendarEventControllerRescheduleCalendarEvent>>,
    TError,
    { eventId: number; data: EventRescheduleReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof calendarEventControllerRescheduleCalendarEvent>>,
    { eventId: number; data: EventRescheduleReq }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return calendarEventControllerRescheduleCalendarEvent(eventId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof calendarEventControllerRescheduleCalendarEvent>>,
    TError,
    { eventId: number; data: EventRescheduleReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const calendarEventControllerCancelCalendarEvent = (
  eventId: number,
  cancelCalendarEventReq: CancelCalendarEventReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CalendarEventRescheduleRes>(
    {
      url: `/api/v1/calendar/events/${eventId}/cancel`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: cancelCalendarEventReq,
    },
    options,
  );
};

export type CalendarEventControllerCancelCalendarEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof calendarEventControllerCancelCalendarEvent>>
>;
export type CalendarEventControllerCancelCalendarEventMutationBody = CancelCalendarEventReq;
export type CalendarEventControllerCancelCalendarEventMutationError =
  ErrorType<HttpExceptionSchema>;

export const useCalendarEventControllerCancelCalendarEvent = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof calendarEventControllerCancelCalendarEvent>>,
    TError,
    { eventId: number; data: CancelCalendarEventReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof calendarEventControllerCancelCalendarEvent>>,
    { eventId: number; data: CancelCalendarEventReq }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return calendarEventControllerCancelCalendarEvent(eventId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof calendarEventControllerCancelCalendarEvent>>,
    TError,
    { eventId: number; data: CancelCalendarEventReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const calendarEventSubscriptionControllerSubscribeToCalendarEvent = (
  calendarId: number,
  eventId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v1/calendar/${calendarId}/events/${eventId}/subscribe`, method: 'post' },
    options,
  );
};

export type CalendarEventSubscriptionControllerSubscribeToCalendarEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof calendarEventSubscriptionControllerSubscribeToCalendarEvent>>
>;

export type CalendarEventSubscriptionControllerSubscribeToCalendarEventMutationError =
  ErrorType<unknown>;

export const useCalendarEventSubscriptionControllerSubscribeToCalendarEvent = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof calendarEventSubscriptionControllerSubscribeToCalendarEvent>>,
    TError,
    { calendarId: number; eventId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof calendarEventSubscriptionControllerSubscribeToCalendarEvent>>,
    { calendarId: number; eventId: number }
  > = (props) => {
    const { calendarId, eventId } = props ?? {};

    return calendarEventSubscriptionControllerSubscribeToCalendarEvent(
      calendarId,
      eventId,
      requestOptions,
    );
  };

  return useMutation<
    Awaited<ReturnType<typeof calendarEventSubscriptionControllerSubscribeToCalendarEvent>>,
    TError,
    { calendarId: number; eventId: number },
    TContext
  >(mutationFn, mutationOptions);
};
export const calendarEventSubscriptionControllerUnsubscribeFromCalendarEvent = (
  calendarId: number,
  eventId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v1/calendar/${calendarId}/events/${eventId}/unsubscribe`, method: 'post' },
    options,
  );
};

export type CalendarEventSubscriptionControllerUnsubscribeFromCalendarEventMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof calendarEventSubscriptionControllerUnsubscribeFromCalendarEvent>>
  >;

export type CalendarEventSubscriptionControllerUnsubscribeFromCalendarEventMutationError =
  ErrorType<unknown>;

export const useCalendarEventSubscriptionControllerUnsubscribeFromCalendarEvent = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof calendarEventSubscriptionControllerUnsubscribeFromCalendarEvent>>,
    TError,
    { calendarId: number; eventId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof calendarEventSubscriptionControllerUnsubscribeFromCalendarEvent>>,
    { calendarId: number; eventId: number }
  > = (props) => {
    const { calendarId, eventId } = props ?? {};

    return calendarEventSubscriptionControllerUnsubscribeFromCalendarEvent(
      calendarId,
      eventId,
      requestOptions,
    );
  };

  return useMutation<
    Awaited<ReturnType<typeof calendarEventSubscriptionControllerUnsubscribeFromCalendarEvent>>,
    TError,
    { calendarId: number; eventId: number },
    TContext
  >(mutationFn, mutationOptions);
};
