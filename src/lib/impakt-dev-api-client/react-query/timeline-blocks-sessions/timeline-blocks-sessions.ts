/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GetTimelineBlockSessionRes,
  HttpExceptionSchema,
  TimelineBlockSessionsControllerGetTimeBlockSessionsParams,
  PostTimelineBlockSessionReq,
  PatchTimelineBlockSessionReq,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const timelineBlockSessionsControllerGetTimeBlockSessions = (
  params?: TimelineBlockSessionsControllerGetTimeBlockSessionsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetTimelineBlockSessionRes[]>(
    { url: `/api/v1/fitness/timeline-block-sessions`, method: 'get', params, signal },
    options,
  );
};

export const getTimelineBlockSessionsControllerGetTimeBlockSessionsQueryKey = (
  params?: TimelineBlockSessionsControllerGetTimeBlockSessionsParams,
) => [`/api/v1/fitness/timeline-block-sessions`, ...(params ? [params] : [])];

export type TimelineBlockSessionsControllerGetTimeBlockSessionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof timelineBlockSessionsControllerGetTimeBlockSessions>>
>;
export type TimelineBlockSessionsControllerGetTimeBlockSessionsQueryError =
  ErrorType<HttpExceptionSchema>;

export const useTimelineBlockSessionsControllerGetTimeBlockSessions = <
  TData = Awaited<ReturnType<typeof timelineBlockSessionsControllerGetTimeBlockSessions>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params?: TimelineBlockSessionsControllerGetTimeBlockSessionsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof timelineBlockSessionsControllerGetTimeBlockSessions>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTimelineBlockSessionsControllerGetTimeBlockSessionsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof timelineBlockSessionsControllerGetTimeBlockSessions>>
  > = ({ signal }) =>
    timelineBlockSessionsControllerGetTimeBlockSessions(params, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof timelineBlockSessionsControllerGetTimeBlockSessions>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const timelineBlockSessionsControllerCreate = (
  postTimelineBlockSessionReq: PostTimelineBlockSessionReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetTimelineBlockSessionRes>(
    {
      url: `/api/v1/fitness/timeline-block-sessions`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: postTimelineBlockSessionReq,
    },
    options,
  );
};

export type TimelineBlockSessionsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof timelineBlockSessionsControllerCreate>>
>;
export type TimelineBlockSessionsControllerCreateMutationBody = PostTimelineBlockSessionReq;
export type TimelineBlockSessionsControllerCreateMutationError = ErrorType<HttpExceptionSchema>;

export const useTimelineBlockSessionsControllerCreate = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timelineBlockSessionsControllerCreate>>,
    TError,
    { data: PostTimelineBlockSessionReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timelineBlockSessionsControllerCreate>>,
    { data: PostTimelineBlockSessionReq }
  > = (props) => {
    const { data } = props ?? {};

    return timelineBlockSessionsControllerCreate(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof timelineBlockSessionsControllerCreate>>,
    TError,
    { data: PostTimelineBlockSessionReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const timelineBlockSessionsControllerPatchOne = (
  id: number,
  patchTimelineBlockSessionReq: PatchTimelineBlockSessionReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetTimelineBlockSessionRes>(
    {
      url: `/api/v1/fitness/timeline-block-sessions/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: patchTimelineBlockSessionReq,
    },
    options,
  );
};

export type TimelineBlockSessionsControllerPatchOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof timelineBlockSessionsControllerPatchOne>>
>;
export type TimelineBlockSessionsControllerPatchOneMutationBody = PatchTimelineBlockSessionReq;
export type TimelineBlockSessionsControllerPatchOneMutationError = ErrorType<HttpExceptionSchema>;

export const useTimelineBlockSessionsControllerPatchOne = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timelineBlockSessionsControllerPatchOne>>,
    TError,
    { id: number; data: PatchTimelineBlockSessionReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timelineBlockSessionsControllerPatchOne>>,
    { id: number; data: PatchTimelineBlockSessionReq }
  > = (props) => {
    const { id, data } = props ?? {};

    return timelineBlockSessionsControllerPatchOne(id, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof timelineBlockSessionsControllerPatchOne>>,
    TError,
    { id: number; data: PatchTimelineBlockSessionReq },
    TContext
  >(mutationFn, mutationOptions);
};
