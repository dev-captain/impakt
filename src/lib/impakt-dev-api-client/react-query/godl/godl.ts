/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  GodlAccountRes,
  HttpExceptionSchema,
  GodlBaseRewardRes,
  GodlChallengeControllerGetChallengesBaseRewardParams,
  GetRewardRes,
  PostUserRewardReq,
  GetGodlLoginRewardValuesRes,
  PostGodlDailyLoginRewardRes,
  GetGodlDailyLoginRewardHistoryRes,
  GoldHistoryByUserIdV1Res,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const godlAccountControllerGetAccount = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GodlAccountRes>(
    { url: `/api/v1/godl/account`, method: 'get', signal },
    options,
  );
};

export const getGodlAccountControllerGetAccountQueryKey = () => [`/api/v1/godl/account`];

export type GodlAccountControllerGetAccountQueryResult = NonNullable<
  Awaited<ReturnType<typeof godlAccountControllerGetAccount>>
>;
export type GodlAccountControllerGetAccountQueryError = ErrorType<HttpExceptionSchema>;

export const useGodlAccountControllerGetAccount = <
  TData = Awaited<ReturnType<typeof godlAccountControllerGetAccount>>,
  TError = ErrorType<HttpExceptionSchema>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof godlAccountControllerGetAccount>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGodlAccountControllerGetAccountQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof godlAccountControllerGetAccount>>> = ({
    signal,
  }) => godlAccountControllerGetAccount(requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof godlAccountControllerGetAccount>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @deprecated
 */
export const godlChallengeControllerGetChallengesBaseReward = (
  params?: GodlChallengeControllerGetChallengesBaseRewardParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GodlBaseRewardRes[]>(
    { url: `/api/v1/godl/challenge/base-reward`, method: 'get', params, signal },
    options,
  );
};

export const getGodlChallengeControllerGetChallengesBaseRewardQueryKey = (
  params?: GodlChallengeControllerGetChallengesBaseRewardParams,
) => [`/api/v1/godl/challenge/base-reward`, ...(params ? [params] : [])];

export type GodlChallengeControllerGetChallengesBaseRewardQueryResult = NonNullable<
  Awaited<ReturnType<typeof godlChallengeControllerGetChallengesBaseReward>>
>;
export type GodlChallengeControllerGetChallengesBaseRewardQueryError =
  ErrorType<HttpExceptionSchema>;

export const useGodlChallengeControllerGetChallengesBaseReward = <
  TData = Awaited<ReturnType<typeof godlChallengeControllerGetChallengesBaseReward>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params?: GodlChallengeControllerGetChallengesBaseRewardParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof godlChallengeControllerGetChallengesBaseReward>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGodlChallengeControllerGetChallengesBaseRewardQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof godlChallengeControllerGetChallengesBaseReward>>
  > = ({ signal }) =>
    godlChallengeControllerGetChallengesBaseReward(params, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof godlChallengeControllerGetChallengesBaseReward>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @deprecated
 */
export const godlRewardControllerRewardGodl = (
  postUserRewardReq: PostUserRewardReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetRewardRes>(
    {
      url: `/api/v1/godl/reward-user`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: postUserRewardReq,
    },
    options,
  );
};

export type GodlRewardControllerRewardGodlMutationResult = NonNullable<
  Awaited<ReturnType<typeof godlRewardControllerRewardGodl>>
>;
export type GodlRewardControllerRewardGodlMutationBody = PostUserRewardReq;
export type GodlRewardControllerRewardGodlMutationError = ErrorType<HttpExceptionSchema>;

export const useGodlRewardControllerRewardGodl = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof godlRewardControllerRewardGodl>>,
    TError,
    { data: PostUserRewardReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof godlRewardControllerRewardGodl>>,
    { data: PostUserRewardReq }
  > = (props) => {
    const { data } = props ?? {};

    return godlRewardControllerRewardGodl(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof godlRewardControllerRewardGodl>>,
    TError,
    { data: PostUserRewardReq },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @deprecated
 */
export const godlRewardControllerGetDailyLoginRewardValues = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGodlLoginRewardValuesRes>(
    { url: `/api/v1/godl/reward-user/login-rewards`, method: 'get', signal },
    options,
  );
};

export const getGodlRewardControllerGetDailyLoginRewardValuesQueryKey = () => [
  `/api/v1/godl/reward-user/login-rewards`,
];

export type GodlRewardControllerGetDailyLoginRewardValuesQueryResult = NonNullable<
  Awaited<ReturnType<typeof godlRewardControllerGetDailyLoginRewardValues>>
>;
export type GodlRewardControllerGetDailyLoginRewardValuesQueryError =
  ErrorType<HttpExceptionSchema>;

export const useGodlRewardControllerGetDailyLoginRewardValues = <
  TData = Awaited<ReturnType<typeof godlRewardControllerGetDailyLoginRewardValues>>,
  TError = ErrorType<HttpExceptionSchema>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof godlRewardControllerGetDailyLoginRewardValues>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGodlRewardControllerGetDailyLoginRewardValuesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof godlRewardControllerGetDailyLoginRewardValues>>
  > = ({ signal }) => godlRewardControllerGetDailyLoginRewardValues(requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof godlRewardControllerGetDailyLoginRewardValues>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @deprecated
 */
export const godlRewardControllerPostDailyLoginReward = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PostGodlDailyLoginRewardRes>(
    { url: `/api/v1/godl/reward-user/login-reward`, method: 'post' },
    options,
  );
};

export type GodlRewardControllerPostDailyLoginRewardMutationResult = NonNullable<
  Awaited<ReturnType<typeof godlRewardControllerPostDailyLoginReward>>
>;

export type GodlRewardControllerPostDailyLoginRewardMutationError = ErrorType<HttpExceptionSchema>;

export const useGodlRewardControllerPostDailyLoginReward = <
  TError = ErrorType<HttpExceptionSchema>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof godlRewardControllerPostDailyLoginReward>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof godlRewardControllerPostDailyLoginReward>>,
    TVariables
  > = () => {
    return godlRewardControllerPostDailyLoginReward(requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof godlRewardControllerPostDailyLoginReward>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const godlRewardControllerGetDailyLoginRewardStreak = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGodlDailyLoginRewardHistoryRes>(
    { url: `/api/v1/godl/reward-user/login-reward/${userId}`, method: 'get', signal },
    options,
  );
};

export const getGodlRewardControllerGetDailyLoginRewardStreakQueryKey = (userId: number) => [
  `/api/v1/godl/reward-user/login-reward/${userId}`,
];

export type GodlRewardControllerGetDailyLoginRewardStreakQueryResult = NonNullable<
  Awaited<ReturnType<typeof godlRewardControllerGetDailyLoginRewardStreak>>
>;
export type GodlRewardControllerGetDailyLoginRewardStreakQueryError =
  ErrorType<HttpExceptionSchema>;

export const useGodlRewardControllerGetDailyLoginRewardStreak = <
  TData = Awaited<ReturnType<typeof godlRewardControllerGetDailyLoginRewardStreak>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof godlRewardControllerGetDailyLoginRewardStreak>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGodlRewardControllerGetDailyLoginRewardStreakQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof godlRewardControllerGetDailyLoginRewardStreak>>
  > = ({ signal }) => godlRewardControllerGetDailyLoginRewardStreak(userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof godlRewardControllerGetDailyLoginRewardStreak>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!userId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const godlHistoryControllerV1GetHistoryByUserId = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GoldHistoryByUserIdV1Res>(
    { url: `/api/v1/godl/history/${userId}`, method: 'get', signal },
    options,
  );
};

export const getGodlHistoryControllerV1GetHistoryByUserIdQueryKey = (userId: number) => [
  `/api/v1/godl/history/${userId}`,
];

export type GodlHistoryControllerV1GetHistoryByUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof godlHistoryControllerV1GetHistoryByUserId>>
>;
export type GodlHistoryControllerV1GetHistoryByUserIdQueryError = ErrorType<unknown>;

export const useGodlHistoryControllerV1GetHistoryByUserId = <
  TData = Awaited<ReturnType<typeof godlHistoryControllerV1GetHistoryByUserId>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof godlHistoryControllerV1GetHistoryByUserId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGodlHistoryControllerV1GetHistoryByUserIdQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof godlHistoryControllerV1GetHistoryByUserId>>
  > = ({ signal }) => godlHistoryControllerV1GetHistoryByUserId(userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof godlHistoryControllerV1GetHistoryByUserId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!userId, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};
