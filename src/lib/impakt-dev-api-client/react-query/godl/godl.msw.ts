/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getGodlAccountControllerGetAccountMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  userId: faker.datatype.number({ min: undefined, max: undefined }),
  balance: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getGodlChallengeControllerGetChallengesBaseRewardMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    challengeId: faker.datatype.number({ min: undefined, max: undefined }),
    baseReward: faker.datatype.number({ min: undefined, max: undefined }),
  }));

export const getGodlRewardControllerRewardGodlMock = () => ({
  id: faker.datatype.number({ min: undefined, max: undefined }),
  toAccountId: faker.datatype.number({ min: undefined, max: undefined }),
  amount: faker.datatype.number({ min: undefined, max: undefined }),
  purpose: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getGodlRewardControllerGetDailyLoginRewardValuesMock = () => ({
  data: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => faker.datatype.number({ min: undefined, max: undefined }),
  ),
});

export const getGodlRewardControllerPostDailyLoginRewardMock = () => ({
  value: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getGodlRewardControllerGetDailyLoginRewardStreakMock = () => ({
  count: faker.datatype.number({ min: undefined, max: undefined }),
  streakedToday: faker.datatype.boolean(),
});

export const getGodlHistoryControllerV1GetHistoryByUserIdMock = () => ({
  data: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      purpose: faker.helpers.arrayElement([
        'Transfer',
        'ChallengeReward',
        'ChallengeCreatorReward',
        'TimelineBlock',
        'Referral',
        'SignUp',
        'AdminReward',
        'DailyReward',
      ]),
      timestamp: `${faker.date.past().toISOString().split('.')[0]}Z`,
      value: faker.datatype.number({ min: undefined, max: undefined }),
      routineSessionId: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        null,
      ]),
    }),
  ),
});

export const getGodlMSW = () => [
  rest.get('*/api/v1/godl/account', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGodlAccountControllerGetAccountMock()),
    );
  }),
  rest.get('*/api/v1/godl/challenge/base-reward', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGodlChallengeControllerGetChallengesBaseRewardMock()),
    );
  }),
  rest.post('*/api/v1/godl/reward-user', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGodlRewardControllerRewardGodlMock()),
    );
  }),
  rest.get('*/api/v1/godl/reward-user/login-rewards', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGodlRewardControllerGetDailyLoginRewardValuesMock()),
    );
  }),
  rest.post('*/api/v1/godl/reward-user/login-reward', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGodlRewardControllerPostDailyLoginRewardMock()),
    );
  }),
  rest.get('*/api/v1/godl/reward-user/login-reward/:userId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGodlRewardControllerGetDailyLoginRewardStreakMock()),
    );
  }),
  rest.get('*/api/v1/godl/history/:userId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGodlHistoryControllerV1GetHistoryByUserIdMock()),
    );
  }),
];
