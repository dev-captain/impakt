/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  UserStatsGetActiveMembersRes,
  HttpExceptionSchema,
  UserStatsControllerGetActiveMembersParams,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const userStatsControllerGetActiveMembers = (
  params: UserStatsControllerGetActiveMembersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserStatsGetActiveMembersRes>(
    { url: `/api/v1/stats/users/activeMembers`, method: 'get', params, signal },
    options,
  );
};

export const getUserStatsControllerGetActiveMembersQueryKey = (
  params: UserStatsControllerGetActiveMembersParams,
) => [`/api/v1/stats/users/activeMembers`, ...(params ? [params] : [])];

export type UserStatsControllerGetActiveMembersQueryResult = NonNullable<
  Awaited<ReturnType<typeof userStatsControllerGetActiveMembers>>
>;
export type UserStatsControllerGetActiveMembersQueryError = ErrorType<HttpExceptionSchema>;

export const useUserStatsControllerGetActiveMembers = <
  TData = Awaited<ReturnType<typeof userStatsControllerGetActiveMembers>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params: UserStatsControllerGetActiveMembersParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof userStatsControllerGetActiveMembers>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserStatsControllerGetActiveMembersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userStatsControllerGetActiveMembers>>> = ({
    signal,
  }) => userStatsControllerGetActiveMembers(params, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof userStatsControllerGetActiveMembers>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
