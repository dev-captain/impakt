/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { GetServerEnvResV1, GetAppConfigClientValueV1 } from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const appConfigValuesControllerV1GetServerEnv = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetServerEnvResV1>(
    { url: `/api/v1/appConfig/env`, method: 'get', signal },
    options,
  );
};

export const getAppConfigValuesControllerV1GetServerEnvQueryKey = () => [`/api/v1/appConfig/env`];

export type AppConfigValuesControllerV1GetServerEnvQueryResult = NonNullable<
  Awaited<ReturnType<typeof appConfigValuesControllerV1GetServerEnv>>
>;
export type AppConfigValuesControllerV1GetServerEnvQueryError = ErrorType<unknown>;

export const useAppConfigValuesControllerV1GetServerEnv = <
  TData = Awaited<ReturnType<typeof appConfigValuesControllerV1GetServerEnv>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof appConfigValuesControllerV1GetServerEnv>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppConfigValuesControllerV1GetServerEnvQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appConfigValuesControllerV1GetServerEnv>>
  > = ({ signal }) => appConfigValuesControllerV1GetServerEnv(requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof appConfigValuesControllerV1GetServerEnv>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const appConfigValuesControllerV1GetAppConfigClientValue = (
  key:
    | 'GODL_DAILY_CAP_PLAYER_REWARD'
    | 'GODL_DAILY_CAP_CREATOR_REWARD'
    | 'GODL_BASE_REWARD_PLAYER'
    | 'GODL_DAILY_LOGIN_REWARD'
    | 'XP_DAILY_CAP_PLAYER'
    | 'XP_BASE_REWARD_PLAYER'
    | 'GODL_CREATOR_REWARD_PERCENTAGE'
    | 'COIN_DAILY_CAP_PLAYER_REWARD'
    | 'COIN_DAILY_CAP_CREATOR_REWARD'
    | 'COIN_BASE_REWARD_PLAYER'
    | 'COIN_CREATOR_REWARD_PERCENTAGE'
    | 'COIN_DAILY_LOGIN_REWARD',
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetAppConfigClientValueV1>(
    { url: `/api/v1/appConfig/${key}`, method: 'get', signal },
    options,
  );
};

export const getAppConfigValuesControllerV1GetAppConfigClientValueQueryKey = (
  key:
    | 'GODL_DAILY_CAP_PLAYER_REWARD'
    | 'GODL_DAILY_CAP_CREATOR_REWARD'
    | 'GODL_BASE_REWARD_PLAYER'
    | 'GODL_DAILY_LOGIN_REWARD'
    | 'XP_DAILY_CAP_PLAYER'
    | 'XP_BASE_REWARD_PLAYER'
    | 'GODL_CREATOR_REWARD_PERCENTAGE'
    | 'COIN_DAILY_CAP_PLAYER_REWARD'
    | 'COIN_DAILY_CAP_CREATOR_REWARD'
    | 'COIN_BASE_REWARD_PLAYER'
    | 'COIN_CREATOR_REWARD_PERCENTAGE'
    | 'COIN_DAILY_LOGIN_REWARD',
) => [`/api/v1/appConfig/${key}`];

export type AppConfigValuesControllerV1GetAppConfigClientValueQueryResult = NonNullable<
  Awaited<ReturnType<typeof appConfigValuesControllerV1GetAppConfigClientValue>>
>;
export type AppConfigValuesControllerV1GetAppConfigClientValueQueryError = ErrorType<unknown>;

export const useAppConfigValuesControllerV1GetAppConfigClientValue = <
  TData = Awaited<ReturnType<typeof appConfigValuesControllerV1GetAppConfigClientValue>>,
  TError = ErrorType<unknown>,
>(
  key:
    | 'GODL_DAILY_CAP_PLAYER_REWARD'
    | 'GODL_DAILY_CAP_CREATOR_REWARD'
    | 'GODL_BASE_REWARD_PLAYER'
    | 'GODL_DAILY_LOGIN_REWARD'
    | 'XP_DAILY_CAP_PLAYER'
    | 'XP_BASE_REWARD_PLAYER'
    | 'GODL_CREATOR_REWARD_PERCENTAGE'
    | 'COIN_DAILY_CAP_PLAYER_REWARD'
    | 'COIN_DAILY_CAP_CREATOR_REWARD'
    | 'COIN_BASE_REWARD_PLAYER'
    | 'COIN_CREATOR_REWARD_PERCENTAGE'
    | 'COIN_DAILY_LOGIN_REWARD',
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof appConfigValuesControllerV1GetAppConfigClientValue>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAppConfigValuesControllerV1GetAppConfigClientValueQueryKey(key);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appConfigValuesControllerV1GetAppConfigClientValue>>
  > = ({ signal }) =>
    appConfigValuesControllerV1GetAppConfigClientValue(key, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof appConfigValuesControllerV1GetAppConfigClientValue>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!key, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};
