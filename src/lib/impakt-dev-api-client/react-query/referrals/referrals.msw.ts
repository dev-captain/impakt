/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getReferralControllerGetReferreesMock = () => ({
  referrerId: faker.datatype.number({ min: undefined, max: undefined }),
  referrees: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    isConfirmed: faker.datatype.boolean(),
    isConfirmedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  })),
  totalCount: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
  confirmedCount: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
    undefined,
  ]),
});

export const getReferralControllerGetReferralRewardsForGodlMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    amount: faker.datatype.number({ min: undefined, max: undefined }),
  }));

export const getReferralControllerGetReferreeHowManyChallengesDoneMock = () => ({
  numberOfReferreesWhoHaveDoneOneChallenge: faker.datatype.number({
    min: undefined,
    max: undefined,
  }),
  numberOfReferreesWhoHaveDoneTwoChallenges: faker.datatype.number({
    min: undefined,
    max: undefined,
  }),
  numberOfReferreesWhoHaveDoneThreeChallenges: faker.datatype.number({
    min: undefined,
    max: undefined,
  }),
  numberOfReferreesWhoHaveDoneFourChallenges: faker.datatype.number({
    min: undefined,
    max: undefined,
  }),
  numberOfReferreesWhoHaveDoneFiveChallenges: faker.datatype.number({
    min: undefined,
    max: undefined,
  }),
});

export const getReferralControllerGetReferralRewardsForCoinMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    amount: faker.datatype.number({ min: undefined, max: undefined }),
  }));

export const getReferralsMSW = () => [
  rest.get('*/api/v1/referrals', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getReferralControllerGetReferreesMock()),
    );
  }),
  rest.get('*/api/v1/referrals/reward', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getReferralControllerGetReferralRewardsForGodlMock()),
    );
  }),
  rest.get('*/api/v1/referrals/referree-challenges', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getReferralControllerGetReferreeHowManyChallengesDoneMock()),
    );
  }),
  rest.get('*/api/v1/referrals/coin-rewards', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getReferralControllerGetReferralRewardsForCoinMock()),
    );
  }),
];
