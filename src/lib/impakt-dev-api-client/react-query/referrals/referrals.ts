/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  ReferreesOfReferrerRes,
  HttpExceptionSchema,
  ReferralControllerGetReferreesParams,
  ReferralTransactionRes,
  ReferralReferreeChallengesRes,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const referralControllerGetReferrees = (
  params?: ReferralControllerGetReferreesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ReferreesOfReferrerRes>(
    { url: `/api/v1/referrals`, method: 'get', params, signal },
    options,
  );
};

export const getReferralControllerGetReferreesQueryKey = (
  params?: ReferralControllerGetReferreesParams,
) => [`/api/v1/referrals`, ...(params ? [params] : [])];

export type ReferralControllerGetReferreesQueryResult = NonNullable<
  Awaited<ReturnType<typeof referralControllerGetReferrees>>
>;
export type ReferralControllerGetReferreesQueryError = ErrorType<HttpExceptionSchema>;

export const useReferralControllerGetReferrees = <
  TData = Awaited<ReturnType<typeof referralControllerGetReferrees>>,
  TError = ErrorType<HttpExceptionSchema>,
>(
  params?: ReferralControllerGetReferreesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof referralControllerGetReferrees>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReferralControllerGetReferreesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof referralControllerGetReferrees>>> = ({
    signal,
  }) => referralControllerGetReferrees(params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof referralControllerGetReferrees>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const referralControllerGetReferralRewardsForGodl = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ReferralTransactionRes[]>(
    { url: `/api/v1/referrals/reward`, method: 'get', signal },
    options,
  );
};

export const getReferralControllerGetReferralRewardsForGodlQueryKey = () => [
  `/api/v1/referrals/reward`,
];

export type ReferralControllerGetReferralRewardsForGodlQueryResult = NonNullable<
  Awaited<ReturnType<typeof referralControllerGetReferralRewardsForGodl>>
>;
export type ReferralControllerGetReferralRewardsForGodlQueryError = ErrorType<HttpExceptionSchema>;

export const useReferralControllerGetReferralRewardsForGodl = <
  TData = Awaited<ReturnType<typeof referralControllerGetReferralRewardsForGodl>>,
  TError = ErrorType<HttpExceptionSchema>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof referralControllerGetReferralRewardsForGodl>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getReferralControllerGetReferralRewardsForGodlQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof referralControllerGetReferralRewardsForGodl>>
  > = ({ signal }) => referralControllerGetReferralRewardsForGodl(requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof referralControllerGetReferralRewardsForGodl>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const referralControllerGetReferreeHowManyChallengesDone = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ReferralReferreeChallengesRes>(
    { url: `/api/v1/referrals/referree-challenges`, method: 'get', signal },
    options,
  );
};

export const getReferralControllerGetReferreeHowManyChallengesDoneQueryKey = () => [
  `/api/v1/referrals/referree-challenges`,
];

export type ReferralControllerGetReferreeHowManyChallengesDoneQueryResult = NonNullable<
  Awaited<ReturnType<typeof referralControllerGetReferreeHowManyChallengesDone>>
>;
export type ReferralControllerGetReferreeHowManyChallengesDoneQueryError =
  ErrorType<HttpExceptionSchema>;

export const useReferralControllerGetReferreeHowManyChallengesDone = <
  TData = Awaited<ReturnType<typeof referralControllerGetReferreeHowManyChallengesDone>>,
  TError = ErrorType<HttpExceptionSchema>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof referralControllerGetReferreeHowManyChallengesDone>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getReferralControllerGetReferreeHowManyChallengesDoneQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof referralControllerGetReferreeHowManyChallengesDone>>
  > = ({ signal }) => referralControllerGetReferreeHowManyChallengesDone(requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof referralControllerGetReferreeHowManyChallengesDone>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const referralControllerGetReferralRewardsForCoin = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ReferralTransactionRes[]>(
    { url: `/api/v1/referrals/coin-rewards`, method: 'get', signal },
    options,
  );
};

export const getReferralControllerGetReferralRewardsForCoinQueryKey = () => [
  `/api/v1/referrals/coin-rewards`,
];

export type ReferralControllerGetReferralRewardsForCoinQueryResult = NonNullable<
  Awaited<ReturnType<typeof referralControllerGetReferralRewardsForCoin>>
>;
export type ReferralControllerGetReferralRewardsForCoinQueryError = ErrorType<HttpExceptionSchema>;

export const useReferralControllerGetReferralRewardsForCoin = <
  TData = Awaited<ReturnType<typeof referralControllerGetReferralRewardsForCoin>>,
  TError = ErrorType<HttpExceptionSchema>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof referralControllerGetReferralRewardsForCoin>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getReferralControllerGetReferralRewardsForCoinQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof referralControllerGetReferralRewardsForCoin>>
  > = ({ signal }) => referralControllerGetReferralRewardsForCoin(requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof referralControllerGetReferralRewardsForCoin>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
