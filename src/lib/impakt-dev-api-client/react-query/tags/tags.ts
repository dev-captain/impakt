/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Impakt API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  TagRes,
  TagsControllerGetTagsParams,
  PostTagsReq,
  HttpExceptionSchema,
} from '../types';
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const tagsControllerGetTags = (
  params: TagsControllerGetTagsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<TagRes[]>(
    { url: `/api/v1/common/tags`, method: 'get', params, signal },
    options,
  );
};

export const getTagsControllerGetTagsQueryKey = (params: TagsControllerGetTagsParams) => [
  `/api/v1/common/tags`,
  ...(params ? [params] : []),
];

export type TagsControllerGetTagsQueryResult = NonNullable<
  Awaited<ReturnType<typeof tagsControllerGetTags>>
>;
export type TagsControllerGetTagsQueryError = ErrorType<unknown>;

export const useTagsControllerGetTags = <
  TData = Awaited<ReturnType<typeof tagsControllerGetTags>>,
  TError = ErrorType<unknown>,
>(
  params: TagsControllerGetTagsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof tagsControllerGetTags>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTagsControllerGetTagsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tagsControllerGetTags>>> = ({ signal }) =>
    tagsControllerGetTags(params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof tagsControllerGetTags>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const tagsControllerAddTag = (
  postTagsReq: PostTagsReq,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<TagRes[]>(
    {
      url: `/api/v1/common/tags`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: postTagsReq,
    },
    options,
  );
};

export type TagsControllerAddTagMutationResult = NonNullable<
  Awaited<ReturnType<typeof tagsControllerAddTag>>
>;
export type TagsControllerAddTagMutationBody = PostTagsReq;
export type TagsControllerAddTagMutationError = ErrorType<unknown>;

export const useTagsControllerAddTag = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tagsControllerAddTag>>,
    TError,
    { data: PostTagsReq },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tagsControllerAddTag>>,
    { data: PostTagsReq }
  > = (props) => {
    const { data } = props ?? {};

    return tagsControllerAddTag(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof tagsControllerAddTag>>,
    TError,
    { data: PostTagsReq },
    TContext
  >(mutationFn, mutationOptions);
};
export const tagsControllerRemoveTag = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<TagRes>({ url: `/api/v1/common/tags/${id}`, method: 'delete' }, options);
};

export type TagsControllerRemoveTagMutationResult = NonNullable<
  Awaited<ReturnType<typeof tagsControllerRemoveTag>>
>;

export type TagsControllerRemoveTagMutationError = ErrorType<HttpExceptionSchema>;

export const useTagsControllerRemoveTag = <
  TError = ErrorType<HttpExceptionSchema>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tagsControllerRemoveTag>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tagsControllerRemoveTag>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return tagsControllerRemoveTag(id, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof tagsControllerRemoveTag>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
